/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|* Assembly Writer Source Fragment                                            *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/

/// printInstruction - This method is automatically generated by tablegen
/// from the instruction set description.
void AArch64AppleInstPrinter::printInstruction(const MCInst *MI, const MCSubtargetInfo &STI, raw_ostream &O) {
  static const char AsmStrs[] = {
  /* 0 */ 'l', 'd', '1', 9, 0,
  /* 5 */ 'd', 'c', 'p', 's', '1', 9, 0,
  /* 12 */ 's', 't', '1', 9, 0,
  /* 17 */ 'r', 'e', 'v', '3', '2', 9, 0,
  /* 24 */ 'l', 'd', '2', 9, 0,
  /* 29 */ 'f', 'c', 'v', 't', 'l', '2', 9, 0,
  /* 37 */ 'f', 'c', 'v', 't', 'n', '2', 9, 0,
  /* 45 */ 'f', 'c', 'v', 't', 'x', 'n', '2', 9, 0,
  /* 54 */ 'd', 'c', 'p', 's', '2', 9, 0,
  /* 61 */ 's', 't', '2', 9, 0,
  /* 66 */ 'l', 'd', '3', 9, 0,
  /* 71 */ 'd', 'c', 'p', 's', '3', 9, 0,
  /* 78 */ 's', 't', '3', 9, 0,
  /* 83 */ 'l', 'd', '4', 9, 0,
  /* 88 */ 's', 't', '4', 9, 0,
  /* 93 */ 'r', 'e', 'v', '1', '6', 9, 0,
  /* 100 */ 'b', 'r', 'a', 'a', 9, 0,
  /* 106 */ 'l', 'd', 'r', 'a', 'a', 9, 0,
  /* 113 */ 'b', 'l', 'r', 'a', 'a', 9, 0,
  /* 120 */ 'p', 'a', 'c', 'd', 'a', 9, 0,
  /* 127 */ 'l', 'd', 'a', 'd', 'd', 'a', 9, 0,
  /* 135 */ 'a', 'u', 't', 'd', 'a', 9, 0,
  /* 142 */ 'p', 'a', 'c', 'g', 'a', 9, 0,
  /* 149 */ 'p', 'a', 'c', 'i', 'a', 9, 0,
  /* 156 */ 'a', 'u', 't', 'i', 'a', 9, 0,
  /* 163 */ 'l', 'd', 's', 'm', 'i', 'n', 'a', 9, 0,
  /* 172 */ 'l', 'd', 'u', 'm', 'i', 'n', 'a', 9, 0,
  /* 181 */ 'c', 'a', 's', 'p', 'a', 9, 0,
  /* 188 */ 's', 'w', 'p', 'a', 9, 0,
  /* 194 */ 'l', 'd', 'c', 'l', 'r', 'a', 9, 0,
  /* 202 */ 'l', 'd', 'e', 'o', 'r', 'a', 9, 0,
  /* 210 */ 's', 'r', 's', 'r', 'a', 9, 0,
  /* 217 */ 'u', 'r', 's', 'r', 'a', 9, 0,
  /* 224 */ 's', 's', 'r', 'a', 9, 0,
  /* 230 */ 'u', 's', 'r', 'a', 9, 0,
  /* 236 */ 'c', 'a', 's', 'a', 9, 0,
  /* 242 */ 'l', 'd', 's', 'e', 't', 'a', 9, 0,
  /* 250 */ 'f', 'r', 'i', 'n', 't', 'a', 9, 0,
  /* 258 */ 'l', 'd', 's', 'm', 'a', 'x', 'a', 9, 0,
  /* 267 */ 'l', 'd', 'u', 'm', 'a', 'x', 'a', 9, 0,
  /* 276 */ 'p', 'a', 'c', 'd', 'z', 'a', 9, 0,
  /* 284 */ 'a', 'u', 't', 'd', 'z', 'a', 9, 0,
  /* 292 */ 'p', 'a', 'c', 'i', 'z', 'a', 9, 0,
  /* 300 */ 'a', 'u', 't', 'i', 'z', 'a', 9, 0,
  /* 308 */ 'i', 'n', 's', '.', 'b', 9, 0,
  /* 315 */ 's', 'm', 'o', 'v', '.', 'b', 9, 0,
  /* 323 */ 'u', 'm', 'o', 'v', '.', 'b', 9, 0,
  /* 331 */ 'c', 'r', 'c', '3', '2', 'b', 9, 0,
  /* 339 */ 't', 'r', 'n', '1', '.', '1', '6', 'b', 9, 0,
  /* 349 */ 'z', 'i', 'p', '1', '.', '1', '6', 'b', 9, 0,
  /* 359 */ 'u', 'z', 'p', '1', '.', '1', '6', 'b', 9, 0,
  /* 369 */ 'r', 'e', 'v', '3', '2', '.', '1', '6', 'b', 9, 0,
  /* 380 */ 'r', 's', 'u', 'b', 'h', 'n', '2', '.', '1', '6', 'b', 9, 0,
  /* 393 */ 'r', 'a', 'd', 'd', 'h', 'n', '2', '.', '1', '6', 'b', 9, 0,
  /* 406 */ 's', 'q', 's', 'h', 'r', 'n', '2', '.', '1', '6', 'b', 9, 0,
  /* 419 */ 'u', 'q', 's', 'h', 'r', 'n', '2', '.', '1', '6', 'b', 9, 0,
  /* 432 */ 's', 'q', 'r', 's', 'h', 'r', 'n', '2', '.', '1', '6', 'b', 9, 0,
  /* 446 */ 'u', 'q', 'r', 's', 'h', 'r', 'n', '2', '.', '1', '6', 'b', 9, 0,
  /* 460 */ 't', 'r', 'n', '2', '.', '1', '6', 'b', 9, 0,
  /* 470 */ 's', 'q', 'x', 't', 'n', '2', '.', '1', '6', 'b', 9, 0,
  /* 482 */ 'u', 'q', 'x', 't', 'n', '2', '.', '1', '6', 'b', 9, 0,
  /* 494 */ 's', 'q', 's', 'h', 'r', 'u', 'n', '2', '.', '1', '6', 'b', 9, 0,
  /* 508 */ 's', 'q', 'r', 's', 'h', 'r', 'u', 'n', '2', '.', '1', '6', 'b', 9, 0,
  /* 523 */ 's', 'q', 'x', 't', 'u', 'n', '2', '.', '1', '6', 'b', 9, 0,
  /* 536 */ 'z', 'i', 'p', '2', '.', '1', '6', 'b', 9, 0,
  /* 546 */ 'u', 'z', 'p', '2', '.', '1', '6', 'b', 9, 0,
  /* 556 */ 'r', 'e', 'v', '6', '4', '.', '1', '6', 'b', 9, 0,
  /* 567 */ 'r', 'e', 'v', '1', '6', '.', '1', '6', 'b', 9, 0,
  /* 578 */ 's', 'a', 'b', 'a', '.', '1', '6', 'b', 9, 0,
  /* 588 */ 'u', 'a', 'b', 'a', '.', '1', '6', 'b', 9, 0,
  /* 598 */ 'm', 'l', 'a', '.', '1', '6', 'b', 9, 0,
  /* 607 */ 's', 'r', 's', 'r', 'a', '.', '1', '6', 'b', 9, 0,
  /* 618 */ 'u', 'r', 's', 'r', 'a', '.', '1', '6', 'b', 9, 0,
  /* 629 */ 's', 's', 'r', 'a', '.', '1', '6', 'b', 9, 0,
  /* 639 */ 'u', 's', 'r', 'a', '.', '1', '6', 'b', 9, 0,
  /* 649 */ 's', 'h', 's', 'u', 'b', '.', '1', '6', 'b', 9, 0,
  /* 660 */ 'u', 'h', 's', 'u', 'b', '.', '1', '6', 'b', 9, 0,
  /* 671 */ 's', 'q', 's', 'u', 'b', '.', '1', '6', 'b', 9, 0,
  /* 682 */ 'u', 'q', 's', 'u', 'b', '.', '1', '6', 'b', 9, 0,
  /* 693 */ 'b', 'i', 'c', '.', '1', '6', 'b', 9, 0,
  /* 702 */ 'a', 'e', 's', 'i', 'm', 'c', '.', '1', '6', 'b', 9, 0,
  /* 714 */ 'a', 'e', 's', 'm', 'c', '.', '1', '6', 'b', 9, 0,
  /* 725 */ 's', 'a', 'b', 'd', '.', '1', '6', 'b', 9, 0,
  /* 735 */ 'u', 'a', 'b', 'd', '.', '1', '6', 'b', 9, 0,
  /* 745 */ 's', 'r', 'h', 'a', 'd', 'd', '.', '1', '6', 'b', 9, 0,
  /* 757 */ 'u', 'r', 'h', 'a', 'd', 'd', '.', '1', '6', 'b', 9, 0,
  /* 769 */ 's', 'h', 'a', 'd', 'd', '.', '1', '6', 'b', 9, 0,
  /* 780 */ 'u', 'h', 'a', 'd', 'd', '.', '1', '6', 'b', 9, 0,
  /* 791 */ 'u', 's', 'q', 'a', 'd', 'd', '.', '1', '6', 'b', 9, 0,
  /* 803 */ 's', 'u', 'q', 'a', 'd', 'd', '.', '1', '6', 'b', 9, 0,
  /* 815 */ 'a', 'n', 'd', '.', '1', '6', 'b', 9, 0,
  /* 824 */ 'a', 'e', 's', 'd', '.', '1', '6', 'b', 9, 0,
  /* 834 */ 'c', 'm', 'g', 'e', '.', '1', '6', 'b', 9, 0,
  /* 844 */ 'c', 'm', 'l', 'e', '.', '1', '6', 'b', 9, 0,
  /* 854 */ 'a', 'e', 's', 'e', '.', '1', '6', 'b', 9, 0,
  /* 864 */ 'b', 'i', 'f', '.', '1', '6', 'b', 9, 0,
  /* 873 */ 's', 'q', 'n', 'e', 'g', '.', '1', '6', 'b', 9, 0,
  /* 884 */ 'c', 'm', 'h', 'i', '.', '1', '6', 'b', 9, 0,
  /* 894 */ 's', 'l', 'i', '.', '1', '6', 'b', 9, 0,
  /* 903 */ 's', 'r', 'i', '.', '1', '6', 'b', 9, 0,
  /* 912 */ 'm', 'o', 'v', 'i', '.', '1', '6', 'b', 9, 0,
  /* 922 */ 's', 'q', 's', 'h', 'l', '.', '1', '6', 'b', 9, 0,
  /* 933 */ 'u', 'q', 's', 'h', 'l', '.', '1', '6', 'b', 9, 0,
  /* 944 */ 's', 'q', 'r', 's', 'h', 'l', '.', '1', '6', 'b', 9, 0,
  /* 956 */ 'u', 'q', 'r', 's', 'h', 'l', '.', '1', '6', 'b', 9, 0,
  /* 968 */ 's', 'r', 's', 'h', 'l', '.', '1', '6', 'b', 9, 0,
  /* 979 */ 'u', 'r', 's', 'h', 'l', '.', '1', '6', 'b', 9, 0,
  /* 990 */ 's', 's', 'h', 'l', '.', '1', '6', 'b', 9, 0,
  /* 1000 */ 'u', 's', 'h', 'l', '.', '1', '6', 'b', 9, 0,
  /* 1010 */ 'b', 's', 'l', '.', '1', '6', 'b', 9, 0,
  /* 1019 */ 'p', 'm', 'u', 'l', '.', '1', '6', 'b', 9, 0,
  /* 1029 */ 's', 'm', 'i', 'n', '.', '1', '6', 'b', 9, 0,
  /* 1039 */ 'u', 'm', 'i', 'n', '.', '1', '6', 'b', 9, 0,
  /* 1049 */ 'o', 'r', 'n', '.', '1', '6', 'b', 9, 0,
  /* 1058 */ 'a', 'd', 'd', 'p', '.', '1', '6', 'b', 9, 0,
  /* 1068 */ 's', 'm', 'i', 'n', 'p', '.', '1', '6', 'b', 9, 0,
  /* 1079 */ 'u', 'm', 'i', 'n', 'p', '.', '1', '6', 'b', 9, 0,
  /* 1090 */ 'd', 'u', 'p', '.', '1', '6', 'b', 9, 0,
  /* 1099 */ 's', 'm', 'a', 'x', 'p', '.', '1', '6', 'b', 9, 0,
  /* 1110 */ 'u', 'm', 'a', 'x', 'p', '.', '1', '6', 'b', 9, 0,
  /* 1121 */ 'c', 'm', 'e', 'q', '.', '1', '6', 'b', 9, 0,
  /* 1131 */ 's', 'r', 's', 'h', 'r', '.', '1', '6', 'b', 9, 0,
  /* 1142 */ 'u', 'r', 's', 'h', 'r', '.', '1', '6', 'b', 9, 0,
  /* 1153 */ 's', 's', 'h', 'r', '.', '1', '6', 'b', 9, 0,
  /* 1163 */ 'u', 's', 'h', 'r', '.', '1', '6', 'b', 9, 0,
  /* 1173 */ 'e', 'o', 'r', '.', '1', '6', 'b', 9, 0,
  /* 1182 */ 'o', 'r', 'r', '.', '1', '6', 'b', 9, 0,
  /* 1191 */ 's', 'q', 'a', 'b', 's', '.', '1', '6', 'b', 9, 0,
  /* 1202 */ 'c', 'm', 'h', 's', '.', '1', '6', 'b', 9, 0,
  /* 1212 */ 'c', 'l', 's', '.', '1', '6', 'b', 9, 0,
  /* 1221 */ 'm', 'l', 's', '.', '1', '6', 'b', 9, 0,
  /* 1230 */ 'c', 'm', 'g', 't', '.', '1', '6', 'b', 9, 0,
  /* 1240 */ 'r', 'b', 'i', 't', '.', '1', '6', 'b', 9, 0,
  /* 1250 */ 'c', 'm', 'l', 't', '.', '1', '6', 'b', 9, 0,
  /* 1260 */ 'c', 'n', 't', '.', '1', '6', 'b', 9, 0,
  /* 1269 */ 'n', 'o', 't', '.', '1', '6', 'b', 9, 0,
  /* 1278 */ 'c', 'm', 't', 's', 't', '.', '1', '6', 'b', 9, 0,
  /* 1289 */ 'e', 'x', 't', '.', '1', '6', 'b', 9, 0,
  /* 1298 */ 's', 'q', 's', 'h', 'l', 'u', '.', '1', '6', 'b', 9, 0,
  /* 1310 */ 'a', 'd', 'd', 'v', '.', '1', '6', 'b', 9, 0,
  /* 1320 */ 's', 'a', 'd', 'd', 'l', 'v', '.', '1', '6', 'b', 9, 0,
  /* 1332 */ 'u', 'a', 'd', 'd', 'l', 'v', '.', '1', '6', 'b', 9, 0,
  /* 1344 */ 's', 'm', 'i', 'n', 'v', '.', '1', '6', 'b', 9, 0,
  /* 1355 */ 'u', 'm', 'i', 'n', 'v', '.', '1', '6', 'b', 9, 0,
  /* 1366 */ 's', 'm', 'a', 'x', 'v', '.', '1', '6', 'b', 9, 0,
  /* 1377 */ 'u', 'm', 'a', 'x', 'v', '.', '1', '6', 'b', 9, 0,
  /* 1388 */ 's', 'm', 'a', 'x', '.', '1', '6', 'b', 9, 0,
  /* 1398 */ 'u', 'm', 'a', 'x', '.', '1', '6', 'b', 9, 0,
  /* 1408 */ 'c', 'l', 'z', '.', '1', '6', 'b', 9, 0,
  /* 1417 */ 't', 'r', 'n', '1', '.', '8', 'b', 9, 0,
  /* 1426 */ 'z', 'i', 'p', '1', '.', '8', 'b', 9, 0,
  /* 1435 */ 'u', 'z', 'p', '1', '.', '8', 'b', 9, 0,
  /* 1444 */ 'r', 'e', 'v', '3', '2', '.', '8', 'b', 9, 0,
  /* 1454 */ 't', 'r', 'n', '2', '.', '8', 'b', 9, 0,
  /* 1463 */ 'z', 'i', 'p', '2', '.', '8', 'b', 9, 0,
  /* 1472 */ 'u', 'z', 'p', '2', '.', '8', 'b', 9, 0,
  /* 1481 */ 'r', 'e', 'v', '6', '4', '.', '8', 'b', 9, 0,
  /* 1491 */ 'r', 'e', 'v', '1', '6', '.', '8', 'b', 9, 0,
  /* 1501 */ 's', 'a', 'b', 'a', '.', '8', 'b', 9, 0,
  /* 1510 */ 'u', 'a', 'b', 'a', '.', '8', 'b', 9, 0,
  /* 1519 */ 'm', 'l', 'a', '.', '8', 'b', 9, 0,
  /* 1527 */ 's', 'r', 's', 'r', 'a', '.', '8', 'b', 9, 0,
  /* 1537 */ 'u', 'r', 's', 'r', 'a', '.', '8', 'b', 9, 0,
  /* 1547 */ 's', 's', 'r', 'a', '.', '8', 'b', 9, 0,
  /* 1556 */ 'u', 's', 'r', 'a', '.', '8', 'b', 9, 0,
  /* 1565 */ 's', 'h', 's', 'u', 'b', '.', '8', 'b', 9, 0,
  /* 1575 */ 'u', 'h', 's', 'u', 'b', '.', '8', 'b', 9, 0,
  /* 1585 */ 's', 'q', 's', 'u', 'b', '.', '8', 'b', 9, 0,
  /* 1595 */ 'u', 'q', 's', 'u', 'b', '.', '8', 'b', 9, 0,
  /* 1605 */ 'b', 'i', 'c', '.', '8', 'b', 9, 0,
  /* 1613 */ 's', 'a', 'b', 'd', '.', '8', 'b', 9, 0,
  /* 1622 */ 'u', 'a', 'b', 'd', '.', '8', 'b', 9, 0,
  /* 1631 */ 's', 'r', 'h', 'a', 'd', 'd', '.', '8', 'b', 9, 0,
  /* 1642 */ 'u', 'r', 'h', 'a', 'd', 'd', '.', '8', 'b', 9, 0,
  /* 1653 */ 's', 'h', 'a', 'd', 'd', '.', '8', 'b', 9, 0,
  /* 1663 */ 'u', 'h', 'a', 'd', 'd', '.', '8', 'b', 9, 0,
  /* 1673 */ 'u', 's', 'q', 'a', 'd', 'd', '.', '8', 'b', 9, 0,
  /* 1684 */ 's', 'u', 'q', 'a', 'd', 'd', '.', '8', 'b', 9, 0,
  /* 1695 */ 'a', 'n', 'd', '.', '8', 'b', 9, 0,
  /* 1703 */ 'c', 'm', 'g', 'e', '.', '8', 'b', 9, 0,
  /* 1712 */ 'c', 'm', 'l', 'e', '.', '8', 'b', 9, 0,
  /* 1721 */ 'b', 'i', 'f', '.', '8', 'b', 9, 0,
  /* 1729 */ 's', 'q', 'n', 'e', 'g', '.', '8', 'b', 9, 0,
  /* 1739 */ 'c', 'm', 'h', 'i', '.', '8', 'b', 9, 0,
  /* 1748 */ 's', 'l', 'i', '.', '8', 'b', 9, 0,
  /* 1756 */ 's', 'r', 'i', '.', '8', 'b', 9, 0,
  /* 1764 */ 'm', 'o', 'v', 'i', '.', '8', 'b', 9, 0,
  /* 1773 */ 's', 'q', 's', 'h', 'l', '.', '8', 'b', 9, 0,
  /* 1783 */ 'u', 'q', 's', 'h', 'l', '.', '8', 'b', 9, 0,
  /* 1793 */ 's', 'q', 'r', 's', 'h', 'l', '.', '8', 'b', 9, 0,
  /* 1804 */ 'u', 'q', 'r', 's', 'h', 'l', '.', '8', 'b', 9, 0,
  /* 1815 */ 's', 'r', 's', 'h', 'l', '.', '8', 'b', 9, 0,
  /* 1825 */ 'u', 'r', 's', 'h', 'l', '.', '8', 'b', 9, 0,
  /* 1835 */ 's', 's', 'h', 'l', '.', '8', 'b', 9, 0,
  /* 1844 */ 'u', 's', 'h', 'l', '.', '8', 'b', 9, 0,
  /* 1853 */ 'b', 's', 'l', '.', '8', 'b', 9, 0,
  /* 1861 */ 'p', 'm', 'u', 'l', '.', '8', 'b', 9, 0,
  /* 1870 */ 'r', 's', 'u', 'b', 'h', 'n', '.', '8', 'b', 9, 0,
  /* 1881 */ 'r', 'a', 'd', 'd', 'h', 'n', '.', '8', 'b', 9, 0,
  /* 1892 */ 's', 'm', 'i', 'n', '.', '8', 'b', 9, 0,
  /* 1901 */ 'u', 'm', 'i', 'n', '.', '8', 'b', 9, 0,
  /* 1910 */ 's', 'q', 's', 'h', 'r', 'n', '.', '8', 'b', 9, 0,
  /* 1921 */ 'u', 'q', 's', 'h', 'r', 'n', '.', '8', 'b', 9, 0,
  /* 1932 */ 's', 'q', 'r', 's', 'h', 'r', 'n', '.', '8', 'b', 9, 0,
  /* 1944 */ 'u', 'q', 'r', 's', 'h', 'r', 'n', '.', '8', 'b', 9, 0,
  /* 1956 */ 'o', 'r', 'n', '.', '8', 'b', 9, 0,
  /* 1964 */ 's', 'q', 'x', 't', 'n', '.', '8', 'b', 9, 0,
  /* 1974 */ 'u', 'q', 'x', 't', 'n', '.', '8', 'b', 9, 0,
  /* 1984 */ 's', 'q', 's', 'h', 'r', 'u', 'n', '.', '8', 'b', 9, 0,
  /* 1996 */ 's', 'q', 'r', 's', 'h', 'r', 'u', 'n', '.', '8', 'b', 9, 0,
  /* 2009 */ 's', 'q', 'x', 't', 'u', 'n', '.', '8', 'b', 9, 0,
  /* 2020 */ 'a', 'd', 'd', 'p', '.', '8', 'b', 9, 0,
  /* 2029 */ 's', 'm', 'i', 'n', 'p', '.', '8', 'b', 9, 0,
  /* 2039 */ 'u', 'm', 'i', 'n', 'p', '.', '8', 'b', 9, 0,
  /* 2049 */ 'd', 'u', 'p', '.', '8', 'b', 9, 0,
  /* 2057 */ 's', 'm', 'a', 'x', 'p', '.', '8', 'b', 9, 0,
  /* 2067 */ 'u', 'm', 'a', 'x', 'p', '.', '8', 'b', 9, 0,
  /* 2077 */ 'c', 'm', 'e', 'q', '.', '8', 'b', 9, 0,
  /* 2086 */ 's', 'r', 's', 'h', 'r', '.', '8', 'b', 9, 0,
  /* 2096 */ 'u', 'r', 's', 'h', 'r', '.', '8', 'b', 9, 0,
  /* 2106 */ 's', 's', 'h', 'r', '.', '8', 'b', 9, 0,
  /* 2115 */ 'u', 's', 'h', 'r', '.', '8', 'b', 9, 0,
  /* 2124 */ 'e', 'o', 'r', '.', '8', 'b', 9, 0,
  /* 2132 */ 'o', 'r', 'r', '.', '8', 'b', 9, 0,
  /* 2140 */ 's', 'q', 'a', 'b', 's', '.', '8', 'b', 9, 0,
  /* 2150 */ 'c', 'm', 'h', 's', '.', '8', 'b', 9, 0,
  /* 2159 */ 'c', 'l', 's', '.', '8', 'b', 9, 0,
  /* 2167 */ 'm', 'l', 's', '.', '8', 'b', 9, 0,
  /* 2175 */ 'c', 'm', 'g', 't', '.', '8', 'b', 9, 0,
  /* 2184 */ 'r', 'b', 'i', 't', '.', '8', 'b', 9, 0,
  /* 2193 */ 'c', 'm', 'l', 't', '.', '8', 'b', 9, 0,
  /* 2202 */ 'c', 'n', 't', '.', '8', 'b', 9, 0,
  /* 2210 */ 'n', 'o', 't', '.', '8', 'b', 9, 0,
  /* 2218 */ 'c', 'm', 't', 's', 't', '.', '8', 'b', 9, 0,
  /* 2228 */ 'e', 'x', 't', '.', '8', 'b', 9, 0,
  /* 2236 */ 's', 'q', 's', 'h', 'l', 'u', '.', '8', 'b', 9, 0,
  /* 2247 */ 'a', 'd', 'd', 'v', '.', '8', 'b', 9, 0,
  /* 2256 */ 's', 'a', 'd', 'd', 'l', 'v', '.', '8', 'b', 9, 0,
  /* 2267 */ 'u', 'a', 'd', 'd', 'l', 'v', '.', '8', 'b', 9, 0,
  /* 2278 */ 's', 'm', 'i', 'n', 'v', '.', '8', 'b', 9, 0,
  /* 2288 */ 'u', 'm', 'i', 'n', 'v', '.', '8', 'b', 9, 0,
  /* 2298 */ 's', 'm', 'a', 'x', 'v', '.', '8', 'b', 9, 0,
  /* 2308 */ 'u', 'm', 'a', 'x', 'v', '.', '8', 'b', 9, 0,
  /* 2318 */ 's', 'm', 'a', 'x', '.', '8', 'b', 9, 0,
  /* 2327 */ 'u', 'm', 'a', 'x', '.', '8', 'b', 9, 0,
  /* 2336 */ 'c', 'l', 'z', '.', '8', 'b', 9, 0,
  /* 2344 */ 'l', 'd', 'a', 'd', 'd', 'a', 'b', 9, 0,
  /* 2353 */ 'l', 'd', 's', 'm', 'i', 'n', 'a', 'b', 9, 0,
  /* 2363 */ 'l', 'd', 'u', 'm', 'i', 'n', 'a', 'b', 9, 0,
  /* 2373 */ 's', 'w', 'p', 'a', 'b', 9, 0,
  /* 2380 */ 'b', 'r', 'a', 'b', 9, 0,
  /* 2386 */ 'l', 'd', 'r', 'a', 'b', 9, 0,
  /* 2393 */ 'b', 'l', 'r', 'a', 'b', 9, 0,
  /* 2400 */ 'l', 'd', 'c', 'l', 'r', 'a', 'b', 9, 0,
  /* 2409 */ 'l', 'd', 'e', 'o', 'r', 'a', 'b', 9, 0,
  /* 2418 */ 'c', 'a', 's', 'a', 'b', 9, 0,
  /* 2425 */ 'l', 'd', 's', 'e', 't', 'a', 'b', 9, 0,
  /* 2434 */ 'l', 'd', 's', 'm', 'a', 'x', 'a', 'b', 9, 0,
  /* 2444 */ 'l', 'd', 'u', 'm', 'a', 'x', 'a', 'b', 9, 0,
  /* 2454 */ 'c', 'r', 'c', '3', '2', 'c', 'b', 9, 0,
  /* 2463 */ 'p', 'a', 'c', 'd', 'b', 9, 0,
  /* 2470 */ 'l', 'd', 'a', 'd', 'd', 'b', 9, 0,
  /* 2478 */ 'a', 'u', 't', 'd', 'b', 9, 0,
  /* 2485 */ 'p', 'a', 'c', 'i', 'b', 9, 0,
  /* 2492 */ 'a', 'u', 't', 'i', 'b', 9, 0,
  /* 2499 */ 'l', 'd', 'a', 'd', 'd', 'a', 'l', 'b', 9, 0,
  /* 2509 */ 'l', 'd', 's', 'm', 'i', 'n', 'a', 'l', 'b', 9, 0,
  /* 2520 */ 'l', 'd', 'u', 'm', 'i', 'n', 'a', 'l', 'b', 9, 0,
  /* 2531 */ 's', 'w', 'p', 'a', 'l', 'b', 9, 0,
  /* 2539 */ 'l', 'd', 'c', 'l', 'r', 'a', 'l', 'b', 9, 0,
  /* 2549 */ 'l', 'd', 'e', 'o', 'r', 'a', 'l', 'b', 9, 0,
  /* 2559 */ 'c', 'a', 's', 'a', 'l', 'b', 9, 0,
  /* 2567 */ 'l', 'd', 's', 'e', 't', 'a', 'l', 'b', 9, 0,
  /* 2577 */ 'l', 'd', 's', 'm', 'a', 'x', 'a', 'l', 'b', 9, 0,
  /* 2588 */ 'l', 'd', 'u', 'm', 'a', 'x', 'a', 'l', 'b', 9, 0,
  /* 2599 */ 'l', 'd', 'a', 'd', 'd', 'l', 'b', 9, 0,
  /* 2608 */ 'l', 'd', 's', 'm', 'i', 'n', 'l', 'b', 9, 0,
  /* 2618 */ 'l', 'd', 'u', 'm', 'i', 'n', 'l', 'b', 9, 0,
  /* 2628 */ 's', 'w', 'p', 'l', 'b', 9, 0,
  /* 2635 */ 'l', 'd', 'c', 'l', 'r', 'l', 'b', 9, 0,
  /* 2644 */ 'l', 'd', 'e', 'o', 'r', 'l', 'b', 9, 0,
  /* 2653 */ 'c', 'a', 's', 'l', 'b', 9, 0,
  /* 2660 */ 'l', 'd', 's', 'e', 't', 'l', 'b', 9, 0,
  /* 2669 */ 'l', 'd', 's', 'm', 'a', 'x', 'l', 'b', 9, 0,
  /* 2679 */ 'l', 'd', 'u', 'm', 'a', 'x', 'l', 'b', 9, 0,
  /* 2689 */ 'd', 'm', 'b', 9, 0,
  /* 2694 */ 'l', 'd', 's', 'm', 'i', 'n', 'b', 9, 0,
  /* 2703 */ 'l', 'd', 'u', 'm', 'i', 'n', 'b', 9, 0,
  /* 2712 */ 's', 'w', 'p', 'b', 9, 0,
  /* 2718 */ 'l', 'd', 'a', 'r', 'b', 9, 0,
  /* 2725 */ 'l', 'd', 'l', 'a', 'r', 'b', 9, 0,
  /* 2733 */ 'l', 'd', 'r', 'b', 9, 0,
  /* 2739 */ 'l', 'd', 'c', 'l', 'r', 'b', 9, 0,
  /* 2747 */ 's', 't', 'l', 'l', 'r', 'b', 9, 0,
  /* 2755 */ 's', 't', 'l', 'r', 'b', 9, 0,
  /* 2762 */ 'l', 'd', 'e', 'o', 'r', 'b', 9, 0,
  /* 2770 */ 'l', 'd', 'a', 'p', 'r', 'b', 9, 0,
  /* 2778 */ 'l', 'd', 't', 'r', 'b', 9, 0,
  /* 2785 */ 's', 't', 'r', 'b', 9, 0,
  /* 2791 */ 's', 't', 't', 'r', 'b', 9, 0,
  /* 2798 */ 'l', 'd', 'u', 'r', 'b', 9, 0,
  /* 2805 */ 's', 't', 'u', 'r', 'b', 9, 0,
  /* 2812 */ 'l', 'd', 'a', 'x', 'r', 'b', 9, 0,
  /* 2820 */ 'l', 'd', 'x', 'r', 'b', 9, 0,
  /* 2827 */ 's', 't', 'l', 'x', 'r', 'b', 9, 0,
  /* 2835 */ 's', 't', 'x', 'r', 'b', 9, 0,
  /* 2842 */ 'c', 'a', 's', 'b', 9, 0,
  /* 2848 */ 'd', 's', 'b', 9, 0,
  /* 2853 */ 'i', 's', 'b', 9, 0,
  /* 2858 */ 'l', 'd', 'r', 's', 'b', 9, 0,
  /* 2865 */ 'l', 'd', 't', 'r', 's', 'b', 9, 0,
  /* 2873 */ 'l', 'd', 'u', 'r', 's', 'b', 9, 0,
  /* 2881 */ 'l', 'd', 's', 'e', 't', 'b', 9, 0,
  /* 2889 */ 'f', 's', 'u', 'b', 9, 0,
  /* 2895 */ 'f', 'm', 's', 'u', 'b', 9, 0,
  /* 2902 */ 'f', 'n', 'm', 's', 'u', 'b', 9, 0,
  /* 2910 */ 's', 'q', 's', 'u', 'b', 9, 0,
  /* 2917 */ 'u', 'q', 's', 'u', 'b', 9, 0,
  /* 2924 */ 'l', 'd', 's', 'm', 'a', 'x', 'b', 9, 0,
  /* 2933 */ 'l', 'd', 'u', 'm', 'a', 'x', 'b', 9, 0,
  /* 2942 */ 'p', 'a', 'c', 'd', 'z', 'b', 9, 0,
  /* 2950 */ 'a', 'u', 't', 'd', 'z', 'b', 9, 0,
  /* 2958 */ 'p', 'a', 'c', 'i', 'z', 'b', 9, 0,
  /* 2966 */ 'a', 'u', 't', 'i', 'z', 'b', 9, 0,
  /* 2974 */ 's', 'b', 'c', 9, 0,
  /* 2979 */ 'a', 'd', 'c', 9, 0,
  /* 2984 */ 'b', 'i', 'c', 9, 0,
  /* 2989 */ 's', 'm', 'c', 9, 0,
  /* 2994 */ 'c', 's', 'i', 'n', 'c', 9, 0,
  /* 3001 */ 'h', 'v', 'c', 9, 0,
  /* 3006 */ 's', 'v', 'c', 9, 0,
  /* 3011 */ 'f', 'm', 'l', 'a', '.', 'd', 9, 0,
  /* 3019 */ 'f', 'm', 'u', 'l', '.', 'd', 9, 0,
  /* 3027 */ 'f', 'm', 'l', 's', '.', 'd', 9, 0,
  /* 3035 */ 'i', 'n', 's', '.', 'd', 9, 0,
  /* 3042 */ 'f', 'm', 'o', 'v', '.', 'd', 9, 0,
  /* 3050 */ 'u', 'm', 'o', 'v', '.', 'd', 9, 0,
  /* 3058 */ 'f', 'm', 'u', 'l', 'x', '.', 'd', 9, 0,
  /* 3067 */ 's', 'a', 'd', 'a', 'l', 'p', '.', '1', 'd', 9, 0,
  /* 3078 */ 'u', 'a', 'd', 'a', 'l', 'p', '.', '1', 'd', 9, 0,
  /* 3089 */ 's', 'a', 'd', 'd', 'l', 'p', '.', '1', 'd', 9, 0,
  /* 3100 */ 'u', 'a', 'd', 'd', 'l', 'p', '.', '1', 'd', 9, 0,
  /* 3111 */ 't', 'r', 'n', '1', '.', '2', 'd', 9, 0,
  /* 3120 */ 'z', 'i', 'p', '1', '.', '2', 'd', 9, 0,
  /* 3129 */ 'u', 'z', 'p', '1', '.', '2', 'd', 9, 0,
  /* 3138 */ 's', 'a', 'b', 'a', 'l', '2', '.', '2', 'd', 9, 0,
  /* 3149 */ 'u', 'a', 'b', 'a', 'l', '2', '.', '2', 'd', 9, 0,
  /* 3160 */ 's', 'q', 'd', 'm', 'l', 'a', 'l', '2', '.', '2', 'd', 9, 0,
  /* 3173 */ 's', 'm', 'l', 'a', 'l', '2', '.', '2', 'd', 9, 0,
  /* 3184 */ 'u', 'm', 'l', 'a', 'l', '2', '.', '2', 'd', 9, 0,
  /* 3195 */ 's', 's', 'u', 'b', 'l', '2', '.', '2', 'd', 9, 0,
  /* 3206 */ 'u', 's', 'u', 'b', 'l', '2', '.', '2', 'd', 9, 0,
  /* 3217 */ 's', 'a', 'b', 'd', 'l', '2', '.', '2', 'd', 9, 0,
  /* 3228 */ 'u', 'a', 'b', 'd', 'l', '2', '.', '2', 'd', 9, 0,
  /* 3239 */ 's', 'a', 'd', 'd', 'l', '2', '.', '2', 'd', 9, 0,
  /* 3250 */ 'u', 'a', 'd', 'd', 'l', '2', '.', '2', 'd', 9, 0,
  /* 3261 */ 's', 's', 'h', 'l', 'l', '2', '.', '2', 'd', 9, 0,
  /* 3272 */ 'u', 's', 'h', 'l', 'l', '2', '.', '2', 'd', 9, 0,
  /* 3283 */ 's', 'q', 'd', 'm', 'u', 'l', 'l', '2', '.', '2', 'd', 9, 0,
  /* 3296 */ 's', 'm', 'u', 'l', 'l', '2', '.', '2', 'd', 9, 0,
  /* 3307 */ 'u', 'm', 'u', 'l', 'l', '2', '.', '2', 'd', 9, 0,
  /* 3318 */ 's', 'q', 'd', 'm', 'l', 's', 'l', '2', '.', '2', 'd', 9, 0,
  /* 3331 */ 's', 'm', 'l', 's', 'l', '2', '.', '2', 'd', 9, 0,
  /* 3342 */ 'u', 'm', 'l', 's', 'l', '2', '.', '2', 'd', 9, 0,
  /* 3353 */ 't', 'r', 'n', '2', '.', '2', 'd', 9, 0,
  /* 3362 */ 'z', 'i', 'p', '2', '.', '2', 'd', 9, 0,
  /* 3371 */ 'u', 'z', 'p', '2', '.', '2', 'd', 9, 0,
  /* 3380 */ 's', 's', 'u', 'b', 'w', '2', '.', '2', 'd', 9, 0,
  /* 3391 */ 'u', 's', 'u', 'b', 'w', '2', '.', '2', 'd', 9, 0,
  /* 3402 */ 's', 'a', 'd', 'd', 'w', '2', '.', '2', 'd', 9, 0,
  /* 3413 */ 'u', 'a', 'd', 'd', 'w', '2', '.', '2', 'd', 9, 0,
  /* 3424 */ 'f', 'm', 'l', 'a', '.', '2', 'd', 9, 0,
  /* 3433 */ 's', 'r', 's', 'r', 'a', '.', '2', 'd', 9, 0,
  /* 3443 */ 'u', 'r', 's', 'r', 'a', '.', '2', 'd', 9, 0,
  /* 3453 */ 's', 's', 'r', 'a', '.', '2', 'd', 9, 0,
  /* 3462 */ 'u', 's', 'r', 'a', '.', '2', 'd', 9, 0,
  /* 3471 */ 'f', 'r', 'i', 'n', 't', 'a', '.', '2', 'd', 9, 0,
  /* 3482 */ 'f', 's', 'u', 'b', '.', '2', 'd', 9, 0,
  /* 3491 */ 's', 'q', 's', 'u', 'b', '.', '2', 'd', 9, 0,
  /* 3501 */ 'u', 'q', 's', 'u', 'b', '.', '2', 'd', 9, 0,
  /* 3511 */ 'f', 'a', 'b', 'd', '.', '2', 'd', 9, 0,
  /* 3520 */ 'f', 'a', 'd', 'd', '.', '2', 'd', 9, 0,
  /* 3529 */ 'u', 's', 'q', 'a', 'd', 'd', '.', '2', 'd', 9, 0,
  /* 3540 */ 's', 'u', 'q', 'a', 'd', 'd', '.', '2', 'd', 9, 0,
  /* 3551 */ 'f', 'a', 'c', 'g', 'e', '.', '2', 'd', 9, 0,
  /* 3561 */ 'f', 'c', 'm', 'g', 'e', '.', '2', 'd', 9, 0,
  /* 3571 */ 'f', 'c', 'm', 'l', 'e', '.', '2', 'd', 9, 0,
  /* 3581 */ 'f', 'r', 'e', 'c', 'p', 'e', '.', '2', 'd', 9, 0,
  /* 3592 */ 'f', 'r', 's', 'q', 'r', 't', 'e', '.', '2', 'd', 9, 0,
  /* 3604 */ 's', 'c', 'v', 't', 'f', '.', '2', 'd', 9, 0,
  /* 3614 */ 'u', 'c', 'v', 't', 'f', '.', '2', 'd', 9, 0,
  /* 3624 */ 'f', 'n', 'e', 'g', '.', '2', 'd', 9, 0,
  /* 3633 */ 's', 'q', 'n', 'e', 'g', '.', '2', 'd', 9, 0,
  /* 3643 */ 'c', 'm', 'h', 'i', '.', '2', 'd', 9, 0,
  /* 3652 */ 's', 'l', 'i', '.', '2', 'd', 9, 0,
  /* 3660 */ 's', 'r', 'i', '.', '2', 'd', 9, 0,
  /* 3668 */ 'f', 'r', 'i', 'n', 't', 'i', '.', '2', 'd', 9, 0,
  /* 3679 */ 'm', 'o', 'v', 'i', '.', '2', 'd', 9, 0,
  /* 3688 */ 's', 'a', 'b', 'a', 'l', '.', '2', 'd', 9, 0,
  /* 3698 */ 'u', 'a', 'b', 'a', 'l', '.', '2', 'd', 9, 0,
  /* 3708 */ 's', 'q', 'd', 'm', 'l', 'a', 'l', '.', '2', 'd', 9, 0,
  /* 3720 */ 's', 'm', 'l', 'a', 'l', '.', '2', 'd', 9, 0,
  /* 3730 */ 'u', 'm', 'l', 'a', 'l', '.', '2', 'd', 9, 0,
  /* 3740 */ 's', 's', 'u', 'b', 'l', '.', '2', 'd', 9, 0,
  /* 3750 */ 'u', 's', 'u', 'b', 'l', '.', '2', 'd', 9, 0,
  /* 3760 */ 's', 'a', 'b', 'd', 'l', '.', '2', 'd', 9, 0,
  /* 3770 */ 'u', 'a', 'b', 'd', 'l', '.', '2', 'd', 9, 0,
  /* 3780 */ 's', 'a', 'd', 'd', 'l', '.', '2', 'd', 9, 0,
  /* 3790 */ 'u', 'a', 'd', 'd', 'l', '.', '2', 'd', 9, 0,
  /* 3800 */ 's', 'q', 's', 'h', 'l', '.', '2', 'd', 9, 0,
  /* 3810 */ 'u', 'q', 's', 'h', 'l', '.', '2', 'd', 9, 0,
  /* 3820 */ 's', 'q', 'r', 's', 'h', 'l', '.', '2', 'd', 9, 0,
  /* 3831 */ 'u', 'q', 'r', 's', 'h', 'l', '.', '2', 'd', 9, 0,
  /* 3842 */ 's', 'r', 's', 'h', 'l', '.', '2', 'd', 9, 0,
  /* 3852 */ 'u', 'r', 's', 'h', 'l', '.', '2', 'd', 9, 0,
  /* 3862 */ 's', 's', 'h', 'l', '.', '2', 'd', 9, 0,
  /* 3871 */ 'u', 's', 'h', 'l', '.', '2', 'd', 9, 0,
  /* 3880 */ 's', 's', 'h', 'l', 'l', '.', '2', 'd', 9, 0,
  /* 3890 */ 'u', 's', 'h', 'l', 'l', '.', '2', 'd', 9, 0,
  /* 3900 */ 's', 'q', 'd', 'm', 'u', 'l', 'l', '.', '2', 'd', 9, 0,
  /* 3912 */ 's', 'm', 'u', 'l', 'l', '.', '2', 'd', 9, 0,
  /* 3922 */ 'u', 'm', 'u', 'l', 'l', '.', '2', 'd', 9, 0,
  /* 3932 */ 's', 'q', 'd', 'm', 'l', 's', 'l', '.', '2', 'd', 9, 0,
  /* 3944 */ 's', 'm', 'l', 's', 'l', '.', '2', 'd', 9, 0,
  /* 3954 */ 'u', 'm', 'l', 's', 'l', '.', '2', 'd', 9, 0,
  /* 3964 */ 'f', 'm', 'u', 'l', '.', '2', 'd', 9, 0,
  /* 3973 */ 'f', 'm', 'i', 'n', 'n', 'm', '.', '2', 'd', 9, 0,
  /* 3984 */ 'f', 'm', 'a', 'x', 'n', 'm', '.', '2', 'd', 9, 0,
  /* 3995 */ 'f', 'r', 'i', 'n', 't', 'm', '.', '2', 'd', 9, 0,
  /* 4006 */ 'f', 'm', 'i', 'n', '.', '2', 'd', 9, 0,
  /* 4015 */ 'f', 'r', 'i', 'n', 't', 'n', '.', '2', 'd', 9, 0,
  /* 4026 */ 'f', 'a', 'd', 'd', 'p', '.', '2', 'd', 9, 0,
  /* 4036 */ 's', 'a', 'd', 'a', 'l', 'p', '.', '2', 'd', 9, 0,
  /* 4047 */ 'u', 'a', 'd', 'a', 'l', 'p', '.', '2', 'd', 9, 0,
  /* 4058 */ 's', 'a', 'd', 'd', 'l', 'p', '.', '2', 'd', 9, 0,
  /* 4069 */ 'u', 'a', 'd', 'd', 'l', 'p', '.', '2', 'd', 9, 0,
  /* 4080 */ 'f', 'm', 'i', 'n', 'n', 'm', 'p', '.', '2', 'd', 9, 0,
  /* 4092 */ 'f', 'm', 'a', 'x', 'n', 'm', 'p', '.', '2', 'd', 9, 0,
  /* 4104 */ 'f', 'm', 'i', 'n', 'p', '.', '2', 'd', 9, 0,
  /* 4114 */ 'f', 'r', 'i', 'n', 't', 'p', '.', '2', 'd', 9, 0,
  /* 4125 */ 'd', 'u', 'p', '.', '2', 'd', 9, 0,
  /* 4133 */ 'f', 'm', 'a', 'x', 'p', '.', '2', 'd', 9, 0,
  /* 4143 */ 'f', 'c', 'm', 'e', 'q', '.', '2', 'd', 9, 0,
  /* 4153 */ 's', 'r', 's', 'h', 'r', '.', '2', 'd', 9, 0,
  /* 4163 */ 'u', 'r', 's', 'h', 'r', '.', '2', 'd', 9, 0,
  /* 4173 */ 's', 's', 'h', 'r', '.', '2', 'd', 9, 0,
  /* 4182 */ 'u', 's', 'h', 'r', '.', '2', 'd', 9, 0,
  /* 4191 */ 'f', 'c', 'v', 't', 'a', 's', '.', '2', 'd', 9, 0,
  /* 4202 */ 'f', 'a', 'b', 's', '.', '2', 'd', 9, 0,
  /* 4211 */ 's', 'q', 'a', 'b', 's', '.', '2', 'd', 9, 0,
  /* 4221 */ 'c', 'm', 'h', 's', '.', '2', 'd', 9, 0,
  /* 4230 */ 'f', 'm', 'l', 's', '.', '2', 'd', 9, 0,
  /* 4239 */ 'f', 'c', 'v', 't', 'm', 's', '.', '2', 'd', 9, 0,
  /* 4250 */ 'f', 'c', 'v', 't', 'n', 's', '.', '2', 'd', 9, 0,
  /* 4261 */ 'f', 'r', 'e', 'c', 'p', 's', '.', '2', 'd', 9, 0,
  /* 4272 */ 'f', 'c', 'v', 't', 'p', 's', '.', '2', 'd', 9, 0,
  /* 4283 */ 'f', 'r', 's', 'q', 'r', 't', 's', '.', '2', 'd', 9, 0,
  /* 4295 */ 'f', 'c', 'v', 't', 'z', 's', '.', '2', 'd', 9, 0,
  /* 4306 */ 'f', 'a', 'c', 'g', 't', '.', '2', 'd', 9, 0,
  /* 4316 */ 'f', 'c', 'm', 'g', 't', '.', '2', 'd', 9, 0,
  /* 4326 */ 'f', 'c', 'm', 'l', 't', '.', '2', 'd', 9, 0,
  /* 4336 */ 'f', 's', 'q', 'r', 't', '.', '2', 'd', 9, 0,
  /* 4346 */ 'c', 'm', 't', 's', 't', '.', '2', 'd', 9, 0,
  /* 4356 */ 'f', 'c', 'v', 't', 'a', 'u', '.', '2', 'd', 9, 0,
  /* 4367 */ 's', 'q', 's', 'h', 'l', 'u', '.', '2', 'd', 9, 0,
  /* 4378 */ 'f', 'c', 'v', 't', 'm', 'u', '.', '2', 'd', 9, 0,
  /* 4389 */ 'f', 'c', 'v', 't', 'n', 'u', '.', '2', 'd', 9, 0,
  /* 4400 */ 'f', 'c', 'v', 't', 'p', 'u', '.', '2', 'd', 9, 0,
  /* 4411 */ 'f', 'c', 'v', 't', 'z', 'u', '.', '2', 'd', 9, 0,
  /* 4422 */ 'f', 'd', 'i', 'v', '.', '2', 'd', 9, 0,
  /* 4431 */ 'f', 'm', 'o', 'v', '.', '2', 'd', 9, 0,
  /* 4440 */ 's', 's', 'u', 'b', 'w', '.', '2', 'd', 9, 0,
  /* 4450 */ 'u', 's', 'u', 'b', 'w', '.', '2', 'd', 9, 0,
  /* 4460 */ 's', 'a', 'd', 'd', 'w', '.', '2', 'd', 9, 0,
  /* 4470 */ 'u', 'a', 'd', 'd', 'w', '.', '2', 'd', 9, 0,
  /* 4480 */ 'f', 'm', 'a', 'x', '.', '2', 'd', 9, 0,
  /* 4489 */ 'f', 'm', 'u', 'l', 'x', '.', '2', 'd', 9, 0,
  /* 4499 */ 'f', 'r', 'i', 'n', 't', 'x', '.', '2', 'd', 9, 0,
  /* 4510 */ 'f', 'r', 'i', 'n', 't', 'z', '.', '2', 'd', 9, 0,
  /* 4521 */ 'f', 'a', 'b', 'd', 9, 0,
  /* 4527 */ 'x', 'p', 'a', 'c', 'd', 9, 0,
  /* 4534 */ 'l', 'd', 'a', 'd', 'd', 9, 0,
  /* 4541 */ 'f', 'a', 'd', 'd', 9, 0,
  /* 4547 */ 'f', 'm', 'a', 'd', 'd', 9, 0,
  /* 4554 */ 'f', 'n', 'm', 'a', 'd', 'd', 9, 0,
  /* 4562 */ 'u', 's', 'q', 'a', 'd', 'd', 9, 0,
  /* 4570 */ 's', 'u', 'q', 'a', 'd', 'd', 9, 0,
  /* 4578 */ 'a', 'n', 'd', 9, 0,
  /* 4583 */ 'f', 'a', 'c', 'g', 'e', 9, 0,
  /* 4590 */ 'f', 'c', 'm', 'g', 'e', 9, 0,
  /* 4597 */ 'f', 'c', 'm', 'l', 'e', 9, 0,
  /* 4604 */ 'f', 'r', 'e', 'c', 'p', 'e', 9, 0,
  /* 4612 */ 'f', 'c', 'c', 'm', 'p', 'e', 9, 0,
  /* 4620 */ 'f', 'c', 'm', 'p', 'e', 9, 0,
  /* 4627 */ 'f', 'r', 's', 'q', 'r', 't', 'e', 9, 0,
  /* 4636 */ 's', 'c', 'v', 't', 'f', 9, 0,
  /* 4643 */ 'u', 'c', 'v', 't', 'f', 9, 0,
  /* 4650 */ 'f', 'n', 'e', 'g', 9, 0,
  /* 4656 */ 's', 'q', 'n', 'e', 'g', 9, 0,
  /* 4663 */ 'c', 's', 'n', 'e', 'g', 9, 0,
  /* 4670 */ 'f', 'm', 'l', 'a', '.', 'h', 9, 0,
  /* 4678 */ 's', 'q', 'r', 'd', 'm', 'l', 'a', 'h', '.', 'h', 9, 0,
  /* 4690 */ 's', 'q', 'd', 'm', 'u', 'l', 'h', '.', 'h', 9, 0,
  /* 4701 */ 's', 'q', 'r', 'd', 'm', 'u', 'l', 'h', '.', 'h', 9, 0,
  /* 4713 */ 's', 'q', 'r', 'd', 'm', 'l', 's', 'h', '.', 'h', 9, 0,
  /* 4725 */ 's', 'q', 'd', 'm', 'l', 'a', 'l', '.', 'h', 9, 0,
  /* 4736 */ 's', 'q', 'd', 'm', 'u', 'l', 'l', '.', 'h', 9, 0,
  /* 4747 */ 's', 'q', 'd', 'm', 'l', 's', 'l', '.', 'h', 9, 0,
  /* 4758 */ 'f', 'm', 'u', 'l', '.', 'h', 9, 0,
  /* 4766 */ 'f', 'm', 'l', 's', '.', 'h', 9, 0,
  /* 4774 */ 'i', 'n', 's', '.', 'h', 9, 0,
  /* 4781 */ 's', 'm', 'o', 'v', '.', 'h', 9, 0,
  /* 4789 */ 'u', 'm', 'o', 'v', '.', 'h', 9, 0,
  /* 4797 */ 'f', 'm', 'u', 'l', 'x', '.', 'h', 9, 0,
  /* 4806 */ 's', 'h', 'a', '1', 'h', 9, 0,
  /* 4813 */ 'f', 'a', 'd', 'd', 'p', '.', '2', 'h', 9, 0,
  /* 4823 */ 'f', 'm', 'i', 'n', 'n', 'm', 'p', '.', '2', 'h', 9, 0,
  /* 4835 */ 'f', 'm', 'a', 'x', 'n', 'm', 'p', '.', '2', 'h', 9, 0,
  /* 4847 */ 'f', 'm', 'i', 'n', 'p', '.', '2', 'h', 9, 0,
  /* 4857 */ 'f', 'm', 'a', 'x', 'p', '.', '2', 'h', 9, 0,
  /* 4867 */ 'c', 'r', 'c', '3', '2', 'h', 9, 0,
  /* 4875 */ 't', 'r', 'n', '1', '.', '4', 'h', 9, 0,
  /* 4884 */ 'z', 'i', 'p', '1', '.', '4', 'h', 9, 0,
  /* 4893 */ 'u', 'z', 'p', '1', '.', '4', 'h', 9, 0,
  /* 4902 */ 'r', 'e', 'v', '3', '2', '.', '4', 'h', 9, 0,
  /* 4912 */ 't', 'r', 'n', '2', '.', '4', 'h', 9, 0,
  /* 4921 */ 'z', 'i', 'p', '2', '.', '4', 'h', 9, 0,
  /* 4930 */ 'u', 'z', 'p', '2', '.', '4', 'h', 9, 0,
  /* 4939 */ 'r', 'e', 'v', '6', '4', '.', '4', 'h', 9, 0,
  /* 4949 */ 's', 'a', 'b', 'a', '.', '4', 'h', 9, 0,
  /* 4958 */ 'u', 'a', 'b', 'a', '.', '4', 'h', 9, 0,
  /* 4967 */ 'f', 'm', 'l', 'a', '.', '4', 'h', 9, 0,
  /* 4976 */ 's', 'r', 's', 'r', 'a', '.', '4', 'h', 9, 0,
  /* 4986 */ 'u', 'r', 's', 'r', 'a', '.', '4', 'h', 9, 0,
  /* 4996 */ 's', 's', 'r', 'a', '.', '4', 'h', 9, 0,
  /* 5005 */ 'u', 's', 'r', 'a', '.', '4', 'h', 9, 0,
  /* 5014 */ 'f', 'r', 'i', 'n', 't', 'a', '.', '4', 'h', 9, 0,
  /* 5025 */ 'f', 's', 'u', 'b', '.', '4', 'h', 9, 0,
  /* 5034 */ 's', 'h', 's', 'u', 'b', '.', '4', 'h', 9, 0,
  /* 5044 */ 'u', 'h', 's', 'u', 'b', '.', '4', 'h', 9, 0,
  /* 5054 */ 's', 'q', 's', 'u', 'b', '.', '4', 'h', 9, 0,
  /* 5064 */ 'u', 'q', 's', 'u', 'b', '.', '4', 'h', 9, 0,
  /* 5074 */ 'b', 'i', 'c', '.', '4', 'h', 9, 0,
  /* 5082 */ 'f', 'a', 'b', 'd', '.', '4', 'h', 9, 0,
  /* 5091 */ 's', 'a', 'b', 'd', '.', '4', 'h', 9, 0,
  /* 5100 */ 'u', 'a', 'b', 'd', '.', '4', 'h', 9, 0,
  /* 5109 */ 'f', 'a', 'd', 'd', '.', '4', 'h', 9, 0,
  /* 5118 */ 's', 'r', 'h', 'a', 'd', 'd', '.', '4', 'h', 9, 0,
  /* 5129 */ 'u', 'r', 'h', 'a', 'd', 'd', '.', '4', 'h', 9, 0,
  /* 5140 */ 's', 'h', 'a', 'd', 'd', '.', '4', 'h', 9, 0,
  /* 5150 */ 'u', 'h', 'a', 'd', 'd', '.', '4', 'h', 9, 0,
  /* 5160 */ 'u', 's', 'q', 'a', 'd', 'd', '.', '4', 'h', 9, 0,
  /* 5171 */ 's', 'u', 'q', 'a', 'd', 'd', '.', '4', 'h', 9, 0,
  /* 5182 */ 'f', 'a', 'c', 'g', 'e', '.', '4', 'h', 9, 0,
  /* 5192 */ 'f', 'c', 'm', 'g', 'e', '.', '4', 'h', 9, 0,
  /* 5202 */ 'f', 'c', 'm', 'l', 'e', '.', '4', 'h', 9, 0,
  /* 5212 */ 'f', 'r', 'e', 'c', 'p', 'e', '.', '4', 'h', 9, 0,
  /* 5223 */ 'f', 'r', 's', 'q', 'r', 't', 'e', '.', '4', 'h', 9, 0,
  /* 5235 */ 's', 'c', 'v', 't', 'f', '.', '4', 'h', 9, 0,
  /* 5245 */ 'u', 'c', 'v', 't', 'f', '.', '4', 'h', 9, 0,
  /* 5255 */ 'f', 'n', 'e', 'g', '.', '4', 'h', 9, 0,
  /* 5264 */ 's', 'q', 'n', 'e', 'g', '.', '4', 'h', 9, 0,
  /* 5274 */ 's', 'q', 'r', 'd', 'm', 'l', 'a', 'h', '.', '4', 'h', 9, 0,
  /* 5287 */ 's', 'q', 'd', 'm', 'u', 'l', 'h', '.', '4', 'h', 9, 0,
  /* 5299 */ 's', 'q', 'r', 'd', 'm', 'u', 'l', 'h', '.', '4', 'h', 9, 0,
  /* 5312 */ 's', 'q', 'r', 'd', 'm', 'l', 's', 'h', '.', '4', 'h', 9, 0,
  /* 5325 */ 'c', 'm', 'h', 'i', '.', '4', 'h', 9, 0,
  /* 5334 */ 's', 'l', 'i', '.', '4', 'h', 9, 0,
  /* 5342 */ 'm', 'v', 'n', 'i', '.', '4', 'h', 9, 0,
  /* 5351 */ 's', 'r', 'i', '.', '4', 'h', 9, 0,
  /* 5359 */ 'f', 'r', 'i', 'n', 't', 'i', '.', '4', 'h', 9, 0,
  /* 5370 */ 'm', 'o', 'v', 'i', '.', '4', 'h', 9, 0,
  /* 5379 */ 's', 'q', 's', 'h', 'l', '.', '4', 'h', 9, 0,
  /* 5389 */ 'u', 'q', 's', 'h', 'l', '.', '4', 'h', 9, 0,
  /* 5399 */ 's', 'q', 'r', 's', 'h', 'l', '.', '4', 'h', 9, 0,
  /* 5410 */ 'u', 'q', 'r', 's', 'h', 'l', '.', '4', 'h', 9, 0,
  /* 5421 */ 's', 'r', 's', 'h', 'l', '.', '4', 'h', 9, 0,
  /* 5431 */ 'u', 'r', 's', 'h', 'l', '.', '4', 'h', 9, 0,
  /* 5441 */ 's', 's', 'h', 'l', '.', '4', 'h', 9, 0,
  /* 5450 */ 'u', 's', 'h', 'l', '.', '4', 'h', 9, 0,
  /* 5459 */ 'f', 'm', 'u', 'l', '.', '4', 'h', 9, 0,
  /* 5468 */ 'f', 'm', 'i', 'n', 'n', 'm', '.', '4', 'h', 9, 0,
  /* 5479 */ 'f', 'm', 'a', 'x', 'n', 'm', '.', '4', 'h', 9, 0,
  /* 5490 */ 'f', 'r', 'i', 'n', 't', 'm', '.', '4', 'h', 9, 0,
  /* 5501 */ 'r', 's', 'u', 'b', 'h', 'n', '.', '4', 'h', 9, 0,
  /* 5512 */ 'r', 'a', 'd', 'd', 'h', 'n', '.', '4', 'h', 9, 0,
  /* 5523 */ 'f', 'm', 'i', 'n', '.', '4', 'h', 9, 0,
  /* 5532 */ 's', 'm', 'i', 'n', '.', '4', 'h', 9, 0,
  /* 5541 */ 'u', 'm', 'i', 'n', '.', '4', 'h', 9, 0,
  /* 5550 */ 's', 'q', 's', 'h', 'r', 'n', '.', '4', 'h', 9, 0,
  /* 5561 */ 'u', 'q', 's', 'h', 'r', 'n', '.', '4', 'h', 9, 0,
  /* 5572 */ 's', 'q', 'r', 's', 'h', 'r', 'n', '.', '4', 'h', 9, 0,
  /* 5584 */ 'u', 'q', 'r', 's', 'h', 'r', 'n', '.', '4', 'h', 9, 0,
  /* 5596 */ 'f', 'r', 'i', 'n', 't', 'n', '.', '4', 'h', 9, 0,
  /* 5607 */ 's', 'q', 'x', 't', 'n', '.', '4', 'h', 9, 0,
  /* 5617 */ 'u', 'q', 'x', 't', 'n', '.', '4', 'h', 9, 0,
  /* 5627 */ 's', 'q', 's', 'h', 'r', 'u', 'n', '.', '4', 'h', 9, 0,
  /* 5639 */ 's', 'q', 'r', 's', 'h', 'r', 'u', 'n', '.', '4', 'h', 9, 0,
  /* 5652 */ 's', 'q', 'x', 't', 'u', 'n', '.', '4', 'h', 9, 0,
  /* 5663 */ 'f', 'a', 'd', 'd', 'p', '.', '4', 'h', 9, 0,
  /* 5673 */ 's', 'a', 'd', 'a', 'l', 'p', '.', '4', 'h', 9, 0,
  /* 5684 */ 'u', 'a', 'd', 'a', 'l', 'p', '.', '4', 'h', 9, 0,
  /* 5695 */ 's', 'a', 'd', 'd', 'l', 'p', '.', '4', 'h', 9, 0,
  /* 5706 */ 'u', 'a', 'd', 'd', 'l', 'p', '.', '4', 'h', 9, 0,
  /* 5717 */ 'f', 'm', 'i', 'n', 'n', 'm', 'p', '.', '4', 'h', 9, 0,
  /* 5729 */ 'f', 'm', 'a', 'x', 'n', 'm', 'p', '.', '4', 'h', 9, 0,
  /* 5741 */ 'f', 'm', 'i', 'n', 'p', '.', '4', 'h', 9, 0,
  /* 5751 */ 's', 'm', 'i', 'n', 'p', '.', '4', 'h', 9, 0,
  /* 5761 */ 'u', 'm', 'i', 'n', 'p', '.', '4', 'h', 9, 0,
  /* 5771 */ 'f', 'r', 'i', 'n', 't', 'p', '.', '4', 'h', 9, 0,
  /* 5782 */ 'd', 'u', 'p', '.', '4', 'h', 9, 0,
  /* 5790 */ 'f', 'm', 'a', 'x', 'p', '.', '4', 'h', 9, 0,
  /* 5800 */ 's', 'm', 'a', 'x', 'p', '.', '4', 'h', 9, 0,
  /* 5810 */ 'u', 'm', 'a', 'x', 'p', '.', '4', 'h', 9, 0,
  /* 5820 */ 'f', 'c', 'm', 'e', 'q', '.', '4', 'h', 9, 0,
  /* 5830 */ 's', 'r', 's', 'h', 'r', '.', '4', 'h', 9, 0,
  /* 5840 */ 'u', 'r', 's', 'h', 'r', '.', '4', 'h', 9, 0,
  /* 5850 */ 's', 's', 'h', 'r', '.', '4', 'h', 9, 0,
  /* 5859 */ 'u', 's', 'h', 'r', '.', '4', 'h', 9, 0,
  /* 5868 */ 'o', 'r', 'r', '.', '4', 'h', 9, 0,
  /* 5876 */ 'f', 'c', 'v', 't', 'a', 's', '.', '4', 'h', 9, 0,
  /* 5887 */ 'f', 'a', 'b', 's', '.', '4', 'h', 9, 0,
  /* 5896 */ 's', 'q', 'a', 'b', 's', '.', '4', 'h', 9, 0,
  /* 5906 */ 'c', 'm', 'h', 's', '.', '4', 'h', 9, 0,
  /* 5915 */ 'c', 'l', 's', '.', '4', 'h', 9, 0,
  /* 5923 */ 'f', 'm', 'l', 's', '.', '4', 'h', 9, 0,
  /* 5932 */ 'f', 'c', 'v', 't', 'm', 's', '.', '4', 'h', 9, 0,
  /* 5943 */ 'f', 'c', 'v', 't', 'n', 's', '.', '4', 'h', 9, 0,
  /* 5954 */ 'f', 'r', 'e', 'c', 'p', 's', '.', '4', 'h', 9, 0,
  /* 5965 */ 'f', 'c', 'v', 't', 'p', 's', '.', '4', 'h', 9, 0,
  /* 5976 */ 'f', 'r', 's', 'q', 'r', 't', 's', '.', '4', 'h', 9, 0,
  /* 5988 */ 'f', 'c', 'v', 't', 'z', 's', '.', '4', 'h', 9, 0,
  /* 5999 */ 'f', 'a', 'c', 'g', 't', '.', '4', 'h', 9, 0,
  /* 6009 */ 'f', 'c', 'm', 'g', 't', '.', '4', 'h', 9, 0,
  /* 6019 */ 'f', 'c', 'm', 'l', 't', '.', '4', 'h', 9, 0,
  /* 6029 */ 'f', 's', 'q', 'r', 't', '.', '4', 'h', 9, 0,
  /* 6039 */ 'c', 'm', 't', 's', 't', '.', '4', 'h', 9, 0,
  /* 6049 */ 'f', 'c', 'v', 't', 'a', 'u', '.', '4', 'h', 9, 0,
  /* 6060 */ 's', 'q', 's', 'h', 'l', 'u', '.', '4', 'h', 9, 0,
  /* 6071 */ 'f', 'c', 'v', 't', 'm', 'u', '.', '4', 'h', 9, 0,
  /* 6082 */ 'f', 'c', 'v', 't', 'n', 'u', '.', '4', 'h', 9, 0,
  /* 6093 */ 'f', 'c', 'v', 't', 'p', 'u', '.', '4', 'h', 9, 0,
  /* 6104 */ 'f', 'c', 'v', 't', 'z', 'u', '.', '4', 'h', 9, 0,
  /* 6115 */ 'a', 'd', 'd', 'v', '.', '4', 'h', 9, 0,
  /* 6124 */ 'f', 'd', 'i', 'v', '.', '4', 'h', 9, 0,
  /* 6133 */ 's', 'a', 'd', 'd', 'l', 'v', '.', '4', 'h', 9, 0,
  /* 6144 */ 'u', 'a', 'd', 'd', 'l', 'v', '.', '4', 'h', 9, 0,
  /* 6155 */ 'f', 'm', 'i', 'n', 'n', 'm', 'v', '.', '4', 'h', 9, 0,
  /* 6167 */ 'f', 'm', 'a', 'x', 'n', 'm', 'v', '.', '4', 'h', 9, 0,
  /* 6179 */ 'f', 'm', 'i', 'n', 'v', '.', '4', 'h', 9, 0,
  /* 6189 */ 's', 'm', 'i', 'n', 'v', '.', '4', 'h', 9, 0,
  /* 6199 */ 'u', 'm', 'i', 'n', 'v', '.', '4', 'h', 9, 0,
  /* 6209 */ 'f', 'm', 'o', 'v', '.', '4', 'h', 9, 0,
  /* 6218 */ 'f', 'm', 'a', 'x', 'v', '.', '4', 'h', 9, 0,
  /* 6228 */ 's', 'm', 'a', 'x', 'v', '.', '4', 'h', 9, 0,
  /* 6238 */ 'u', 'm', 'a', 'x', 'v', '.', '4', 'h', 9, 0,
  /* 6248 */ 'f', 'm', 'a', 'x', '.', '4', 'h', 9, 0,
  /* 6257 */ 's', 'm', 'a', 'x', '.', '4', 'h', 9, 0,
  /* 6266 */ 'u', 'm', 'a', 'x', '.', '4', 'h', 9, 0,
  /* 6275 */ 'f', 'm', 'u', 'l', 'x', '.', '4', 'h', 9, 0,
  /* 6285 */ 'f', 'r', 'i', 'n', 't', 'x', '.', '4', 'h', 9, 0,
  /* 6296 */ 'c', 'l', 'z', '.', '4', 'h', 9, 0,
  /* 6304 */ 'f', 'r', 'i', 'n', 't', 'z', '.', '4', 'h', 9, 0,
  /* 6315 */ 't', 'r', 'n', '1', '.', '8', 'h', 9, 0,
  /* 6324 */ 'z', 'i', 'p', '1', '.', '8', 'h', 9, 0,
  /* 6333 */ 'u', 'z', 'p', '1', '.', '8', 'h', 9, 0,
  /* 6342 */ 'r', 'e', 'v', '3', '2', '.', '8', 'h', 9, 0,
  /* 6352 */ 's', 'a', 'b', 'a', 'l', '2', '.', '8', 'h', 9, 0,
  /* 6363 */ 'u', 'a', 'b', 'a', 'l', '2', '.', '8', 'h', 9, 0,
  /* 6374 */ 's', 'm', 'l', 'a', 'l', '2', '.', '8', 'h', 9, 0,
  /* 6385 */ 'u', 'm', 'l', 'a', 'l', '2', '.', '8', 'h', 9, 0,
  /* 6396 */ 's', 's', 'u', 'b', 'l', '2', '.', '8', 'h', 9, 0,
  /* 6407 */ 'u', 's', 'u', 'b', 'l', '2', '.', '8', 'h', 9, 0,
  /* 6418 */ 's', 'a', 'b', 'd', 'l', '2', '.', '8', 'h', 9, 0,
  /* 6429 */ 'u', 'a', 'b', 'd', 'l', '2', '.', '8', 'h', 9, 0,
  /* 6440 */ 's', 'a', 'd', 'd', 'l', '2', '.', '8', 'h', 9, 0,
  /* 6451 */ 'u', 'a', 'd', 'd', 'l', '2', '.', '8', 'h', 9, 0,
  /* 6462 */ 's', 's', 'h', 'l', 'l', '2', '.', '8', 'h', 9, 0,
  /* 6473 */ 'u', 's', 'h', 'l', 'l', '2', '.', '8', 'h', 9, 0,
  /* 6484 */ 'p', 'm', 'u', 'l', 'l', '2', '.', '8', 'h', 9, 0,
  /* 6495 */ 's', 'm', 'u', 'l', 'l', '2', '.', '8', 'h', 9, 0,
  /* 6506 */ 'u', 'm', 'u', 'l', 'l', '2', '.', '8', 'h', 9, 0,
  /* 6517 */ 's', 'm', 'l', 's', 'l', '2', '.', '8', 'h', 9, 0,
  /* 6528 */ 'u', 'm', 'l', 's', 'l', '2', '.', '8', 'h', 9, 0,
  /* 6539 */ 'r', 's', 'u', 'b', 'h', 'n', '2', '.', '8', 'h', 9, 0,
  /* 6551 */ 'r', 'a', 'd', 'd', 'h', 'n', '2', '.', '8', 'h', 9, 0,
  /* 6563 */ 's', 'q', 's', 'h', 'r', 'n', '2', '.', '8', 'h', 9, 0,
  /* 6575 */ 'u', 'q', 's', 'h', 'r', 'n', '2', '.', '8', 'h', 9, 0,
  /* 6587 */ 's', 'q', 'r', 's', 'h', 'r', 'n', '2', '.', '8', 'h', 9, 0,
  /* 6600 */ 'u', 'q', 'r', 's', 'h', 'r', 'n', '2', '.', '8', 'h', 9, 0,
  /* 6613 */ 't', 'r', 'n', '2', '.', '8', 'h', 9, 0,
  /* 6622 */ 's', 'q', 'x', 't', 'n', '2', '.', '8', 'h', 9, 0,
  /* 6633 */ 'u', 'q', 'x', 't', 'n', '2', '.', '8', 'h', 9, 0,
  /* 6644 */ 's', 'q', 's', 'h', 'r', 'u', 'n', '2', '.', '8', 'h', 9, 0,
  /* 6657 */ 's', 'q', 'r', 's', 'h', 'r', 'u', 'n', '2', '.', '8', 'h', 9, 0,
  /* 6671 */ 's', 'q', 'x', 't', 'u', 'n', '2', '.', '8', 'h', 9, 0,
  /* 6683 */ 'z', 'i', 'p', '2', '.', '8', 'h', 9, 0,
  /* 6692 */ 'u', 'z', 'p', '2', '.', '8', 'h', 9, 0,
  /* 6701 */ 's', 's', 'u', 'b', 'w', '2', '.', '8', 'h', 9, 0,
  /* 6712 */ 'u', 's', 'u', 'b', 'w', '2', '.', '8', 'h', 9, 0,
  /* 6723 */ 's', 'a', 'd', 'd', 'w', '2', '.', '8', 'h', 9, 0,
  /* 6734 */ 'u', 'a', 'd', 'd', 'w', '2', '.', '8', 'h', 9, 0,
  /* 6745 */ 'r', 'e', 'v', '6', '4', '.', '8', 'h', 9, 0,
  /* 6755 */ 's', 'a', 'b', 'a', '.', '8', 'h', 9, 0,
  /* 6764 */ 'u', 'a', 'b', 'a', '.', '8', 'h', 9, 0,
  /* 6773 */ 'f', 'm', 'l', 'a', '.', '8', 'h', 9, 0,
  /* 6782 */ 's', 'r', 's', 'r', 'a', '.', '8', 'h', 9, 0,
  /* 6792 */ 'u', 'r', 's', 'r', 'a', '.', '8', 'h', 9, 0,
  /* 6802 */ 's', 's', 'r', 'a', '.', '8', 'h', 9, 0,
  /* 6811 */ 'u', 's', 'r', 'a', '.', '8', 'h', 9, 0,
  /* 6820 */ 'f', 'r', 'i', 'n', 't', 'a', '.', '8', 'h', 9, 0,
  /* 6831 */ 'f', 's', 'u', 'b', '.', '8', 'h', 9, 0,
  /* 6840 */ 's', 'h', 's', 'u', 'b', '.', '8', 'h', 9, 0,
  /* 6850 */ 'u', 'h', 's', 'u', 'b', '.', '8', 'h', 9, 0,
  /* 6860 */ 's', 'q', 's', 'u', 'b', '.', '8', 'h', 9, 0,
  /* 6870 */ 'u', 'q', 's', 'u', 'b', '.', '8', 'h', 9, 0,
  /* 6880 */ 'b', 'i', 'c', '.', '8', 'h', 9, 0,
  /* 6888 */ 'f', 'a', 'b', 'd', '.', '8', 'h', 9, 0,
  /* 6897 */ 's', 'a', 'b', 'd', '.', '8', 'h', 9, 0,
  /* 6906 */ 'u', 'a', 'b', 'd', '.', '8', 'h', 9, 0,
  /* 6915 */ 'f', 'a', 'd', 'd', '.', '8', 'h', 9, 0,
  /* 6924 */ 's', 'r', 'h', 'a', 'd', 'd', '.', '8', 'h', 9, 0,
  /* 6935 */ 'u', 'r', 'h', 'a', 'd', 'd', '.', '8', 'h', 9, 0,
  /* 6946 */ 's', 'h', 'a', 'd', 'd', '.', '8', 'h', 9, 0,
  /* 6956 */ 'u', 'h', 'a', 'd', 'd', '.', '8', 'h', 9, 0,
  /* 6966 */ 'u', 's', 'q', 'a', 'd', 'd', '.', '8', 'h', 9, 0,
  /* 6977 */ 's', 'u', 'q', 'a', 'd', 'd', '.', '8', 'h', 9, 0,
  /* 6988 */ 'f', 'a', 'c', 'g', 'e', '.', '8', 'h', 9, 0,
  /* 6998 */ 'f', 'c', 'm', 'g', 'e', '.', '8', 'h', 9, 0,
  /* 7008 */ 'f', 'c', 'm', 'l', 'e', '.', '8', 'h', 9, 0,
  /* 7018 */ 'f', 'r', 'e', 'c', 'p', 'e', '.', '8', 'h', 9, 0,
  /* 7029 */ 'f', 'r', 's', 'q', 'r', 't', 'e', '.', '8', 'h', 9, 0,
  /* 7041 */ 's', 'c', 'v', 't', 'f', '.', '8', 'h', 9, 0,
  /* 7051 */ 'u', 'c', 'v', 't', 'f', '.', '8', 'h', 9, 0,
  /* 7061 */ 'f', 'n', 'e', 'g', '.', '8', 'h', 9, 0,
  /* 7070 */ 's', 'q', 'n', 'e', 'g', '.', '8', 'h', 9, 0,
  /* 7080 */ 's', 'q', 'r', 'd', 'm', 'l', 'a', 'h', '.', '8', 'h', 9, 0,
  /* 7093 */ 's', 'q', 'd', 'm', 'u', 'l', 'h', '.', '8', 'h', 9, 0,
  /* 7105 */ 's', 'q', 'r', 'd', 'm', 'u', 'l', 'h', '.', '8', 'h', 9, 0,
  /* 7118 */ 's', 'q', 'r', 'd', 'm', 'l', 's', 'h', '.', '8', 'h', 9, 0,
  /* 7131 */ 'c', 'm', 'h', 'i', '.', '8', 'h', 9, 0,
  /* 7140 */ 's', 'l', 'i', '.', '8', 'h', 9, 0,
  /* 7148 */ 'm', 'v', 'n', 'i', '.', '8', 'h', 9, 0,
  /* 7157 */ 's', 'r', 'i', '.', '8', 'h', 9, 0,
  /* 7165 */ 'f', 'r', 'i', 'n', 't', 'i', '.', '8', 'h', 9, 0,
  /* 7176 */ 'm', 'o', 'v', 'i', '.', '8', 'h', 9, 0,
  /* 7185 */ 's', 'a', 'b', 'a', 'l', '.', '8', 'h', 9, 0,
  /* 7195 */ 'u', 'a', 'b', 'a', 'l', '.', '8', 'h', 9, 0,
  /* 7205 */ 's', 'm', 'l', 'a', 'l', '.', '8', 'h', 9, 0,
  /* 7215 */ 'u', 'm', 'l', 'a', 'l', '.', '8', 'h', 9, 0,
  /* 7225 */ 's', 's', 'u', 'b', 'l', '.', '8', 'h', 9, 0,
  /* 7235 */ 'u', 's', 'u', 'b', 'l', '.', '8', 'h', 9, 0,
  /* 7245 */ 's', 'a', 'b', 'd', 'l', '.', '8', 'h', 9, 0,
  /* 7255 */ 'u', 'a', 'b', 'd', 'l', '.', '8', 'h', 9, 0,
  /* 7265 */ 's', 'a', 'd', 'd', 'l', '.', '8', 'h', 9, 0,
  /* 7275 */ 'u', 'a', 'd', 'd', 'l', '.', '8', 'h', 9, 0,
  /* 7285 */ 's', 'q', 's', 'h', 'l', '.', '8', 'h', 9, 0,
  /* 7295 */ 'u', 'q', 's', 'h', 'l', '.', '8', 'h', 9, 0,
  /* 7305 */ 's', 'q', 'r', 's', 'h', 'l', '.', '8', 'h', 9, 0,
  /* 7316 */ 'u', 'q', 'r', 's', 'h', 'l', '.', '8', 'h', 9, 0,
  /* 7327 */ 's', 'r', 's', 'h', 'l', '.', '8', 'h', 9, 0,
  /* 7337 */ 'u', 'r', 's', 'h', 'l', '.', '8', 'h', 9, 0,
  /* 7347 */ 's', 's', 'h', 'l', '.', '8', 'h', 9, 0,
  /* 7356 */ 'u', 's', 'h', 'l', '.', '8', 'h', 9, 0,
  /* 7365 */ 's', 's', 'h', 'l', 'l', '.', '8', 'h', 9, 0,
  /* 7375 */ 'u', 's', 'h', 'l', 'l', '.', '8', 'h', 9, 0,
  /* 7385 */ 'p', 'm', 'u', 'l', 'l', '.', '8', 'h', 9, 0,
  /* 7395 */ 's', 'm', 'u', 'l', 'l', '.', '8', 'h', 9, 0,
  /* 7405 */ 'u', 'm', 'u', 'l', 'l', '.', '8', 'h', 9, 0,
  /* 7415 */ 's', 'm', 'l', 's', 'l', '.', '8', 'h', 9, 0,
  /* 7425 */ 'u', 'm', 'l', 's', 'l', '.', '8', 'h', 9, 0,
  /* 7435 */ 'f', 'm', 'u', 'l', '.', '8', 'h', 9, 0,
  /* 7444 */ 'f', 'm', 'i', 'n', 'n', 'm', '.', '8', 'h', 9, 0,
  /* 7455 */ 'f', 'm', 'a', 'x', 'n', 'm', '.', '8', 'h', 9, 0,
  /* 7466 */ 'f', 'r', 'i', 'n', 't', 'm', '.', '8', 'h', 9, 0,
  /* 7477 */ 'f', 'm', 'i', 'n', '.', '8', 'h', 9, 0,
  /* 7486 */ 's', 'm', 'i', 'n', '.', '8', 'h', 9, 0,
  /* 7495 */ 'u', 'm', 'i', 'n', '.', '8', 'h', 9, 0,
  /* 7504 */ 'f', 'r', 'i', 'n', 't', 'n', '.', '8', 'h', 9, 0,
  /* 7515 */ 'f', 'a', 'd', 'd', 'p', '.', '8', 'h', 9, 0,
  /* 7525 */ 's', 'a', 'd', 'a', 'l', 'p', '.', '8', 'h', 9, 0,
  /* 7536 */ 'u', 'a', 'd', 'a', 'l', 'p', '.', '8', 'h', 9, 0,
  /* 7547 */ 's', 'a', 'd', 'd', 'l', 'p', '.', '8', 'h', 9, 0,
  /* 7558 */ 'u', 'a', 'd', 'd', 'l', 'p', '.', '8', 'h', 9, 0,
  /* 7569 */ 'f', 'm', 'i', 'n', 'n', 'm', 'p', '.', '8', 'h', 9, 0,
  /* 7581 */ 'f', 'm', 'a', 'x', 'n', 'm', 'p', '.', '8', 'h', 9, 0,
  /* 7593 */ 'f', 'm', 'i', 'n', 'p', '.', '8', 'h', 9, 0,
  /* 7603 */ 's', 'm', 'i', 'n', 'p', '.', '8', 'h', 9, 0,
  /* 7613 */ 'u', 'm', 'i', 'n', 'p', '.', '8', 'h', 9, 0,
  /* 7623 */ 'f', 'r', 'i', 'n', 't', 'p', '.', '8', 'h', 9, 0,
  /* 7634 */ 'd', 'u', 'p', '.', '8', 'h', 9, 0,
  /* 7642 */ 'f', 'm', 'a', 'x', 'p', '.', '8', 'h', 9, 0,
  /* 7652 */ 's', 'm', 'a', 'x', 'p', '.', '8', 'h', 9, 0,
  /* 7662 */ 'u', 'm', 'a', 'x', 'p', '.', '8', 'h', 9, 0,
  /* 7672 */ 'f', 'c', 'm', 'e', 'q', '.', '8', 'h', 9, 0,
  /* 7682 */ 's', 'r', 's', 'h', 'r', '.', '8', 'h', 9, 0,
  /* 7692 */ 'u', 'r', 's', 'h', 'r', '.', '8', 'h', 9, 0,
  /* 7702 */ 's', 's', 'h', 'r', '.', '8', 'h', 9, 0,
  /* 7711 */ 'u', 's', 'h', 'r', '.', '8', 'h', 9, 0,
  /* 7720 */ 'o', 'r', 'r', '.', '8', 'h', 9, 0,
  /* 7728 */ 'f', 'c', 'v', 't', 'a', 's', '.', '8', 'h', 9, 0,
  /* 7739 */ 'f', 'a', 'b', 's', '.', '8', 'h', 9, 0,
  /* 7748 */ 's', 'q', 'a', 'b', 's', '.', '8', 'h', 9, 0,
  /* 7758 */ 'c', 'm', 'h', 's', '.', '8', 'h', 9, 0,
  /* 7767 */ 'c', 'l', 's', '.', '8', 'h', 9, 0,
  /* 7775 */ 'f', 'm', 'l', 's', '.', '8', 'h', 9, 0,
  /* 7784 */ 'f', 'c', 'v', 't', 'm', 's', '.', '8', 'h', 9, 0,
  /* 7795 */ 'f', 'c', 'v', 't', 'n', 's', '.', '8', 'h', 9, 0,
  /* 7806 */ 'f', 'r', 'e', 'c', 'p', 's', '.', '8', 'h', 9, 0,
  /* 7817 */ 'f', 'c', 'v', 't', 'p', 's', '.', '8', 'h', 9, 0,
  /* 7828 */ 'f', 'r', 's', 'q', 'r', 't', 's', '.', '8', 'h', 9, 0,
  /* 7840 */ 'f', 'c', 'v', 't', 'z', 's', '.', '8', 'h', 9, 0,
  /* 7851 */ 'f', 'a', 'c', 'g', 't', '.', '8', 'h', 9, 0,
  /* 7861 */ 'f', 'c', 'm', 'g', 't', '.', '8', 'h', 9, 0,
  /* 7871 */ 'f', 'c', 'm', 'l', 't', '.', '8', 'h', 9, 0,
  /* 7881 */ 'f', 's', 'q', 'r', 't', '.', '8', 'h', 9, 0,
  /* 7891 */ 'c', 'm', 't', 's', 't', '.', '8', 'h', 9, 0,
  /* 7901 */ 'f', 'c', 'v', 't', 'a', 'u', '.', '8', 'h', 9, 0,
  /* 7912 */ 's', 'q', 's', 'h', 'l', 'u', '.', '8', 'h', 9, 0,
  /* 7923 */ 'f', 'c', 'v', 't', 'm', 'u', '.', '8', 'h', 9, 0,
  /* 7934 */ 'f', 'c', 'v', 't', 'n', 'u', '.', '8', 'h', 9, 0,
  /* 7945 */ 'f', 'c', 'v', 't', 'p', 'u', '.', '8', 'h', 9, 0,
  /* 7956 */ 'f', 'c', 'v', 't', 'z', 'u', '.', '8', 'h', 9, 0,
  /* 7967 */ 'a', 'd', 'd', 'v', '.', '8', 'h', 9, 0,
  /* 7976 */ 'f', 'd', 'i', 'v', '.', '8', 'h', 9, 0,
  /* 7985 */ 's', 'a', 'd', 'd', 'l', 'v', '.', '8', 'h', 9, 0,
  /* 7996 */ 'u', 'a', 'd', 'd', 'l', 'v', '.', '8', 'h', 9, 0,
  /* 8007 */ 'f', 'm', 'i', 'n', 'n', 'm', 'v', '.', '8', 'h', 9, 0,
  /* 8019 */ 'f', 'm', 'a', 'x', 'n', 'm', 'v', '.', '8', 'h', 9, 0,
  /* 8031 */ 'f', 'm', 'i', 'n', 'v', '.', '8', 'h', 9, 0,
  /* 8041 */ 's', 'm', 'i', 'n', 'v', '.', '8', 'h', 9, 0,
  /* 8051 */ 'u', 'm', 'i', 'n', 'v', '.', '8', 'h', 9, 0,
  /* 8061 */ 'f', 'm', 'o', 'v', '.', '8', 'h', 9, 0,
  /* 8070 */ 'f', 'm', 'a', 'x', 'v', '.', '8', 'h', 9, 0,
  /* 8080 */ 's', 'm', 'a', 'x', 'v', '.', '8', 'h', 9, 0,
  /* 8090 */ 'u', 'm', 'a', 'x', 'v', '.', '8', 'h', 9, 0,
  /* 8100 */ 's', 's', 'u', 'b', 'w', '.', '8', 'h', 9, 0,
  /* 8110 */ 'u', 's', 'u', 'b', 'w', '.', '8', 'h', 9, 0,
  /* 8120 */ 's', 'a', 'd', 'd', 'w', '.', '8', 'h', 9, 0,
  /* 8130 */ 'u', 'a', 'd', 'd', 'w', '.', '8', 'h', 9, 0,
  /* 8140 */ 'f', 'm', 'a', 'x', '.', '8', 'h', 9, 0,
  /* 8149 */ 's', 'm', 'a', 'x', '.', '8', 'h', 9, 0,
  /* 8158 */ 'u', 'm', 'a', 'x', '.', '8', 'h', 9, 0,
  /* 8167 */ 'f', 'm', 'u', 'l', 'x', '.', '8', 'h', 9, 0,
  /* 8177 */ 'f', 'r', 'i', 'n', 't', 'x', '.', '8', 'h', 9, 0,
  /* 8188 */ 'c', 'l', 'z', '.', '8', 'h', 9, 0,
  /* 8196 */ 'f', 'r', 'i', 'n', 't', 'z', '.', '8', 'h', 9, 0,
  /* 8207 */ 'l', 'd', 'a', 'd', 'd', 'a', 'h', 9, 0,
  /* 8216 */ 's', 'q', 'r', 'd', 'm', 'l', 'a', 'h', 9, 0,
  /* 8226 */ 'l', 'd', 's', 'm', 'i', 'n', 'a', 'h', 9, 0,
  /* 8236 */ 'l', 'd', 'u', 'm', 'i', 'n', 'a', 'h', 9, 0,
  /* 8246 */ 's', 'w', 'p', 'a', 'h', 9, 0,
  /* 8253 */ 'l', 'd', 'c', 'l', 'r', 'a', 'h', 9, 0,
  /* 8262 */ 'l', 'd', 'e', 'o', 'r', 'a', 'h', 9, 0,
  /* 8271 */ 'c', 'a', 's', 'a', 'h', 9, 0,
  /* 8278 */ 'l', 'd', 's', 'e', 't', 'a', 'h', 9, 0,
  /* 8287 */ 'l', 'd', 's', 'm', 'a', 'x', 'a', 'h', 9, 0,
  /* 8297 */ 'l', 'd', 'u', 'm', 'a', 'x', 'a', 'h', 9, 0,
  /* 8307 */ 'c', 'r', 'c', '3', '2', 'c', 'h', 9, 0,
  /* 8316 */ 'l', 'd', 'a', 'd', 'd', 'h', 9, 0,
  /* 8324 */ 'l', 'd', 'a', 'd', 'd', 'a', 'l', 'h', 9, 0,
  /* 8334 */ 'l', 'd', 's', 'm', 'i', 'n', 'a', 'l', 'h', 9, 0,
  /* 8345 */ 'l', 'd', 'u', 'm', 'i', 'n', 'a', 'l', 'h', 9, 0,
  /* 8356 */ 's', 'w', 'p', 'a', 'l', 'h', 9, 0,
  /* 8364 */ 'l', 'd', 'c', 'l', 'r', 'a', 'l', 'h', 9, 0,
  /* 8374 */ 'l', 'd', 'e', 'o', 'r', 'a', 'l', 'h', 9, 0,
  /* 8384 */ 'c', 'a', 's', 'a', 'l', 'h', 9, 0,
  /* 8392 */ 'l', 'd', 's', 'e', 't', 'a', 'l', 'h', 9, 0,
  /* 8402 */ 'l', 'd', 's', 'm', 'a', 'x', 'a', 'l', 'h', 9, 0,
  /* 8413 */ 'l', 'd', 'u', 'm', 'a', 'x', 'a', 'l', 'h', 9, 0,
  /* 8424 */ 'l', 'd', 'a', 'd', 'd', 'l', 'h', 9, 0,
  /* 8433 */ 'l', 'd', 's', 'm', 'i', 'n', 'l', 'h', 9, 0,
  /* 8443 */ 'l', 'd', 'u', 'm', 'i', 'n', 'l', 'h', 9, 0,
  /* 8453 */ 's', 'w', 'p', 'l', 'h', 9, 0,
  /* 8460 */ 'l', 'd', 'c', 'l', 'r', 'l', 'h', 9, 0,
  /* 8469 */ 'l', 'd', 'e', 'o', 'r', 'l', 'h', 9, 0,
  /* 8478 */ 'c', 'a', 's', 'l', 'h', 9, 0,
  /* 8485 */ 'l', 'd', 's', 'e', 't', 'l', 'h', 9, 0,
  /* 8494 */ 's', 'q', 'd', 'm', 'u', 'l', 'h', 9, 0,
  /* 8503 */ 's', 'q', 'r', 'd', 'm', 'u', 'l', 'h', 9, 0,
  /* 8513 */ 's', 'm', 'u', 'l', 'h', 9, 0,
  /* 8520 */ 'u', 'm', 'u', 'l', 'h', 9, 0,
  /* 8527 */ 'l', 'd', 's', 'm', 'a', 'x', 'l', 'h', 9, 0,
  /* 8537 */ 'l', 'd', 'u', 'm', 'a', 'x', 'l', 'h', 9, 0,
  /* 8547 */ 'l', 'd', 's', 'm', 'i', 'n', 'h', 9, 0,
  /* 8556 */ 'l', 'd', 'u', 'm', 'i', 'n', 'h', 9, 0,
  /* 8565 */ 's', 'w', 'p', 'h', 9, 0,
  /* 8571 */ 'l', 'd', 'a', 'r', 'h', 9, 0,
  /* 8578 */ 'l', 'd', 'l', 'a', 'r', 'h', 9, 0,
  /* 8586 */ 'l', 'd', 'r', 'h', 9, 0,
  /* 8592 */ 'l', 'd', 'c', 'l', 'r', 'h', 9, 0,
  /* 8600 */ 's', 't', 'l', 'l', 'r', 'h', 9, 0,
  /* 8608 */ 's', 't', 'l', 'r', 'h', 9, 0,
  /* 8615 */ 'l', 'd', 'e', 'o', 'r', 'h', 9, 0,
  /* 8623 */ 'l', 'd', 'a', 'p', 'r', 'h', 9, 0,
  /* 8631 */ 'l', 'd', 't', 'r', 'h', 9, 0,
  /* 8638 */ 's', 't', 'r', 'h', 9, 0,
  /* 8644 */ 's', 't', 't', 'r', 'h', 9, 0,
  /* 8651 */ 'l', 'd', 'u', 'r', 'h', 9, 0,
  /* 8658 */ 's', 't', 'u', 'r', 'h', 9, 0,
  /* 8665 */ 'l', 'd', 'a', 'x', 'r', 'h', 9, 0,
  /* 8673 */ 'l', 'd', 'x', 'r', 'h', 9, 0,
  /* 8680 */ 's', 't', 'l', 'x', 'r', 'h', 9, 0,
  /* 8688 */ 's', 't', 'x', 'r', 'h', 9, 0,
  /* 8695 */ 'c', 'a', 's', 'h', 9, 0,
  /* 8701 */ 's', 'q', 'r', 'd', 'm', 'l', 's', 'h', 9, 0,
  /* 8711 */ 'l', 'd', 'r', 's', 'h', 9, 0,
  /* 8718 */ 'l', 'd', 't', 'r', 's', 'h', 9, 0,
  /* 8726 */ 'l', 'd', 'u', 'r', 's', 'h', 9, 0,
  /* 8734 */ 'l', 'd', 's', 'e', 't', 'h', 9, 0,
  /* 8742 */ 'l', 'd', 's', 'm', 'a', 'x', 'h', 9, 0,
  /* 8751 */ 'l', 'd', 'u', 'm', 'a', 'x', 'h', 9, 0,
  /* 8760 */ 'x', 'p', 'a', 'c', 'i', 9, 0,
  /* 8767 */ 'c', 'm', 'h', 'i', 9, 0,
  /* 8773 */ 's', 'l', 'i', 9, 0,
  /* 8778 */ 's', 'r', 'i', 9, 0,
  /* 8783 */ 'f', 'r', 'i', 'n', 't', 'i', 9, 0,
  /* 8791 */ 'm', 'o', 'v', 'i', 9, 0,
  /* 8797 */ 'b', 'r', 'k', 9, 0,
  /* 8802 */ 'm', 'o', 'v', 'k', 9, 0,
  /* 8808 */ 'l', 'd', 'a', 'd', 'd', 'a', 'l', 9, 0,
  /* 8817 */ 's', 'q', 'd', 'm', 'l', 'a', 'l', 9, 0,
  /* 8826 */ 'l', 'd', 's', 'm', 'i', 'n', 'a', 'l', 9, 0,
  /* 8836 */ 'l', 'd', 'u', 'm', 'i', 'n', 'a', 'l', 9, 0,
  /* 8846 */ 'c', 'a', 's', 'p', 'a', 'l', 9, 0,
  /* 8854 */ 's', 'w', 'p', 'a', 'l', 9, 0,
  /* 8861 */ 'l', 'd', 'c', 'l', 'r', 'a', 'l', 9, 0,
  /* 8870 */ 'l', 'd', 'e', 'o', 'r', 'a', 'l', 9, 0,
  /* 8879 */ 'c', 'a', 's', 'a', 'l', 9, 0,
  /* 8886 */ 'l', 'd', 's', 'e', 't', 'a', 'l', 9, 0,
  /* 8895 */ 'l', 'd', 's', 'm', 'a', 'x', 'a', 'l', 9, 0,
  /* 8905 */ 'l', 'd', 'u', 'm', 'a', 'x', 'a', 'l', 9, 0,
  /* 8915 */ 't', 'b', 'l', 9, 0,
  /* 8920 */ 's', 'm', 's', 'u', 'b', 'l', 9, 0,
  /* 8928 */ 'u', 'm', 's', 'u', 'b', 'l', 9, 0,
  /* 8936 */ 'l', 'd', 'a', 'd', 'd', 'l', 9, 0,
  /* 8944 */ 's', 'm', 'a', 'd', 'd', 'l', 9, 0,
  /* 8952 */ 'u', 'm', 'a', 'd', 'd', 'l', 9, 0,
  /* 8960 */ 'f', 'c', 's', 'e', 'l', 9, 0,
  /* 8967 */ 's', 'q', 's', 'h', 'l', 9, 0,
  /* 8974 */ 'u', 'q', 's', 'h', 'l', 9, 0,
  /* 8981 */ 's', 'q', 'r', 's', 'h', 'l', 9, 0,
  /* 8989 */ 'u', 'q', 'r', 's', 'h', 'l', 9, 0,
  /* 8997 */ 's', 'r', 's', 'h', 'l', 9, 0,
  /* 9004 */ 'u', 'r', 's', 'h', 'l', 9, 0,
  /* 9011 */ 's', 's', 'h', 'l', 9, 0,
  /* 9017 */ 'u', 's', 'h', 'l', 9, 0,
  /* 9023 */ 's', 'q', 'd', 'm', 'u', 'l', 'l', 9, 0,
  /* 9032 */ 'l', 'd', 's', 'm', 'i', 'n', 'l', 9, 0,
  /* 9041 */ 'l', 'd', 'u', 'm', 'i', 'n', 'l', 9, 0,
  /* 9050 */ 'c', 'a', 's', 'p', 'l', 9, 0,
  /* 9057 */ 's', 'w', 'p', 'l', 9, 0,
  /* 9063 */ 'l', 'd', 'c', 'l', 'r', 'l', 9, 0,
  /* 9071 */ 'l', 'd', 'e', 'o', 'r', 'l', 9, 0,
  /* 9079 */ 'c', 'a', 's', 'l', 9, 0,
  /* 9085 */ 's', 'q', 'd', 'm', 'l', 's', 'l', 9, 0,
  /* 9094 */ 's', 'y', 's', 'l', 9, 0,
  /* 9100 */ 'l', 'd', 's', 'e', 't', 'l', 9, 0,
  /* 9108 */ 'f', 'c', 'v', 't', 'l', 9, 0,
  /* 9115 */ 'f', 'm', 'u', 'l', 9, 0,
  /* 9121 */ 'f', 'n', 'm', 'u', 'l', 9, 0,
  /* 9128 */ 'l', 'd', 's', 'm', 'a', 'x', 'l', 9, 0,
  /* 9137 */ 'l', 'd', 'u', 'm', 'a', 'x', 'l', 9, 0,
  /* 9146 */ 's', 'b', 'f', 'm', 9, 0,
  /* 9152 */ 'u', 'b', 'f', 'm', 9, 0,
  /* 9158 */ 'p', 'r', 'f', 'm', 9, 0,
  /* 9164 */ 'f', 'm', 'i', 'n', 'n', 'm', 9, 0,
  /* 9172 */ 'f', 'm', 'a', 'x', 'n', 'm', 9, 0,
  /* 9180 */ 'f', 'r', 'i', 'n', 't', 'm', 9, 0,
  /* 9188 */ 'p', 'r', 'f', 'u', 'm', 9, 0,
  /* 9195 */ 'f', 'm', 'i', 'n', 9, 0,
  /* 9201 */ 'l', 'd', 's', 'm', 'i', 'n', 9, 0,
  /* 9209 */ 'l', 'd', 'u', 'm', 'i', 'n', 9, 0,
  /* 9217 */ 'c', 'c', 'm', 'n', 9, 0,
  /* 9223 */ 'e', 'o', 'n', 9, 0,
  /* 9228 */ 's', 'q', 's', 'h', 'r', 'n', 9, 0,
  /* 9236 */ 'u', 'q', 's', 'h', 'r', 'n', 9, 0,
  /* 9244 */ 's', 'q', 'r', 's', 'h', 'r', 'n', 9, 0,
  /* 9253 */ 'u', 'q', 'r', 's', 'h', 'r', 'n', 9, 0,
  /* 9262 */ 'o', 'r', 'n', 9, 0,
  /* 9267 */ 'f', 'r', 'i', 'n', 't', 'n', 9, 0,
  /* 9275 */ 'f', 'c', 'v', 't', 'n', 9, 0,
  /* 9282 */ 's', 'q', 'x', 't', 'n', 9, 0,
  /* 9289 */ 'u', 'q', 'x', 't', 'n', 9, 0,
  /* 9296 */ 's', 'q', 's', 'h', 'r', 'u', 'n', 9, 0,
  /* 9305 */ 's', 'q', 'r', 's', 'h', 'r', 'u', 'n', 9, 0,
  /* 9315 */ 's', 'q', 'x', 't', 'u', 'n', 9, 0,
  /* 9323 */ 'm', 'o', 'v', 'n', 9, 0,
  /* 9329 */ 'f', 'c', 'v', 't', 'x', 'n', 9, 0,
  /* 9337 */ 'l', 'd', 'p', 9, 0,
  /* 9342 */ 'f', 'c', 'c', 'm', 'p', 9, 0,
  /* 9349 */ 'f', 'c', 'm', 'p', 9, 0,
  /* 9355 */ 'l', 'd', 'n', 'p', 9, 0,
  /* 9361 */ 's', 't', 'n', 'p', 9, 0,
  /* 9367 */ 'a', 'd', 'r', 'p', 9, 0,
  /* 9373 */ 'c', 'a', 's', 'p', 9, 0,
  /* 9379 */ 'f', 'r', 'i', 'n', 't', 'p', 9, 0,
  /* 9387 */ 's', 't', 'p', 9, 0,
  /* 9392 */ 's', 'w', 'p', 9, 0,
  /* 9397 */ 'l', 'd', 'a', 'x', 'p', 9, 0,
  /* 9404 */ 'l', 'd', 'x', 'p', 9, 0,
  /* 9410 */ 's', 't', 'l', 'x', 'p', 9, 0,
  /* 9417 */ 's', 't', 'x', 'p', 9, 0,
  /* 9423 */ 'p', 'm', 'u', 'l', 'l', '2', '.', '1', 'q', 9, 0,
  /* 9434 */ 'p', 'm', 'u', 'l', 'l', '.', '1', 'q', 9, 0,
  /* 9444 */ 'f', 'c', 'm', 'e', 'q', 9, 0,
  /* 9451 */ 'l', 'd', '1', 'r', 9, 0,
  /* 9457 */ 'l', 'd', '2', 'r', 9, 0,
  /* 9463 */ 'l', 'd', '3', 'r', 9, 0,
  /* 9469 */ 'l', 'd', '4', 'r', 9, 0,
  /* 9475 */ 'l', 'd', 'a', 'r', 9, 0,
  /* 9481 */ 'l', 'd', 'l', 'a', 'r', 9, 0,
  /* 9488 */ 'b', 'r', 9, 0,
  /* 9492 */ 'a', 'd', 'r', 9, 0,
  /* 9497 */ 'l', 'd', 'r', 9, 0,
  /* 9502 */ 's', 'r', 's', 'h', 'r', 9, 0,
  /* 9509 */ 'u', 'r', 's', 'h', 'r', 9, 0,
  /* 9516 */ 's', 's', 'h', 'r', 9, 0,
  /* 9522 */ 'u', 's', 'h', 'r', 9, 0,
  /* 9528 */ 'b', 'l', 'r', 9, 0,
  /* 9533 */ 'l', 'd', 'c', 'l', 'r', 9, 0,
  /* 9540 */ 's', 't', 'l', 'l', 'r', 9, 0,
  /* 9547 */ 's', 't', 'l', 'r', 9, 0,
  /* 9553 */ 'l', 'd', 'e', 'o', 'r', 9, 0,
  /* 9560 */ 'r', 'o', 'r', 9, 0,
  /* 9565 */ 'l', 'd', 'a', 'p', 'r', 9, 0,
  /* 9572 */ 'o', 'r', 'r', 9, 0,
  /* 9577 */ 'a', 's', 'r', 9, 0,
  /* 9582 */ 'l', 's', 'r', 9, 0,
  /* 9587 */ 'm', 's', 'r', 9, 0,
  /* 9592 */ 'l', 'd', 't', 'r', 9, 0,
  /* 9598 */ 's', 't', 'r', 9, 0,
  /* 9603 */ 's', 't', 't', 'r', 9, 0,
  /* 9609 */ 'e', 'x', 't', 'r', 9, 0,
  /* 9615 */ 'l', 'd', 'u', 'r', 9, 0,
  /* 9621 */ 's', 't', 'u', 'r', 9, 0,
  /* 9627 */ 'l', 'd', 'a', 'x', 'r', 9, 0,
  /* 9634 */ 'l', 'd', 'x', 'r', 9, 0,
  /* 9640 */ 's', 't', 'l', 'x', 'r', 9, 0,
  /* 9647 */ 's', 't', 'x', 'r', 9, 0,
  /* 9653 */ 'f', 'm', 'l', 'a', '.', 's', 9, 0,
  /* 9661 */ 's', 'q', 'r', 'd', 'm', 'l', 'a', 'h', '.', 's', 9, 0,
  /* 9673 */ 's', 'q', 'd', 'm', 'u', 'l', 'h', '.', 's', 9, 0,
  /* 9684 */ 's', 'q', 'r', 'd', 'm', 'u', 'l', 'h', '.', 's', 9, 0,
  /* 9696 */ 's', 'q', 'r', 'd', 'm', 'l', 's', 'h', '.', 's', 9, 0,
  /* 9708 */ 's', 'q', 'd', 'm', 'l', 'a', 'l', '.', 's', 9, 0,
  /* 9719 */ 's', 'q', 'd', 'm', 'u', 'l', 'l', '.', 's', 9, 0,
  /* 9730 */ 's', 'q', 'd', 'm', 'l', 's', 'l', '.', 's', 9, 0,
  /* 9741 */ 'f', 'm', 'u', 'l', '.', 's', 9, 0,
  /* 9749 */ 'f', 'm', 'l', 's', '.', 's', 9, 0,
  /* 9757 */ 'i', 'n', 's', '.', 's', 9, 0,
  /* 9764 */ 's', 'm', 'o', 'v', '.', 's', 9, 0,
  /* 9772 */ 'u', 'm', 'o', 'v', '.', 's', 9, 0,
  /* 9780 */ 'f', 'm', 'u', 'l', 'x', '.', 's', 9, 0,
  /* 9789 */ 't', 'r', 'n', '1', '.', '2', 's', 9, 0,
  /* 9798 */ 'z', 'i', 'p', '1', '.', '2', 's', 9, 0,
  /* 9807 */ 'u', 'z', 'p', '1', '.', '2', 's', 9, 0,
  /* 9816 */ 't', 'r', 'n', '2', '.', '2', 's', 9, 0,
  /* 9825 */ 'z', 'i', 'p', '2', '.', '2', 's', 9, 0,
  /* 9834 */ 'u', 'z', 'p', '2', '.', '2', 's', 9, 0,
  /* 9843 */ 'r', 'e', 'v', '6', '4', '.', '2', 's', 9, 0,
  /* 9853 */ 's', 'a', 'b', 'a', '.', '2', 's', 9, 0,
  /* 9862 */ 'u', 'a', 'b', 'a', '.', '2', 's', 9, 0,
  /* 9871 */ 'f', 'm', 'l', 'a', '.', '2', 's', 9, 0,
  /* 9880 */ 's', 'r', 's', 'r', 'a', '.', '2', 's', 9, 0,
  /* 9890 */ 'u', 'r', 's', 'r', 'a', '.', '2', 's', 9, 0,
  /* 9900 */ 's', 's', 'r', 'a', '.', '2', 's', 9, 0,
  /* 9909 */ 'u', 's', 'r', 'a', '.', '2', 's', 9, 0,
  /* 9918 */ 'f', 'r', 'i', 'n', 't', 'a', '.', '2', 's', 9, 0,
  /* 9929 */ 'f', 's', 'u', 'b', '.', '2', 's', 9, 0,
  /* 9938 */ 's', 'h', 's', 'u', 'b', '.', '2', 's', 9, 0,
  /* 9948 */ 'u', 'h', 's', 'u', 'b', '.', '2', 's', 9, 0,
  /* 9958 */ 's', 'q', 's', 'u', 'b', '.', '2', 's', 9, 0,
  /* 9968 */ 'u', 'q', 's', 'u', 'b', '.', '2', 's', 9, 0,
  /* 9978 */ 'b', 'i', 'c', '.', '2', 's', 9, 0,
  /* 9986 */ 'f', 'a', 'b', 'd', '.', '2', 's', 9, 0,
  /* 9995 */ 's', 'a', 'b', 'd', '.', '2', 's', 9, 0,
  /* 10004 */ 'u', 'a', 'b', 'd', '.', '2', 's', 9, 0,
  /* 10013 */ 'f', 'a', 'd', 'd', '.', '2', 's', 9, 0,
  /* 10022 */ 's', 'r', 'h', 'a', 'd', 'd', '.', '2', 's', 9, 0,
  /* 10033 */ 'u', 'r', 'h', 'a', 'd', 'd', '.', '2', 's', 9, 0,
  /* 10044 */ 's', 'h', 'a', 'd', 'd', '.', '2', 's', 9, 0,
  /* 10054 */ 'u', 'h', 'a', 'd', 'd', '.', '2', 's', 9, 0,
  /* 10064 */ 'u', 's', 'q', 'a', 'd', 'd', '.', '2', 's', 9, 0,
  /* 10075 */ 's', 'u', 'q', 'a', 'd', 'd', '.', '2', 's', 9, 0,
  /* 10086 */ 'f', 'a', 'c', 'g', 'e', '.', '2', 's', 9, 0,
  /* 10096 */ 'f', 'c', 'm', 'g', 'e', '.', '2', 's', 9, 0,
  /* 10106 */ 'f', 'c', 'm', 'l', 'e', '.', '2', 's', 9, 0,
  /* 10116 */ 'f', 'r', 'e', 'c', 'p', 'e', '.', '2', 's', 9, 0,
  /* 10127 */ 'u', 'r', 'e', 'c', 'p', 'e', '.', '2', 's', 9, 0,
  /* 10138 */ 'f', 'r', 's', 'q', 'r', 't', 'e', '.', '2', 's', 9, 0,
  /* 10150 */ 'u', 'r', 's', 'q', 'r', 't', 'e', '.', '2', 's', 9, 0,
  /* 10162 */ 's', 'c', 'v', 't', 'f', '.', '2', 's', 9, 0,
  /* 10172 */ 'u', 'c', 'v', 't', 'f', '.', '2', 's', 9, 0,
  /* 10182 */ 'f', 'n', 'e', 'g', '.', '2', 's', 9, 0,
  /* 10191 */ 's', 'q', 'n', 'e', 'g', '.', '2', 's', 9, 0,
  /* 10201 */ 's', 'q', 'r', 'd', 'm', 'l', 'a', 'h', '.', '2', 's', 9, 0,
  /* 10214 */ 's', 'q', 'd', 'm', 'u', 'l', 'h', '.', '2', 's', 9, 0,
  /* 10226 */ 's', 'q', 'r', 'd', 'm', 'u', 'l', 'h', '.', '2', 's', 9, 0,
  /* 10239 */ 's', 'q', 'r', 'd', 'm', 'l', 's', 'h', '.', '2', 's', 9, 0,
  /* 10252 */ 'c', 'm', 'h', 'i', '.', '2', 's', 9, 0,
  /* 10261 */ 's', 'l', 'i', '.', '2', 's', 9, 0,
  /* 10269 */ 'm', 'v', 'n', 'i', '.', '2', 's', 9, 0,
  /* 10278 */ 's', 'r', 'i', '.', '2', 's', 9, 0,
  /* 10286 */ 'f', 'r', 'i', 'n', 't', 'i', '.', '2', 's', 9, 0,
  /* 10297 */ 'm', 'o', 'v', 'i', '.', '2', 's', 9, 0,
  /* 10306 */ 's', 'q', 's', 'h', 'l', '.', '2', 's', 9, 0,
  /* 10316 */ 'u', 'q', 's', 'h', 'l', '.', '2', 's', 9, 0,
  /* 10326 */ 's', 'q', 'r', 's', 'h', 'l', '.', '2', 's', 9, 0,
  /* 10337 */ 'u', 'q', 'r', 's', 'h', 'l', '.', '2', 's', 9, 0,
  /* 10348 */ 's', 'r', 's', 'h', 'l', '.', '2', 's', 9, 0,
  /* 10358 */ 'u', 'r', 's', 'h', 'l', '.', '2', 's', 9, 0,
  /* 10368 */ 's', 's', 'h', 'l', '.', '2', 's', 9, 0,
  /* 10377 */ 'u', 's', 'h', 'l', '.', '2', 's', 9, 0,
  /* 10386 */ 'f', 'm', 'u', 'l', '.', '2', 's', 9, 0,
  /* 10395 */ 'f', 'm', 'i', 'n', 'n', 'm', '.', '2', 's', 9, 0,
  /* 10406 */ 'f', 'm', 'a', 'x', 'n', 'm', '.', '2', 's', 9, 0,
  /* 10417 */ 'f', 'r', 'i', 'n', 't', 'm', '.', '2', 's', 9, 0,
  /* 10428 */ 'r', 's', 'u', 'b', 'h', 'n', '.', '2', 's', 9, 0,
  /* 10439 */ 'r', 'a', 'd', 'd', 'h', 'n', '.', '2', 's', 9, 0,
  /* 10450 */ 'f', 'm', 'i', 'n', '.', '2', 's', 9, 0,
  /* 10459 */ 's', 'm', 'i', 'n', '.', '2', 's', 9, 0,
  /* 10468 */ 'u', 'm', 'i', 'n', '.', '2', 's', 9, 0,
  /* 10477 */ 's', 'q', 's', 'h', 'r', 'n', '.', '2', 's', 9, 0,
  /* 10488 */ 'u', 'q', 's', 'h', 'r', 'n', '.', '2', 's', 9, 0,
  /* 10499 */ 's', 'q', 'r', 's', 'h', 'r', 'n', '.', '2', 's', 9, 0,
  /* 10511 */ 'u', 'q', 'r', 's', 'h', 'r', 'n', '.', '2', 's', 9, 0,
  /* 10523 */ 'f', 'r', 'i', 'n', 't', 'n', '.', '2', 's', 9, 0,
  /* 10534 */ 's', 'q', 'x', 't', 'n', '.', '2', 's', 9, 0,
  /* 10544 */ 'u', 'q', 'x', 't', 'n', '.', '2', 's', 9, 0,
  /* 10554 */ 's', 'q', 's', 'h', 'r', 'u', 'n', '.', '2', 's', 9, 0,
  /* 10566 */ 's', 'q', 'r', 's', 'h', 'r', 'u', 'n', '.', '2', 's', 9, 0,
  /* 10579 */ 's', 'q', 'x', 't', 'u', 'n', '.', '2', 's', 9, 0,
  /* 10590 */ 'f', 'a', 'd', 'd', 'p', '.', '2', 's', 9, 0,
  /* 10600 */ 's', 'a', 'd', 'a', 'l', 'p', '.', '2', 's', 9, 0,
  /* 10611 */ 'u', 'a', 'd', 'a', 'l', 'p', '.', '2', 's', 9, 0,
  /* 10622 */ 's', 'a', 'd', 'd', 'l', 'p', '.', '2', 's', 9, 0,
  /* 10633 */ 'u', 'a', 'd', 'd', 'l', 'p', '.', '2', 's', 9, 0,
  /* 10644 */ 'f', 'm', 'i', 'n', 'n', 'm', 'p', '.', '2', 's', 9, 0,
  /* 10656 */ 'f', 'm', 'a', 'x', 'n', 'm', 'p', '.', '2', 's', 9, 0,
  /* 10668 */ 'f', 'm', 'i', 'n', 'p', '.', '2', 's', 9, 0,
  /* 10678 */ 's', 'm', 'i', 'n', 'p', '.', '2', 's', 9, 0,
  /* 10688 */ 'u', 'm', 'i', 'n', 'p', '.', '2', 's', 9, 0,
  /* 10698 */ 'f', 'r', 'i', 'n', 't', 'p', '.', '2', 's', 9, 0,
  /* 10709 */ 'd', 'u', 'p', '.', '2', 's', 9, 0,
  /* 10717 */ 'f', 'm', 'a', 'x', 'p', '.', '2', 's', 9, 0,
  /* 10727 */ 's', 'm', 'a', 'x', 'p', '.', '2', 's', 9, 0,
  /* 10737 */ 'u', 'm', 'a', 'x', 'p', '.', '2', 's', 9, 0,
  /* 10747 */ 'f', 'c', 'm', 'e', 'q', '.', '2', 's', 9, 0,
  /* 10757 */ 's', 'r', 's', 'h', 'r', '.', '2', 's', 9, 0,
  /* 10767 */ 'u', 'r', 's', 'h', 'r', '.', '2', 's', 9, 0,
  /* 10777 */ 's', 's', 'h', 'r', '.', '2', 's', 9, 0,
  /* 10786 */ 'u', 's', 'h', 'r', '.', '2', 's', 9, 0,
  /* 10795 */ 'o', 'r', 'r', '.', '2', 's', 9, 0,
  /* 10803 */ 'f', 'c', 'v', 't', 'a', 's', '.', '2', 's', 9, 0,
  /* 10814 */ 'f', 'a', 'b', 's', '.', '2', 's', 9, 0,
  /* 10823 */ 's', 'q', 'a', 'b', 's', '.', '2', 's', 9, 0,
  /* 10833 */ 'c', 'm', 'h', 's', '.', '2', 's', 9, 0,
  /* 10842 */ 'c', 'l', 's', '.', '2', 's', 9, 0,
  /* 10850 */ 'f', 'm', 'l', 's', '.', '2', 's', 9, 0,
  /* 10859 */ 'f', 'c', 'v', 't', 'm', 's', '.', '2', 's', 9, 0,
  /* 10870 */ 'f', 'c', 'v', 't', 'n', 's', '.', '2', 's', 9, 0,
  /* 10881 */ 'f', 'r', 'e', 'c', 'p', 's', '.', '2', 's', 9, 0,
  /* 10892 */ 'f', 'c', 'v', 't', 'p', 's', '.', '2', 's', 9, 0,
  /* 10903 */ 'f', 'r', 's', 'q', 'r', 't', 's', '.', '2', 's', 9, 0,
  /* 10915 */ 'f', 'c', 'v', 't', 'z', 's', '.', '2', 's', 9, 0,
  /* 10926 */ 'f', 'a', 'c', 'g', 't', '.', '2', 's', 9, 0,
  /* 10936 */ 'f', 'c', 'm', 'g', 't', '.', '2', 's', 9, 0,
  /* 10946 */ 'f', 'c', 'm', 'l', 't', '.', '2', 's', 9, 0,
  /* 10956 */ 'f', 's', 'q', 'r', 't', '.', '2', 's', 9, 0,
  /* 10966 */ 'c', 'm', 't', 's', 't', '.', '2', 's', 9, 0,
  /* 10976 */ 'f', 'c', 'v', 't', 'a', 'u', '.', '2', 's', 9, 0,
  /* 10987 */ 's', 'q', 's', 'h', 'l', 'u', '.', '2', 's', 9, 0,
  /* 10998 */ 'f', 'c', 'v', 't', 'm', 'u', '.', '2', 's', 9, 0,
  /* 11009 */ 'f', 'c', 'v', 't', 'n', 'u', '.', '2', 's', 9, 0,
  /* 11020 */ 'f', 'c', 'v', 't', 'p', 'u', '.', '2', 's', 9, 0,
  /* 11031 */ 'f', 'c', 'v', 't', 'z', 'u', '.', '2', 's', 9, 0,
  /* 11042 */ 'f', 'd', 'i', 'v', '.', '2', 's', 9, 0,
  /* 11051 */ 'f', 'm', 'o', 'v', '.', '2', 's', 9, 0,
  /* 11060 */ 'f', 'm', 'a', 'x', '.', '2', 's', 9, 0,
  /* 11069 */ 's', 'm', 'a', 'x', '.', '2', 's', 9, 0,
  /* 11078 */ 'u', 'm', 'a', 'x', '.', '2', 's', 9, 0,
  /* 11087 */ 'f', 'm', 'u', 'l', 'x', '.', '2', 's', 9, 0,
  /* 11097 */ 'f', 'r', 'i', 'n', 't', 'x', '.', '2', 's', 9, 0,
  /* 11108 */ 'c', 'l', 'z', '.', '2', 's', 9, 0,
  /* 11116 */ 'f', 'r', 'i', 'n', 't', 'z', '.', '2', 's', 9, 0,
  /* 11127 */ 's', 'h', 'a', '1', 's', 'u', '0', '.', '4', 's', 9, 0,
  /* 11139 */ 's', 'h', 'a', '2', '5', '6', 's', 'u', '0', '.', '4', 's', 9, 0,
  /* 11153 */ 't', 'r', 'n', '1', '.', '4', 's', 9, 0,
  /* 11162 */ 'z', 'i', 'p', '1', '.', '4', 's', 9, 0,
  /* 11171 */ 'u', 'z', 'p', '1', '.', '4', 's', 9, 0,
  /* 11180 */ 's', 'h', 'a', '1', 's', 'u', '1', '.', '4', 's', 9, 0,
  /* 11192 */ 's', 'h', 'a', '2', '5', '6', 's', 'u', '1', '.', '4', 's', 9, 0,
  /* 11206 */ 's', 'h', 'a', '2', '5', '6', 'h', '2', '.', '4', 's', 9, 0,
  /* 11219 */ 's', 'a', 'b', 'a', 'l', '2', '.', '4', 's', 9, 0,
  /* 11230 */ 'u', 'a', 'b', 'a', 'l', '2', '.', '4', 's', 9, 0,
  /* 11241 */ 's', 'q', 'd', 'm', 'l', 'a', 'l', '2', '.', '4', 's', 9, 0,
  /* 11254 */ 's', 'm', 'l', 'a', 'l', '2', '.', '4', 's', 9, 0,
  /* 11265 */ 'u', 'm', 'l', 'a', 'l', '2', '.', '4', 's', 9, 0,
  /* 11276 */ 's', 's', 'u', 'b', 'l', '2', '.', '4', 's', 9, 0,
  /* 11287 */ 'u', 's', 'u', 'b', 'l', '2', '.', '4', 's', 9, 0,
  /* 11298 */ 's', 'a', 'b', 'd', 'l', '2', '.', '4', 's', 9, 0,
  /* 11309 */ 'u', 'a', 'b', 'd', 'l', '2', '.', '4', 's', 9, 0,
  /* 11320 */ 's', 'a', 'd', 'd', 'l', '2', '.', '4', 's', 9, 0,
  /* 11331 */ 'u', 'a', 'd', 'd', 'l', '2', '.', '4', 's', 9, 0,
  /* 11342 */ 's', 's', 'h', 'l', 'l', '2', '.', '4', 's', 9, 0,
  /* 11353 */ 'u', 's', 'h', 'l', 'l', '2', '.', '4', 's', 9, 0,
  /* 11364 */ 's', 'q', 'd', 'm', 'u', 'l', 'l', '2', '.', '4', 's', 9, 0,
  /* 11377 */ 's', 'm', 'u', 'l', 'l', '2', '.', '4', 's', 9, 0,
  /* 11388 */ 'u', 'm', 'u', 'l', 'l', '2', '.', '4', 's', 9, 0,
  /* 11399 */ 's', 'q', 'd', 'm', 'l', 's', 'l', '2', '.', '4', 's', 9, 0,
  /* 11412 */ 's', 'm', 'l', 's', 'l', '2', '.', '4', 's', 9, 0,
  /* 11423 */ 'u', 'm', 'l', 's', 'l', '2', '.', '4', 's', 9, 0,
  /* 11434 */ 'r', 's', 'u', 'b', 'h', 'n', '2', '.', '4', 's', 9, 0,
  /* 11446 */ 'r', 'a', 'd', 'd', 'h', 'n', '2', '.', '4', 's', 9, 0,
  /* 11458 */ 's', 'q', 's', 'h', 'r', 'n', '2', '.', '4', 's', 9, 0,
  /* 11470 */ 'u', 'q', 's', 'h', 'r', 'n', '2', '.', '4', 's', 9, 0,
  /* 11482 */ 's', 'q', 'r', 's', 'h', 'r', 'n', '2', '.', '4', 's', 9, 0,
  /* 11495 */ 'u', 'q', 'r', 's', 'h', 'r', 'n', '2', '.', '4', 's', 9, 0,
  /* 11508 */ 't', 'r', 'n', '2', '.', '4', 's', 9, 0,
  /* 11517 */ 's', 'q', 'x', 't', 'n', '2', '.', '4', 's', 9, 0,
  /* 11528 */ 'u', 'q', 'x', 't', 'n', '2', '.', '4', 's', 9, 0,
  /* 11539 */ 's', 'q', 's', 'h', 'r', 'u', 'n', '2', '.', '4', 's', 9, 0,
  /* 11552 */ 's', 'q', 'r', 's', 'h', 'r', 'u', 'n', '2', '.', '4', 's', 9, 0,
  /* 11566 */ 's', 'q', 'x', 't', 'u', 'n', '2', '.', '4', 's', 9, 0,
  /* 11578 */ 'z', 'i', 'p', '2', '.', '4', 's', 9, 0,
  /* 11587 */ 'u', 'z', 'p', '2', '.', '4', 's', 9, 0,
  /* 11596 */ 's', 's', 'u', 'b', 'w', '2', '.', '4', 's', 9, 0,
  /* 11607 */ 'u', 's', 'u', 'b', 'w', '2', '.', '4', 's', 9, 0,
  /* 11618 */ 's', 'a', 'd', 'd', 'w', '2', '.', '4', 's', 9, 0,
  /* 11629 */ 'u', 'a', 'd', 'd', 'w', '2', '.', '4', 's', 9, 0,
  /* 11640 */ 'r', 'e', 'v', '6', '4', '.', '4', 's', 9, 0,
  /* 11650 */ 's', 'a', 'b', 'a', '.', '4', 's', 9, 0,
  /* 11659 */ 'u', 'a', 'b', 'a', '.', '4', 's', 9, 0,
  /* 11668 */ 'f', 'm', 'l', 'a', '.', '4', 's', 9, 0,
  /* 11677 */ 's', 'r', 's', 'r', 'a', '.', '4', 's', 9, 0,
  /* 11687 */ 'u', 'r', 's', 'r', 'a', '.', '4', 's', 9, 0,
  /* 11697 */ 's', 's', 'r', 'a', '.', '4', 's', 9, 0,
  /* 11706 */ 'u', 's', 'r', 'a', '.', '4', 's', 9, 0,
  /* 11715 */ 'f', 'r', 'i', 'n', 't', 'a', '.', '4', 's', 9, 0,
  /* 11726 */ 'f', 's', 'u', 'b', '.', '4', 's', 9, 0,
  /* 11735 */ 's', 'h', 's', 'u', 'b', '.', '4', 's', 9, 0,
  /* 11745 */ 'u', 'h', 's', 'u', 'b', '.', '4', 's', 9, 0,
  /* 11755 */ 's', 'q', 's', 'u', 'b', '.', '4', 's', 9, 0,
  /* 11765 */ 'u', 'q', 's', 'u', 'b', '.', '4', 's', 9, 0,
  /* 11775 */ 's', 'h', 'a', '1', 'c', '.', '4', 's', 9, 0,
  /* 11785 */ 'b', 'i', 'c', '.', '4', 's', 9, 0,
  /* 11793 */ 'f', 'a', 'b', 'd', '.', '4', 's', 9, 0,
  /* 11802 */ 's', 'a', 'b', 'd', '.', '4', 's', 9, 0,
  /* 11811 */ 'u', 'a', 'b', 'd', '.', '4', 's', 9, 0,
  /* 11820 */ 'f', 'a', 'd', 'd', '.', '4', 's', 9, 0,
  /* 11829 */ 's', 'r', 'h', 'a', 'd', 'd', '.', '4', 's', 9, 0,
  /* 11840 */ 'u', 'r', 'h', 'a', 'd', 'd', '.', '4', 's', 9, 0,
  /* 11851 */ 's', 'h', 'a', 'd', 'd', '.', '4', 's', 9, 0,
  /* 11861 */ 'u', 'h', 'a', 'd', 'd', '.', '4', 's', 9, 0,
  /* 11871 */ 'u', 's', 'q', 'a', 'd', 'd', '.', '4', 's', 9, 0,
  /* 11882 */ 's', 'u', 'q', 'a', 'd', 'd', '.', '4', 's', 9, 0,
  /* 11893 */ 'f', 'a', 'c', 'g', 'e', '.', '4', 's', 9, 0,
  /* 11903 */ 'f', 'c', 'm', 'g', 'e', '.', '4', 's', 9, 0,
  /* 11913 */ 'f', 'c', 'm', 'l', 'e', '.', '4', 's', 9, 0,
  /* 11923 */ 'f', 'r', 'e', 'c', 'p', 'e', '.', '4', 's', 9, 0,
  /* 11934 */ 'u', 'r', 'e', 'c', 'p', 'e', '.', '4', 's', 9, 0,
  /* 11945 */ 'f', 'r', 's', 'q', 'r', 't', 'e', '.', '4', 's', 9, 0,
  /* 11957 */ 'u', 'r', 's', 'q', 'r', 't', 'e', '.', '4', 's', 9, 0,
  /* 11969 */ 's', 'c', 'v', 't', 'f', '.', '4', 's', 9, 0,
  /* 11979 */ 'u', 'c', 'v', 't', 'f', '.', '4', 's', 9, 0,
  /* 11989 */ 'f', 'n', 'e', 'g', '.', '4', 's', 9, 0,
  /* 11998 */ 's', 'q', 'n', 'e', 'g', '.', '4', 's', 9, 0,
  /* 12008 */ 's', 'h', 'a', '2', '5', '6', 'h', '.', '4', 's', 9, 0,
  /* 12020 */ 's', 'q', 'r', 'd', 'm', 'l', 'a', 'h', '.', '4', 's', 9, 0,
  /* 12033 */ 's', 'q', 'd', 'm', 'u', 'l', 'h', '.', '4', 's', 9, 0,
  /* 12045 */ 's', 'q', 'r', 'd', 'm', 'u', 'l', 'h', '.', '4', 's', 9, 0,
  /* 12058 */ 's', 'q', 'r', 'd', 'm', 'l', 's', 'h', '.', '4', 's', 9, 0,
  /* 12071 */ 'c', 'm', 'h', 'i', '.', '4', 's', 9, 0,
  /* 12080 */ 's', 'l', 'i', '.', '4', 's', 9, 0,
  /* 12088 */ 'm', 'v', 'n', 'i', '.', '4', 's', 9, 0,
  /* 12097 */ 's', 'r', 'i', '.', '4', 's', 9, 0,
  /* 12105 */ 'f', 'r', 'i', 'n', 't', 'i', '.', '4', 's', 9, 0,
  /* 12116 */ 'm', 'o', 'v', 'i', '.', '4', 's', 9, 0,
  /* 12125 */ 's', 'a', 'b', 'a', 'l', '.', '4', 's', 9, 0,
  /* 12135 */ 'u', 'a', 'b', 'a', 'l', '.', '4', 's', 9, 0,
  /* 12145 */ 's', 'q', 'd', 'm', 'l', 'a', 'l', '.', '4', 's', 9, 0,
  /* 12157 */ 's', 'm', 'l', 'a', 'l', '.', '4', 's', 9, 0,
  /* 12167 */ 'u', 'm', 'l', 'a', 'l', '.', '4', 's', 9, 0,
  /* 12177 */ 's', 's', 'u', 'b', 'l', '.', '4', 's', 9, 0,
  /* 12187 */ 'u', 's', 'u', 'b', 'l', '.', '4', 's', 9, 0,
  /* 12197 */ 's', 'a', 'b', 'd', 'l', '.', '4', 's', 9, 0,
  /* 12207 */ 'u', 'a', 'b', 'd', 'l', '.', '4', 's', 9, 0,
  /* 12217 */ 's', 'a', 'd', 'd', 'l', '.', '4', 's', 9, 0,
  /* 12227 */ 'u', 'a', 'd', 'd', 'l', '.', '4', 's', 9, 0,
  /* 12237 */ 's', 'q', 's', 'h', 'l', '.', '4', 's', 9, 0,
  /* 12247 */ 'u', 'q', 's', 'h', 'l', '.', '4', 's', 9, 0,
  /* 12257 */ 's', 'q', 'r', 's', 'h', 'l', '.', '4', 's', 9, 0,
  /* 12268 */ 'u', 'q', 'r', 's', 'h', 'l', '.', '4', 's', 9, 0,
  /* 12279 */ 's', 'r', 's', 'h', 'l', '.', '4', 's', 9, 0,
  /* 12289 */ 'u', 'r', 's', 'h', 'l', '.', '4', 's', 9, 0,
  /* 12299 */ 's', 's', 'h', 'l', '.', '4', 's', 9, 0,
  /* 12308 */ 'u', 's', 'h', 'l', '.', '4', 's', 9, 0,
  /* 12317 */ 's', 's', 'h', 'l', 'l', '.', '4', 's', 9, 0,
  /* 12327 */ 'u', 's', 'h', 'l', 'l', '.', '4', 's', 9, 0,
  /* 12337 */ 's', 'q', 'd', 'm', 'u', 'l', 'l', '.', '4', 's', 9, 0,
  /* 12349 */ 's', 'm', 'u', 'l', 'l', '.', '4', 's', 9, 0,
  /* 12359 */ 'u', 'm', 'u', 'l', 'l', '.', '4', 's', 9, 0,
  /* 12369 */ 's', 'q', 'd', 'm', 'l', 's', 'l', '.', '4', 's', 9, 0,
  /* 12381 */ 's', 'm', 'l', 's', 'l', '.', '4', 's', 9, 0,
  /* 12391 */ 'u', 'm', 'l', 's', 'l', '.', '4', 's', 9, 0,
  /* 12401 */ 'f', 'm', 'u', 'l', '.', '4', 's', 9, 0,
  /* 12410 */ 's', 'h', 'a', '1', 'm', '.', '4', 's', 9, 0,
  /* 12420 */ 'f', 'm', 'i', 'n', 'n', 'm', '.', '4', 's', 9, 0,
  /* 12431 */ 'f', 'm', 'a', 'x', 'n', 'm', '.', '4', 's', 9, 0,
  /* 12442 */ 'f', 'r', 'i', 'n', 't', 'm', '.', '4', 's', 9, 0,
  /* 12453 */ 'f', 'm', 'i', 'n', '.', '4', 's', 9, 0,
  /* 12462 */ 's', 'm', 'i', 'n', '.', '4', 's', 9, 0,
  /* 12471 */ 'u', 'm', 'i', 'n', '.', '4', 's', 9, 0,
  /* 12480 */ 'f', 'r', 'i', 'n', 't', 'n', '.', '4', 's', 9, 0,
  /* 12491 */ 's', 'h', 'a', '1', 'p', '.', '4', 's', 9, 0,
  /* 12501 */ 'f', 'a', 'd', 'd', 'p', '.', '4', 's', 9, 0,
  /* 12511 */ 's', 'a', 'd', 'a', 'l', 'p', '.', '4', 's', 9, 0,
  /* 12522 */ 'u', 'a', 'd', 'a', 'l', 'p', '.', '4', 's', 9, 0,
  /* 12533 */ 's', 'a', 'd', 'd', 'l', 'p', '.', '4', 's', 9, 0,
  /* 12544 */ 'u', 'a', 'd', 'd', 'l', 'p', '.', '4', 's', 9, 0,
  /* 12555 */ 'f', 'm', 'i', 'n', 'n', 'm', 'p', '.', '4', 's', 9, 0,
  /* 12567 */ 'f', 'm', 'a', 'x', 'n', 'm', 'p', '.', '4', 's', 9, 0,
  /* 12579 */ 'f', 'm', 'i', 'n', 'p', '.', '4', 's', 9, 0,
  /* 12589 */ 's', 'm', 'i', 'n', 'p', '.', '4', 's', 9, 0,
  /* 12599 */ 'u', 'm', 'i', 'n', 'p', '.', '4', 's', 9, 0,
  /* 12609 */ 'f', 'r', 'i', 'n', 't', 'p', '.', '4', 's', 9, 0,
  /* 12620 */ 'd', 'u', 'p', '.', '4', 's', 9, 0,
  /* 12628 */ 'f', 'm', 'a', 'x', 'p', '.', '4', 's', 9, 0,
  /* 12638 */ 's', 'm', 'a', 'x', 'p', '.', '4', 's', 9, 0,
  /* 12648 */ 'u', 'm', 'a', 'x', 'p', '.', '4', 's', 9, 0,
  /* 12658 */ 'f', 'c', 'm', 'e', 'q', '.', '4', 's', 9, 0,
  /* 12668 */ 's', 'r', 's', 'h', 'r', '.', '4', 's', 9, 0,
  /* 12678 */ 'u', 'r', 's', 'h', 'r', '.', '4', 's', 9, 0,
  /* 12688 */ 's', 's', 'h', 'r', '.', '4', 's', 9, 0,
  /* 12697 */ 'u', 's', 'h', 'r', '.', '4', 's', 9, 0,
  /* 12706 */ 'o', 'r', 'r', '.', '4', 's', 9, 0,
  /* 12714 */ 'f', 'c', 'v', 't', 'a', 's', '.', '4', 's', 9, 0,
  /* 12725 */ 'f', 'a', 'b', 's', '.', '4', 's', 9, 0,
  /* 12734 */ 's', 'q', 'a', 'b', 's', '.', '4', 's', 9, 0,
  /* 12744 */ 'c', 'm', 'h', 's', '.', '4', 's', 9, 0,
  /* 12753 */ 'c', 'l', 's', '.', '4', 's', 9, 0,
  /* 12761 */ 'f', 'm', 'l', 's', '.', '4', 's', 9, 0,
  /* 12770 */ 'f', 'c', 'v', 't', 'm', 's', '.', '4', 's', 9, 0,
  /* 12781 */ 'f', 'c', 'v', 't', 'n', 's', '.', '4', 's', 9, 0,
  /* 12792 */ 'f', 'r', 'e', 'c', 'p', 's', '.', '4', 's', 9, 0,
  /* 12803 */ 'f', 'c', 'v', 't', 'p', 's', '.', '4', 's', 9, 0,
  /* 12814 */ 'f', 'r', 's', 'q', 'r', 't', 's', '.', '4', 's', 9, 0,
  /* 12826 */ 'f', 'c', 'v', 't', 'z', 's', '.', '4', 's', 9, 0,
  /* 12837 */ 'f', 'a', 'c', 'g', 't', '.', '4', 's', 9, 0,
  /* 12847 */ 'f', 'c', 'm', 'g', 't', '.', '4', 's', 9, 0,
  /* 12857 */ 'f', 'c', 'm', 'l', 't', '.', '4', 's', 9, 0,
  /* 12867 */ 'f', 's', 'q', 'r', 't', '.', '4', 's', 9, 0,
  /* 12877 */ 'c', 'm', 't', 's', 't', '.', '4', 's', 9, 0,
  /* 12887 */ 'f', 'c', 'v', 't', 'a', 'u', '.', '4', 's', 9, 0,
  /* 12898 */ 's', 'q', 's', 'h', 'l', 'u', '.', '4', 's', 9, 0,
  /* 12909 */ 'f', 'c', 'v', 't', 'm', 'u', '.', '4', 's', 9, 0,
  /* 12920 */ 'f', 'c', 'v', 't', 'n', 'u', '.', '4', 's', 9, 0,
  /* 12931 */ 'f', 'c', 'v', 't', 'p', 'u', '.', '4', 's', 9, 0,
  /* 12942 */ 'f', 'c', 'v', 't', 'z', 'u', '.', '4', 's', 9, 0,
  /* 12953 */ 'a', 'd', 'd', 'v', '.', '4', 's', 9, 0,
  /* 12962 */ 'f', 'd', 'i', 'v', '.', '4', 's', 9, 0,
  /* 12971 */ 's', 'a', 'd', 'd', 'l', 'v', '.', '4', 's', 9, 0,
  /* 12982 */ 'u', 'a', 'd', 'd', 'l', 'v', '.', '4', 's', 9, 0,
  /* 12993 */ 'f', 'm', 'i', 'n', 'n', 'm', 'v', '.', '4', 's', 9, 0,
  /* 13005 */ 'f', 'm', 'a', 'x', 'n', 'm', 'v', '.', '4', 's', 9, 0,
  /* 13017 */ 'f', 'm', 'i', 'n', 'v', '.', '4', 's', 9, 0,
  /* 13027 */ 's', 'm', 'i', 'n', 'v', '.', '4', 's', 9, 0,
  /* 13037 */ 'u', 'm', 'i', 'n', 'v', '.', '4', 's', 9, 0,
  /* 13047 */ 'f', 'm', 'o', 'v', '.', '4', 's', 9, 0,
  /* 13056 */ 'f', 'm', 'a', 'x', 'v', '.', '4', 's', 9, 0,
  /* 13066 */ 's', 'm', 'a', 'x', 'v', '.', '4', 's', 9, 0,
  /* 13076 */ 'u', 'm', 'a', 'x', 'v', '.', '4', 's', 9, 0,
  /* 13086 */ 's', 's', 'u', 'b', 'w', '.', '4', 's', 9, 0,
  /* 13096 */ 'u', 's', 'u', 'b', 'w', '.', '4', 's', 9, 0,
  /* 13106 */ 's', 'a', 'd', 'd', 'w', '.', '4', 's', 9, 0,
  /* 13116 */ 'u', 'a', 'd', 'd', 'w', '.', '4', 's', 9, 0,
  /* 13126 */ 'f', 'm', 'a', 'x', '.', '4', 's', 9, 0,
  /* 13135 */ 's', 'm', 'a', 'x', '.', '4', 's', 9, 0,
  /* 13144 */ 'u', 'm', 'a', 'x', '.', '4', 's', 9, 0,
  /* 13153 */ 'f', 'm', 'u', 'l', 'x', '.', '4', 's', 9, 0,
  /* 13163 */ 'f', 'r', 'i', 'n', 't', 'x', '.', '4', 's', 9, 0,
  /* 13174 */ 'c', 'l', 'z', '.', '4', 's', 9, 0,
  /* 13182 */ 'f', 'r', 'i', 'n', 't', 'z', '.', '4', 's', 9, 0,
  /* 13193 */ 'c', 'a', 's', 9, 0,
  /* 13198 */ 'f', 'c', 'v', 't', 'a', 's', 9, 0,
  /* 13206 */ 'f', 'a', 'b', 's', 9, 0,
  /* 13212 */ 's', 'q', 'a', 'b', 's', 9, 0,
  /* 13219 */ 's', 'u', 'b', 's', 9, 0,
  /* 13225 */ 's', 'b', 'c', 's', 9, 0,
  /* 13231 */ 'a', 'd', 'c', 's', 9, 0,
  /* 13237 */ 'b', 'i', 'c', 's', 9, 0,
  /* 13243 */ 'a', 'd', 'd', 's', 9, 0,
  /* 13249 */ 'a', 'n', 'd', 's', 9, 0,
  /* 13255 */ 'c', 'm', 'h', 's', 9, 0,
  /* 13261 */ 'c', 'l', 's', 9, 0,
  /* 13266 */ 'f', 'c', 'v', 't', 'm', 's', 9, 0,
  /* 13274 */ 'f', 'c', 'v', 't', 'n', 's', 9, 0,
  /* 13282 */ 'f', 'r', 'e', 'c', 'p', 's', 9, 0,
  /* 13290 */ 'f', 'c', 'v', 't', 'p', 's', 9, 0,
  /* 13298 */ 'm', 'r', 's', 9, 0,
  /* 13303 */ 'f', 'r', 's', 'q', 'r', 't', 's', 9, 0,
  /* 13312 */ 's', 'y', 's', 9, 0,
  /* 13317 */ 'f', 'c', 'v', 't', 'z', 's', 9, 0,
  /* 13325 */ 'r', 'e', 't', 9, 0,
  /* 13330 */ 'l', 'd', 's', 'e', 't', 9, 0,
  /* 13337 */ 'f', 'a', 'c', 'g', 't', 9, 0,
  /* 13344 */ 'f', 'c', 'm', 'g', 't', 9, 0,
  /* 13351 */ 'r', 'b', 'i', 't', 9, 0,
  /* 13357 */ 'h', 'l', 't', 9, 0,
  /* 13362 */ 'f', 'c', 'm', 'l', 't', 9, 0,
  /* 13369 */ 'h', 'i', 'n', 't', 9, 0,
  /* 13375 */ 's', 'd', 'o', 't', 9, 0,
  /* 13381 */ 'u', 'd', 'o', 't', 9, 0,
  /* 13387 */ 'f', 's', 'q', 'r', 't', 9, 0,
  /* 13394 */ 'c', 'm', 't', 's', 't', 9, 0,
  /* 13401 */ 'f', 'c', 'v', 't', 9, 0,
  /* 13407 */ 'f', 'c', 'v', 't', 'a', 'u', 9, 0,
  /* 13415 */ 's', 'q', 's', 'h', 'l', 'u', 9, 0,
  /* 13423 */ 'f', 'c', 'v', 't', 'm', 'u', 9, 0,
  /* 13431 */ 'f', 'c', 'v', 't', 'n', 'u', 9, 0,
  /* 13439 */ 'f', 'c', 'v', 't', 'p', 'u', 9, 0,
  /* 13447 */ 'f', 'c', 'v', 't', 'z', 'u', 9, 0,
  /* 13455 */ 'r', 'e', 'v', 9, 0,
  /* 13460 */ 'f', 'd', 'i', 'v', 9, 0,
  /* 13466 */ 's', 'd', 'i', 'v', 9, 0,
  /* 13472 */ 'u', 'd', 'i', 'v', 9, 0,
  /* 13478 */ 'c', 's', 'i', 'n', 'v', 9, 0,
  /* 13485 */ 'f', 'm', 'o', 'v', 9, 0,
  /* 13491 */ 'c', 'r', 'c', '3', '2', 'w', 9, 0,
  /* 13499 */ 'c', 'r', 'c', '3', '2', 'c', 'w', 9, 0,
  /* 13508 */ 'l', 'd', 'p', 's', 'w', 9, 0,
  /* 13515 */ 'l', 'd', 'r', 's', 'w', 9, 0,
  /* 13522 */ 'l', 'd', 't', 'r', 's', 'w', 9, 0,
  /* 13530 */ 'l', 'd', 'u', 'r', 's', 'w', 9, 0,
  /* 13538 */ 'c', 'r', 'c', '3', '2', 'x', 9, 0,
  /* 13546 */ 'f', 'm', 'a', 'x', 9, 0,
  /* 13552 */ 'l', 'd', 's', 'm', 'a', 'x', 9, 0,
  /* 13560 */ 'l', 'd', 'u', 'm', 'a', 'x', 9, 0,
  /* 13568 */ 't', 'b', 'x', 9, 0,
  /* 13573 */ 'c', 'r', 'c', '3', '2', 'c', 'x', 9, 0,
  /* 13582 */ 'c', 'l', 'r', 'e', 'x', 9, 0,
  /* 13589 */ 'f', 'm', 'u', 'l', 'x', 9, 0,
  /* 13596 */ 'f', 'r', 'e', 'c', 'p', 'x', 9, 0,
  /* 13604 */ 'f', 'r', 'i', 'n', 't', 'x', 9, 0,
  /* 13612 */ 'b', 'r', 'a', 'a', 'z', 9, 0,
  /* 13619 */ 'b', 'l', 'r', 'a', 'a', 'z', 9, 0,
  /* 13627 */ 'b', 'r', 'a', 'b', 'z', 9, 0,
  /* 13634 */ 'b', 'l', 'r', 'a', 'b', 'z', 9, 0,
  /* 13642 */ 'c', 'b', 'z', 9, 0,
  /* 13647 */ 't', 'b', 'z', 9, 0,
  /* 13652 */ 'c', 'l', 'z', 9, 0,
  /* 13657 */ 'c', 'b', 'n', 'z', 9, 0,
  /* 13663 */ 't', 'b', 'n', 'z', 9, 0,
  /* 13669 */ 'f', 'r', 'i', 'n', 't', 'z', 9, 0,
  /* 13677 */ 'm', 'o', 'v', 'z', 9, 0,
  /* 13683 */ '.', 't', 'l', 's', 'd', 'e', 's', 'c', 'c', 'a', 'l', 'l', 32, 0,
  /* 13697 */ '#', 32, 'X', 'R', 'a', 'y', 32, 'F', 'u', 'n', 'c', 't', 'i', 'o', 'n', 32, 'P', 'a', 't', 'c', 'h', 'a', 'b', 'l', 'e', 32, 'R', 'E', 'T', '.', 0,
  /* 13728 */ 'b', '.', 0,
  /* 13731 */ '#', 32, 'X', 'R', 'a', 'y', 32, 'C', 'u', 's', 't', 'o', 'm', 32, 'E', 'v', 'e', 'n', 't', 32, 'L', 'o', 'g', '.', 0,
  /* 13756 */ '#', 32, 'X', 'R', 'a', 'y', 32, 'F', 'u', 'n', 'c', 't', 'i', 'o', 'n', 32, 'E', 'n', 't', 'e', 'r', '.', 0,
  /* 13779 */ '#', 32, 'X', 'R', 'a', 'y', 32, 'T', 'a', 'i', 'l', 32, 'C', 'a', 'l', 'l', 32, 'E', 'x', 'i', 't', '.', 0,
  /* 13802 */ '#', 32, 'X', 'R', 'a', 'y', 32, 'F', 'u', 'n', 'c', 't', 'i', 'o', 'n', 32, 'E', 'x', 'i', 't', '.', 0,
  /* 13824 */ 'p', 'a', 'c', 'i', 'a', '1', '7', '1', '6', 0,
  /* 13834 */ 'a', 'u', 't', 'i', 'a', '1', '7', '1', '6', 0,
  /* 13844 */ 'p', 'a', 'c', 'i', 'b', '1', '7', '1', '6', 0,
  /* 13854 */ 'a', 'u', 't', 'i', 'b', '1', '7', '1', '6', 0,
  /* 13864 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'E', 'N', 'D', 0,
  /* 13877 */ 'B', 'U', 'N', 'D', 'L', 'E', 0,
  /* 13884 */ 'D', 'B', 'G', '_', 'V', 'A', 'L', 'U', 'E', 0,
  /* 13894 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'S', 'T', 'A', 'R', 'T', 0,
  /* 13909 */ 'e', 'r', 'e', 't', 'a', 'a', 0,
  /* 13916 */ 'e', 'r', 'e', 't', 'a', 'b', 0,
  /* 13923 */ 'x', 'p', 'a', 'c', 'l', 'r', 'i', 0,
  /* 13931 */ '#', 32, 'F', 'E', 'n', 't', 'r', 'y', 32, 'c', 'a', 'l', 'l', 0,
  /* 13945 */ 'p', 'a', 'c', 'i', 'a', 's', 'p', 0,
  /* 13953 */ 'a', 'u', 't', 'i', 'a', 's', 'p', 0,
  /* 13961 */ 'p', 'a', 'c', 'i', 'b', 's', 'p', 0,
  /* 13969 */ 'a', 'u', 't', 'i', 'b', 's', 'p', 0,
  /* 13977 */ 'd', 'r', 'p', 's', 0,
  /* 13982 */ 'e', 'r', 'e', 't', 0,
  /* 13987 */ 's', 'd', 'o', 't', 0,
  /* 13992 */ 'u', 'd', 'o', 't', 0,
  /* 13997 */ 'p', 'a', 'c', 'i', 'a', 'z', 0,
  /* 14004 */ 'a', 'u', 't', 'i', 'a', 'z', 0,
  /* 14011 */ 'p', 'a', 'c', 'i', 'b', 'z', 0,
  /* 14018 */ 'a', 'u', 't', 'i', 'b', 'z', 0,
  };

  static const uint32_t OpInfo0[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// CFI_INSTRUCTION
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    13885U,	// DBG_VALUE
    0U,	// REG_SEQUENCE
    0U,	// COPY
    13878U,	// BUNDLE
    13895U,	// LIFETIME_START
    13865U,	// LIFETIME_END
    0U,	// STACKMAP
    13932U,	// FENTRY_CALL
    0U,	// PATCHPOINT
    0U,	// LOAD_STACK_GUARD
    0U,	// STATEPOINT
    0U,	// LOCAL_ESCAPE
    0U,	// FAULTING_OP
    0U,	// PATCHABLE_OP
    13757U,	// PATCHABLE_FUNCTION_ENTER
    13698U,	// PATCHABLE_RET
    13803U,	// PATCHABLE_FUNCTION_EXIT
    13780U,	// PATCHABLE_TAIL_CALL
    13732U,	// PATCHABLE_EVENT_CALL
    0U,	// G_ADD
    0U,	// G_SUB
    0U,	// G_MUL
    0U,	// G_SDIV
    0U,	// G_UDIV
    0U,	// G_SREM
    0U,	// G_UREM
    0U,	// G_AND
    0U,	// G_OR
    0U,	// G_XOR
    0U,	// G_IMPLICIT_DEF
    0U,	// G_FRAME_INDEX
    0U,	// G_GLOBAL_VALUE
    0U,	// G_EXTRACT
    0U,	// G_UNMERGE_VALUES
    0U,	// G_INSERT
    0U,	// G_MERGE_VALUES
    0U,	// G_PTRTOINT
    0U,	// G_INTTOPTR
    0U,	// G_BITCAST
    0U,	// G_LOAD
    0U,	// G_STORE
    0U,	// G_BRCOND
    0U,	// G_BRINDIRECT
    0U,	// G_INTRINSIC
    0U,	// G_INTRINSIC_W_SIDE_EFFECTS
    0U,	// G_ANYEXT
    0U,	// G_TRUNC
    0U,	// G_CONSTANT
    0U,	// G_FCONSTANT
    0U,	// G_VASTART
    0U,	// G_VAARG
    0U,	// G_SEXT
    0U,	// G_ZEXT
    0U,	// G_SHL
    0U,	// G_LSHR
    0U,	// G_ASHR
    0U,	// G_ICMP
    0U,	// G_FCMP
    0U,	// G_SELECT
    0U,	// G_UADDE
    0U,	// G_USUBE
    0U,	// G_SADDO
    0U,	// G_SSUBO
    0U,	// G_UMULO
    0U,	// G_SMULO
    0U,	// G_UMULH
    0U,	// G_SMULH
    0U,	// G_FADD
    0U,	// G_FSUB
    0U,	// G_FMUL
    0U,	// G_FMA
    0U,	// G_FDIV
    0U,	// G_FREM
    0U,	// G_FPOW
    0U,	// G_FEXP
    0U,	// G_FEXP2
    0U,	// G_FLOG
    0U,	// G_FLOG2
    0U,	// G_FNEG
    0U,	// G_FPEXT
    0U,	// G_FPTRUNC
    0U,	// G_FPTOSI
    0U,	// G_FPTOUI
    0U,	// G_SITOFP
    0U,	// G_UITOFP
    0U,	// G_GEP
    0U,	// G_PTR_MASK
    0U,	// G_BR
    0U,	// G_INSERT_VECTOR_ELT
    0U,	// G_EXTRACT_VECTOR_ELT
    0U,	// G_SHUFFLE_VECTOR
    17578U,	// ABSv16i8
    67154840U,	// ABSv1i64
    27200U,	// ABSv2i32
    20588U,	// ABSv2i64
    22273U,	// ABSv4i16
    29111U,	// ABSv4i32
    24125U,	// ABSv8i16
    18527U,	// ABSv8i8
    2214638512U,	// ADCSWr
    2214638512U,	// ADCSXr
    2214628260U,	// ADCWr
    2214628260U,	// ADCXr
    2147510473U,	// ADDHNv2i64_v2i32
    2281761976U,	// ADDHNv2i64_v4i32
    2147505546U,	// ADDHNv4i32_v4i16
    2281757081U,	// ADDHNv4i32_v8i16
    2281750923U,	// ADDHNv8i16_v16i8
    2147501915U,	// ADDHNv8i16_v8i8
    2147501091U,	// ADDPv16i8
    2147510624U,	// ADDPv2i32
    2147504060U,	// ADDPv2i64
    36796U,	// ADDPv2i64p
    2147505697U,	// ADDPv4i16
    2147512535U,	// ADDPv4i32
    2147507549U,	// ADDPv8i16
    2147502053U,	// ADDPv8i8
    2214638524U,	// ADDSWri
    0U,	// ADDSWrr
    2214638524U,	// ADDSWrs
    2214638524U,	// ADDSWrx
    2214638524U,	// ADDSXri
    0U,	// ADDSXrr
    2214638524U,	// ADDSXrs
    2214638524U,	// ADDSXrx
    2214638524U,	// ADDSXrx64
    34079U,	// ADDVv16i8v
    38884U,	// ADDVv4i16v
    45722U,	// ADDVv4i32v
    40736U,	// ADDVv8i16v
    35016U,	// ADDVv8i8v
    2214629817U,	// ADDWri
    0U,	// ADDWrr
    2214629817U,	// ADDWrs
    2214629817U,	// ADDWrx
    2214629817U,	// ADDXri
    0U,	// ADDXrr
    2214629817U,	// ADDXrs
    2214629817U,	// ADDXrx
    2214629817U,	// ADDXrx64
    2147500781U,	// ADDv16i8
    2214629817U,	// ADDv1i64
    2147510047U,	// ADDv2i32
    2147503554U,	// ADDv2i64
    2147505143U,	// ADDv4i16
    2147511854U,	// ADDv4i32
    2147506949U,	// ADDv8i16
    2147501667U,	// ADDv8i8
    0U,	// ADJCALLSTACKDOWN
    0U,	// ADJCALLSTACKUP
    67151125U,	// ADR
    201368728U,	// ADRP
    134267705U,	// AESDrr
    134267735U,	// AESErr
    17087U,	// AESIMCrr
    0U,	// AESIMCrrTied
    17099U,	// AESMCrr
    0U,	// AESMCrrTied
    2214638530U,	// ANDSWri
    0U,	// ANDSWrr
    2214638530U,	// ANDSWrs
    2214638530U,	// ANDSXri
    0U,	// ANDSXrr
    2214638530U,	// ANDSXrs
    2214629859U,	// ANDWri
    0U,	// ANDWrr
    2214629859U,	// ANDWrs
    2214629859U,	// ANDXri
    0U,	// ANDXrr
    2214629859U,	// ANDXrs
    2147500848U,	// ANDv16i8
    2147501728U,	// ANDv8i8
    2214634858U,	// ASRVWr
    2214634858U,	// ASRVXr
    67141768U,	// AUTDA
    67144111U,	// AUTDB
    1081629U,	// AUTDZA
    1084295U,	// AUTDZB
    67141789U,	// AUTIA
    13835U,	// AUTIA1716
    13954U,	// AUTIASP
    14005U,	// AUTIAZ
    67144125U,	// AUTIB
    13855U,	// AUTIB1716
    13970U,	// AUTIBSP
    14019U,	// AUTIBZ
    1081645U,	// AUTIZA
    1084311U,	// AUTIZB
    65849U,	// B
    2415961020U,	// BFMWri
    2415961020U,	// BFMXri
    0U,	// BICSWrr
    2214638518U,	// BICSWrs
    0U,	// BICSXrr
    2214638518U,	// BICSXrs
    0U,	// BICWrr
    2214628265U,	// BICWrs
    0U,	// BICXrr
    2214628265U,	// BICXrs
    2147500726U,	// BICv16i8
    335603451U,	// BICv2i32
    335598547U,	// BICv4i16
    335605258U,	// BICv4i32
    335600353U,	// BICv8i16
    2147501638U,	// BICv8i8
    2147500897U,	// BIFv16i8
    2147501754U,	// BIFv8i8
    2281751770U,	// BITv16i8
    2281752714U,	// BITv8i8
    74453U,	// BL
    1090873U,	// BLR
    67141746U,	// BLRAA
    1094964U,	// BLRAAZ
    67144026U,	// BLRAB
    1094979U,	// BLRABZ
    1090833U,	// BR
    67141733U,	// BRAA
    1094957U,	// BRAAZ
    67144013U,	// BRAB
    1094972U,	// BRABZ
    90718U,	// BRK
    2281751539U,	// BSLv16i8
    2281752382U,	// BSLv8i8
    112033U,	// Bcc
    268552563U,	// CASAB
    268558416U,	// CASAH
    268552704U,	// CASALB
    268558529U,	// CASALH
    268559024U,	// CASALW
    268559024U,	// CASALX
    268550381U,	// CASAW
    268550381U,	// CASAX
    268552987U,	// CASB
    268558840U,	// CASH
    268552798U,	// CASLB
    268558623U,	// CASLH
    268559224U,	// CASLW
    268559224U,	// CASLX
    139919U,	// CASPALW
    156303U,	// CASPALX
    131254U,	// CASPAW
    147638U,	// CASPAX
    140123U,	// CASPLW
    156507U,	// CASPLX
    140446U,	// CASPW
    156830U,	// CASPX
    268563338U,	// CASW
    268563338U,	// CASX
    402699610U,	// CBNZW
    402699610U,	// CBNZX
    402699595U,	// CBZW
    402699595U,	// CBZX
    2214634498U,	// CCMNWi
    2214634498U,	// CCMNWr
    2214634498U,	// CCMNXi
    2214634498U,	// CCMNXr
    2214634624U,	// CCMPWi
    2214634624U,	// CCMPWr
    2214634624U,	// CCMPXi
    2214634624U,	// CCMPXr
    1094927U,	// CLREX
    67154894U,	// CLSWr
    67154894U,	// CLSXr
    17597U,	// CLSv16i8
    27227U,	// CLSv2i32
    22300U,	// CLSv4i16
    29138U,	// CLSv4i32
    24152U,	// CLSv8i16
    18544U,	// CLSv8i8
    67155285U,	// CLZWr
    67155285U,	// CLZXr
    17793U,	// CLZv16i8
    27493U,	// CLZv2i32
    22681U,	// CLZv4i16
    29559U,	// CLZv4i32
    24573U,	// CLZv8i16
    18721U,	// CLZv8i8
    2147501154U,	// CMEQv16i8
    2147501154U,	// CMEQv16i8rz
    2214634726U,	// CMEQv1i64
    2214634726U,	// CMEQv1i64rz
    2147510781U,	// CMEQv2i32
    2147510781U,	// CMEQv2i32rz
    2147504177U,	// CMEQv2i64
    2147504177U,	// CMEQv2i64rz
    2147505854U,	// CMEQv4i16
    2147505854U,	// CMEQv4i16rz
    2147512692U,	// CMEQv4i32
    2147512692U,	// CMEQv4i32rz
    2147507706U,	// CMEQv8i16
    2147507706U,	// CMEQv8i16rz
    2147502110U,	// CMEQv8i8
    2147502110U,	// CMEQv8i8rz
    2147500867U,	// CMGEv16i8
    2147500867U,	// CMGEv16i8rz
    2214629872U,	// CMGEv1i64
    2214629872U,	// CMGEv1i64rz
    2147510130U,	// CMGEv2i32
    2147510130U,	// CMGEv2i32rz
    2147503595U,	// CMGEv2i64
    2147503595U,	// CMGEv2i64rz
    2147505226U,	// CMGEv4i16
    2147505226U,	// CMGEv4i16rz
    2147511937U,	// CMGEv4i32
    2147511937U,	// CMGEv4i32rz
    2147507032U,	// CMGEv8i16
    2147507032U,	// CMGEv8i16rz
    2147501736U,	// CMGEv8i8
    2147501736U,	// CMGEv8i8rz
    2147501263U,	// CMGTv16i8
    2147501263U,	// CMGTv16i8rz
    2214638626U,	// CMGTv1i64
    2214638626U,	// CMGTv1i64rz
    2147510970U,	// CMGTv2i32
    2147510970U,	// CMGTv2i32rz
    2147504350U,	// CMGTv2i64
    2147504350U,	// CMGTv2i64rz
    2147506043U,	// CMGTv4i16
    2147506043U,	// CMGTv4i16rz
    2147512881U,	// CMGTv4i32
    2147512881U,	// CMGTv4i32rz
    2147507895U,	// CMGTv8i16
    2147507895U,	// CMGTv8i16rz
    2147502208U,	// CMGTv8i8
    2147502208U,	// CMGTv8i8rz
    2147500917U,	// CMHIv16i8
    2214634048U,	// CMHIv1i64
    2147510285U,	// CMHIv2i32
    2147503676U,	// CMHIv2i64
    2147505358U,	// CMHIv4i16
    2147512104U,	// CMHIv4i32
    2147507164U,	// CMHIv8i16
    2147501772U,	// CMHIv8i8
    2147501235U,	// CMHSv16i8
    2214638536U,	// CMHSv1i64
    2147510866U,	// CMHSv2i32
    2147504254U,	// CMHSv2i64
    2147505939U,	// CMHSv4i16
    2147512777U,	// CMHSv4i32
    2147507791U,	// CMHSv8i16
    2147502183U,	// CMHSv8i8
    2147500877U,	// CMLEv16i8rz
    2214629879U,	// CMLEv1i64rz
    2147510140U,	// CMLEv2i32rz
    2147503605U,	// CMLEv2i64rz
    2147505236U,	// CMLEv4i16rz
    2147511947U,	// CMLEv4i32rz
    2147507042U,	// CMLEv8i16rz
    2147501745U,	// CMLEv8i8rz
    2147501283U,	// CMLTv16i8rz
    2214638644U,	// CMLTv1i64rz
    2147510980U,	// CMLTv2i32rz
    2147504360U,	// CMLTv2i64rz
    2147506053U,	// CMLTv4i16rz
    2147512891U,	// CMLTv4i32rz
    2147507905U,	// CMLTv8i16rz
    2147502226U,	// CMLTv8i8rz
    0U,	// CMP_SWAP_128
    0U,	// CMP_SWAP_16
    0U,	// CMP_SWAP_32
    0U,	// CMP_SWAP_64
    0U,	// CMP_SWAP_8
    2147501311U,	// CMTSTv16i8
    2214638675U,	// CMTSTv1i64
    2147510999U,	// CMTSTv2i32
    2147504379U,	// CMTSTv2i64
    2147506072U,	// CMTSTv4i16
    2147512910U,	// CMTSTv4i32
    2147507924U,	// CMTSTv8i16
    2147502251U,	// CMTSTv8i8
    17645U,	// CNTv16i8
    18587U,	// CNTv8i8
    46255U,	// CPYi16
    46255U,	// CPYi32
    46255U,	// CPYi64
    46255U,	// CPYi8
    2214625612U,	// CRC32Brr
    2214627735U,	// CRC32CBrr
    2214633588U,	// CRC32CHrr
    2214638780U,	// CRC32CWrr
    2214638854U,	// CRC32CXrr
    2214630148U,	// CRC32Hrr
    2214638772U,	// CRC32Wrr
    2214638819U,	// CRC32Xrr
    2214634242U,	// CSELWr
    2214634242U,	// CSELXr
    2214628275U,	// CSINCWr
    2214628275U,	// CSINCXr
    2214638759U,	// CSINVWr
    2214638759U,	// CSINVXr
    2214629944U,	// CSNEGWr
    2214629944U,	// CSNEGXr
    0U,	// CompilerBarrier
    81926U,	// DCPS1
    81975U,	// DCPS2
    81992U,	// DCPS3
    166530U,	// DMB
    13978U,	// DRPS
    166689U,	// DSB
    67126339U,	// DUPv16i8gpr
    17475U,	// DUPv16i8lane
    67135958U,	// DUPv2i32gpr
    27094U,	// DUPv2i32lane
    67129374U,	// DUPv2i64gpr
    20510U,	// DUPv2i64lane
    67131031U,	// DUPv4i16gpr
    22167U,	// DUPv4i16lane
    67137869U,	// DUPv4i32gpr
    29005U,	// DUPv4i32lane
    67132883U,	// DUPv8i16gpr
    24019U,	// DUPv8i16lane
    67127298U,	// DUPv8i8gpr
    18434U,	// DUPv8i8lane
    0U,	// EONWrr
    2214634504U,	// EONWrs
    0U,	// EONXrr
    2214634504U,	// EONXrs
    2214634836U,	// EORWri
    0U,	// EORWrr
    2214634836U,	// EORWrs
    2214634836U,	// EORXri
    0U,	// EORXrr
    2214634836U,	// EORXrs
    2147501206U,	// EORv16i8
    2147502157U,	// EORv8i8
    13983U,	// ERET
    13910U,	// ERETAA
    13917U,	// ERETAB
    2214634890U,	// EXTRWrri
    2214634890U,	// EXTRXrri
    2147501322U,	// EXTv16i8
    2147502261U,	// EXTv8i8
    0U,	// F128CSEL
    2214629802U,	// FABD16
    2214629802U,	// FABD32
    2214629802U,	// FABD64
    2147510019U,	// FABDv2f32
    2147503544U,	// FABDv2f64
    2147505115U,	// FABDv4f16
    2147511826U,	// FABDv4f32
    2147506921U,	// FABDv8f16
    67154839U,	// FABSDr
    67154839U,	// FABSHr
    67154839U,	// FABSSr
    27199U,	// FABSv2f32
    20587U,	// FABSv2f64
    22272U,	// FABSv4f16
    29110U,	// FABSv4f32
    24124U,	// FABSv8f16
    2214629864U,	// FACGE16
    2214629864U,	// FACGE32
    2214629864U,	// FACGE64
    2147510119U,	// FACGEv2f32
    2147503584U,	// FACGEv2f64
    2147505215U,	// FACGEv4f16
    2147511926U,	// FACGEv4f32
    2147507021U,	// FACGEv8f16
    2214638618U,	// FACGT16
    2214638618U,	// FACGT32
    2214638618U,	// FACGT64
    2147510959U,	// FACGTv2f32
    2147504339U,	// FACGTv2f64
    2147506032U,	// FACGTv4f16
    2147512870U,	// FACGTv4f32
    2147507884U,	// FACGTv8f16
    2214629822U,	// FADDDrr
    2214629822U,	// FADDHrr
    2147510623U,	// FADDPv2f32
    2147504059U,	// FADDPv2f64
    37582U,	// FADDPv2i16p
    43359U,	// FADDPv2i32p
    36795U,	// FADDPv2i64p
    2147505696U,	// FADDPv4f16
    2147512534U,	// FADDPv4f32
    2147507548U,	// FADDPv8f16
    2214629822U,	// FADDSrr
    2147510046U,	// FADDv2f32
    2147503553U,	// FADDv2f64
    2147505142U,	// FADDv4f16
    2147511853U,	// FADDv4f32
    2147506948U,	// FADDv8f16
    2214634623U,	// FCCMPDrr
    2214629893U,	// FCCMPEDrr
    2214629893U,	// FCCMPEHrr
    2214629893U,	// FCCMPESrr
    2214634623U,	// FCCMPHrr
    2214634623U,	// FCCMPSrr
    2214634725U,	// FCMEQ16
    2214634725U,	// FCMEQ32
    2214634725U,	// FCMEQ64
    2214634725U,	// FCMEQv1i16rz
    2214634725U,	// FCMEQv1i32rz
    2214634725U,	// FCMEQv1i64rz
    2147510780U,	// FCMEQv2f32
    2147504176U,	// FCMEQv2f64
    2147510780U,	// FCMEQv2i32rz
    2147504176U,	// FCMEQv2i64rz
    2147505853U,	// FCMEQv4f16
    2147512691U,	// FCMEQv4f32
    2147505853U,	// FCMEQv4i16rz
    2147512691U,	// FCMEQv4i32rz
    2147507705U,	// FCMEQv8f16
    2147507705U,	// FCMEQv8i16rz
    2214629871U,	// FCMGE16
    2214629871U,	// FCMGE32
    2214629871U,	// FCMGE64
    2214629871U,	// FCMGEv1i16rz
    2214629871U,	// FCMGEv1i32rz
    2214629871U,	// FCMGEv1i64rz
    2147510129U,	// FCMGEv2f32
    2147503594U,	// FCMGEv2f64
    2147510129U,	// FCMGEv2i32rz
    2147503594U,	// FCMGEv2i64rz
    2147505225U,	// FCMGEv4f16
    2147511936U,	// FCMGEv4f32
    2147505225U,	// FCMGEv4i16rz
    2147511936U,	// FCMGEv4i32rz
    2147507031U,	// FCMGEv8f16
    2147507031U,	// FCMGEv8i16rz
    2214638625U,	// FCMGT16
    2214638625U,	// FCMGT32
    2214638625U,	// FCMGT64
    2214638625U,	// FCMGTv1i16rz
    2214638625U,	// FCMGTv1i32rz
    2214638625U,	// FCMGTv1i64rz
    2147510969U,	// FCMGTv2f32
    2147504349U,	// FCMGTv2f64
    2147510969U,	// FCMGTv2i32rz
    2147504349U,	// FCMGTv2i64rz
    2147506042U,	// FCMGTv4f16
    2147512880U,	// FCMGTv4f32
    2147506042U,	// FCMGTv4i16rz
    2147512880U,	// FCMGTv4i32rz
    2147507894U,	// FCMGTv8f16
    2147507894U,	// FCMGTv8i16rz
    2214629878U,	// FCMLEv1i16rz
    2214629878U,	// FCMLEv1i32rz
    2214629878U,	// FCMLEv1i64rz
    2147510139U,	// FCMLEv2i32rz
    2147503604U,	// FCMLEv2i64rz
    2147505235U,	// FCMLEv4i16rz
    2147511946U,	// FCMLEv4i32rz
    2147507041U,	// FCMLEv8i16rz
    2214638643U,	// FCMLTv1i16rz
    2214638643U,	// FCMLTv1i32rz
    2214638643U,	// FCMLTv1i64rz
    2147510979U,	// FCMLTv2i32rz
    2147504359U,	// FCMLTv2i64rz
    2147506052U,	// FCMLTv4i16rz
    2147512890U,	// FCMLTv4i32rz
    2147507904U,	// FCMLTv8i16rz
    2139270U,	// FCMPDri
    67150982U,	// FCMPDrr
    2134541U,	// FCMPEDri
    67146253U,	// FCMPEDrr
    2134541U,	// FCMPEHri
    67146253U,	// FCMPEHrr
    2134541U,	// FCMPESri
    67146253U,	// FCMPESrr
    2139270U,	// FCMPHri
    67150982U,	// FCMPHrr
    2139270U,	// FCMPSri
    67150982U,	// FCMPSrr
    2214634241U,	// FCSELDrrr
    2214634241U,	// FCSELHrrr
    2214634241U,	// FCSELSrrr
    67154831U,	// FCVTASUWDr
    67154831U,	// FCVTASUWHr
    67154831U,	// FCVTASUWSr
    67154831U,	// FCVTASUXDr
    67154831U,	// FCVTASUXHr
    67154831U,	// FCVTASUXSr
    67154831U,	// FCVTASv1f16
    67154831U,	// FCVTASv1i32
    67154831U,	// FCVTASv1i64
    27188U,	// FCVTASv2f32
    20576U,	// FCVTASv2f64
    22261U,	// FCVTASv4f16
    29099U,	// FCVTASv4f32
    24113U,	// FCVTASv8f16
    67155040U,	// FCVTAUUWDr
    67155040U,	// FCVTAUUWHr
    67155040U,	// FCVTAUUWSr
    67155040U,	// FCVTAUUXDr
    67155040U,	// FCVTAUUXHr
    67155040U,	// FCVTAUUXSr
    67155040U,	// FCVTAUv1f16
    67155040U,	// FCVTAUv1i32
    67155040U,	// FCVTAUv1i64
    27361U,	// FCVTAUv2f32
    20741U,	// FCVTAUv2f64
    22434U,	// FCVTAUv4f16
    29272U,	// FCVTAUv4f32
    24286U,	// FCVTAUv8f16
    67155034U,	// FCVTDHr
    67155034U,	// FCVTDSr
    67155034U,	// FCVTHDr
    67155034U,	// FCVTHSr
    472933269U,	// FCVTLv2i32
    4219797U,	// FCVTLv4i16
    540033054U,	// FCVTLv4i32
    2151694366U,	// FCVTLv8i16
    67154899U,	// FCVTMSUWDr
    67154899U,	// FCVTMSUWHr
    67154899U,	// FCVTMSUWSr
    67154899U,	// FCVTMSUXDr
    67154899U,	// FCVTMSUXHr
    67154899U,	// FCVTMSUXSr
    67154899U,	// FCVTMSv1f16
    67154899U,	// FCVTMSv1i32
    67154899U,	// FCVTMSv1i64
    27244U,	// FCVTMSv2f32
    20624U,	// FCVTMSv2f64
    22317U,	// FCVTMSv4f16
    29155U,	// FCVTMSv4f32
    24169U,	// FCVTMSv8f16
    67155056U,	// FCVTMUUWDr
    67155056U,	// FCVTMUUWHr
    67155056U,	// FCVTMUUWSr
    67155056U,	// FCVTMUUXDr
    67155056U,	// FCVTMUUXHr
    67155056U,	// FCVTMUUXSr
    67155056U,	// FCVTMUv1f16
    67155056U,	// FCVTMUv1i32
    67155056U,	// FCVTMUv1i64
    27383U,	// FCVTMUv2f32
    20763U,	// FCVTMUv2f64
    22456U,	// FCVTMUv4f16
    29294U,	// FCVTMUv4f32
    24308U,	// FCVTMUv8f16
    67154907U,	// FCVTNSUWDr
    67154907U,	// FCVTNSUWHr
    67154907U,	// FCVTNSUWSr
    67154907U,	// FCVTNSUXDr
    67154907U,	// FCVTNSUXHr
    67154907U,	// FCVTNSUXSr
    67154907U,	// FCVTNSv1f16
    67154907U,	// FCVTNSv1i32
    67154907U,	// FCVTNSv1i64
    27255U,	// FCVTNSv2f32
    20635U,	// FCVTNSv2f64
    22328U,	// FCVTNSv4f16
    29166U,	// FCVTNSv4f32
    24180U,	// FCVTNSv8f16
    67155064U,	// FCVTNUUWDr
    67155064U,	// FCVTNUUWHr
    67155064U,	// FCVTNUUWSr
    67155064U,	// FCVTNUUXDr
    67155064U,	// FCVTNUUXHr
    67155064U,	// FCVTNUUXSr
    67155064U,	// FCVTNUv1f16
    67155064U,	// FCVTNUv1i32
    67155064U,	// FCVTNUv1i64
    27394U,	// FCVTNUv2f32
    20774U,	// FCVTNUv2f64
    22467U,	// FCVTNUv4f16
    29305U,	// FCVTNUv4f32
    24319U,	// FCVTNUv8f16
    5268540U,	// FCVTNv2i32
    6317116U,	// FCVTNv4i16
    138461222U,	// FCVTNv4i32
    7389222U,	// FCVTNv8i16
    67154923U,	// FCVTPSUWDr
    67154923U,	// FCVTPSUWHr
    67154923U,	// FCVTPSUWSr
    67154923U,	// FCVTPSUXDr
    67154923U,	// FCVTPSUXHr
    67154923U,	// FCVTPSUXSr
    67154923U,	// FCVTPSv1f16
    67154923U,	// FCVTPSv1i32
    67154923U,	// FCVTPSv1i64
    27277U,	// FCVTPSv2f32
    20657U,	// FCVTPSv2f64
    22350U,	// FCVTPSv4f16
    29188U,	// FCVTPSv4f32
    24202U,	// FCVTPSv8f16
    67155072U,	// FCVTPUUWDr
    67155072U,	// FCVTPUUWHr
    67155072U,	// FCVTPUUWSr
    67155072U,	// FCVTPUUXDr
    67155072U,	// FCVTPUUXHr
    67155072U,	// FCVTPUUXSr
    67155072U,	// FCVTPUv1f16
    67155072U,	// FCVTPUv1i32
    67155072U,	// FCVTPUv1i64
    27405U,	// FCVTPUv2f32
    20785U,	// FCVTPUv2f64
    22478U,	// FCVTPUv4f16
    29316U,	// FCVTPUv4f32
    24330U,	// FCVTPUv8f16
    67155034U,	// FCVTSDr
    67155034U,	// FCVTSHr
    67150962U,	// FCVTXNv1i64
    5268594U,	// FCVTXNv2f32
    138461230U,	// FCVTXNv4f32
    2214638598U,	// FCVTZSSWDri
    2214638598U,	// FCVTZSSWHri
    2214638598U,	// FCVTZSSWSri
    2214638598U,	// FCVTZSSXDri
    2214638598U,	// FCVTZSSXHri
    2214638598U,	// FCVTZSSXSri
    67154950U,	// FCVTZSUWDr
    67154950U,	// FCVTZSUWHr
    67154950U,	// FCVTZSUWSr
    67154950U,	// FCVTZSUXDr
    67154950U,	// FCVTZSUXHr
    67154950U,	// FCVTZSUXSr
    2214638598U,	// FCVTZSd
    2214638598U,	// FCVTZSh
    2214638598U,	// FCVTZSs
    67154950U,	// FCVTZSv1f16
    67154950U,	// FCVTZSv1i32
    67154950U,	// FCVTZSv1i64
    27300U,	// FCVTZSv2f32
    20680U,	// FCVTZSv2f64
    2147510948U,	// FCVTZSv2i32_shift
    2147504328U,	// FCVTZSv2i64_shift
    22373U,	// FCVTZSv4f16
    29211U,	// FCVTZSv4f32
    2147506021U,	// FCVTZSv4i16_shift
    2147512859U,	// FCVTZSv4i32_shift
    24225U,	// FCVTZSv8f16
    2147507873U,	// FCVTZSv8i16_shift
    2214638728U,	// FCVTZUSWDri
    2214638728U,	// FCVTZUSWHri
    2214638728U,	// FCVTZUSWSri
    2214638728U,	// FCVTZUSXDri
    2214638728U,	// FCVTZUSXHri
    2214638728U,	// FCVTZUSXSri
    67155080U,	// FCVTZUUWDr
    67155080U,	// FCVTZUUWHr
    67155080U,	// FCVTZUUWSr
    67155080U,	// FCVTZUUXDr
    67155080U,	// FCVTZUUXHr
    67155080U,	// FCVTZUUXSr
    2214638728U,	// FCVTZUd
    2214638728U,	// FCVTZUh
    2214638728U,	// FCVTZUs
    67155080U,	// FCVTZUv1f16
    67155080U,	// FCVTZUv1i32
    67155080U,	// FCVTZUv1i64
    27416U,	// FCVTZUv2f32
    20796U,	// FCVTZUv2f64
    2147511064U,	// FCVTZUv2i32_shift
    2147504444U,	// FCVTZUv2i64_shift
    22489U,	// FCVTZUv4f16
    29327U,	// FCVTZUv4f32
    2147506137U,	// FCVTZUv4i16_shift
    2147512975U,	// FCVTZUv4i32_shift
    24341U,	// FCVTZUv8f16
    2147507989U,	// FCVTZUv8i16_shift
    2214638741U,	// FDIVDrr
    2214638741U,	// FDIVHrr
    2214638741U,	// FDIVSrr
    2147511075U,	// FDIVv2f32
    2147504455U,	// FDIVv2f64
    2147506157U,	// FDIVv4f16
    2147512995U,	// FDIVv4f32
    2147508009U,	// FDIVv8f16
    2214629828U,	// FMADDDrrr
    2214629828U,	// FMADDHrrr
    2214629828U,	// FMADDSrrr
    2214638827U,	// FMAXDrr
    2214638827U,	// FMAXHrr
    2214634453U,	// FMAXNMDrr
    2214634453U,	// FMAXNMHrr
    2147510689U,	// FMAXNMPv2f32
    2147504125U,	// FMAXNMPv2f64
    37604U,	// FMAXNMPv2i16p
    43425U,	// FMAXNMPv2i32p
    36861U,	// FMAXNMPv2i64p
    2147505762U,	// FMAXNMPv4f16
    2147512600U,	// FMAXNMPv4f32
    2147507614U,	// FMAXNMPv8f16
    2214634453U,	// FMAXNMSrr
    38936U,	// FMAXNMVv4i16v
    45774U,	// FMAXNMVv4i32v
    40788U,	// FMAXNMVv8i16v
    2147510439U,	// FMAXNMv2f32
    2147504017U,	// FMAXNMv2f64
    2147505512U,	// FMAXNMv4f16
    2147512464U,	// FMAXNMv4f32
    2147507488U,	// FMAXNMv8f16
    2147510750U,	// FMAXPv2f32
    2147504166U,	// FMAXPv2f64
    37626U,	// FMAXPv2i16p
    43486U,	// FMAXPv2i32p
    36902U,	// FMAXPv2i64p
    2147505823U,	// FMAXPv4f16
    2147512661U,	// FMAXPv4f32
    2147507675U,	// FMAXPv8f16
    2214638827U,	// FMAXSrr
    38987U,	// FMAXVv4i16v
    45825U,	// FMAXVv4i32v
    40839U,	// FMAXVv8i16v
    2147511093U,	// FMAXv2f32
    2147504513U,	// FMAXv2f64
    2147506281U,	// FMAXv4f16
    2147513159U,	// FMAXv4f32
    2147508173U,	// FMAXv8f16
    2214634476U,	// FMINDrr
    2214634476U,	// FMINHrr
    2214634445U,	// FMINNMDrr
    2214634445U,	// FMINNMHrr
    2147510677U,	// FMINNMPv2f32
    2147504113U,	// FMINNMPv2f64
    37592U,	// FMINNMPv2i16p
    43413U,	// FMINNMPv2i32p
    36849U,	// FMINNMPv2i64p
    2147505750U,	// FMINNMPv4f16
    2147512588U,	// FMINNMPv4f32
    2147507602U,	// FMINNMPv8f16
    2214634445U,	// FMINNMSrr
    38924U,	// FMINNMVv4i16v
    45762U,	// FMINNMVv4i32v
    40776U,	// FMINNMVv8i16v
    2147510428U,	// FMINNMv2f32
    2147504006U,	// FMINNMv2f64
    2147505501U,	// FMINNMv4f16
    2147512453U,	// FMINNMv4f32
    2147507477U,	// FMINNMv8f16
    2147510701U,	// FMINPv2f32
    2147504137U,	// FMINPv2f64
    37616U,	// FMINPv2i16p
    43437U,	// FMINPv2i32p
    36873U,	// FMINPv2i64p
    2147505774U,	// FMINPv4f16
    2147512612U,	// FMINPv4f32
    2147507626U,	// FMINPv8f16
    2214634476U,	// FMINSrr
    38948U,	// FMINVv4i16v
    45786U,	// FMINVv4i32v
    40800U,	// FMINVv8i16v
    2147510483U,	// FMINv2f32
    2147504039U,	// FMINv2f64
    2147505556U,	// FMINv4f16
    2147512486U,	// FMINv4f32
    2147507510U,	// FMINv8f16
    2416038463U,	// FMLAv1i16_indexed
    2416043446U,	// FMLAv1i32_indexed
    2416036804U,	// FMLAv1i64_indexed
    2281760400U,	// FMLAv2f32
    2281753953U,	// FMLAv2f64
    2281760400U,	// FMLAv2i32_indexed
    2281753953U,	// FMLAv2i64_indexed
    2281755496U,	// FMLAv4f16
    2281762197U,	// FMLAv4f32
    2281755496U,	// FMLAv4i16_indexed
    2281762197U,	// FMLAv4i32_indexed
    2281757302U,	// FMLAv8f16
    2281757302U,	// FMLAv8i16_indexed
    2416038559U,	// FMLSv1i16_indexed
    2416043542U,	// FMLSv1i32_indexed
    2416036820U,	// FMLSv1i64_indexed
    2281761379U,	// FMLSv2f32
    2281754759U,	// FMLSv2f64
    2281761379U,	// FMLSv2i32_indexed
    2281754759U,	// FMLSv2i64_indexed
    2281756452U,	// FMLSv4f16
    2281763290U,	// FMLSv4f32
    2281756452U,	// FMLSv4i16_indexed
    2281763290U,	// FMLSv4i32_indexed
    2281758304U,	// FMLSv8f16
    2281758304U,	// FMLSv8i16_indexed
    0U,	// FMOVD0
    35811U,	// FMOVDXHighr
    67155118U,	// FMOVDXr
    604026030U,	// FMOVDi
    67155118U,	// FMOVDr
    67155118U,	// FMOVHWr
    67155118U,	// FMOVHXr
    604026030U,	// FMOVHi
    67155118U,	// FMOVHr
    0U,	// FMOVS0
    67155118U,	// FMOVSWr
    604026030U,	// FMOVSi
    67155118U,	// FMOVSr
    67155118U,	// FMOVWHr
    67155118U,	// FMOVWSr
    75516899U,	// FMOVXDHighr
    67155118U,	// FMOVXDr
    67155118U,	// FMOVXHr
    604007212U,	// FMOVv2f32_ns
    604000592U,	// FMOVv2f64_ns
    604002370U,	// FMOVv4f16_ns
    604009208U,	// FMOVv4f32_ns
    604004222U,	// FMOVv8f16_ns
    2214628176U,	// FMSUBDrrr
    2214628176U,	// FMSUBHrrr
    2214628176U,	// FMSUBSrrr
    2214634396U,	// FMULDrr
    2214634396U,	// FMULHrr
    2214634396U,	// FMULSrr
    2214638870U,	// FMULX16
    2214638870U,	// FMULX32
    2214638870U,	// FMULX64
    2214630078U,	// FMULXv1i16_indexed
    2214635061U,	// FMULXv1i32_indexed
    2214628339U,	// FMULXv1i64_indexed
    2147511120U,	// FMULXv2f32
    2147504522U,	// FMULXv2f64
    2147511120U,	// FMULXv2i32_indexed
    2147504522U,	// FMULXv2i64_indexed
    2147506308U,	// FMULXv4f16
    2147513186U,	// FMULXv4f32
    2147506308U,	// FMULXv4i16_indexed
    2147513186U,	// FMULXv4i32_indexed
    2147508200U,	// FMULXv8f16
    2147508200U,	// FMULXv8i16_indexed
    2214630039U,	// FMULv1i16_indexed
    2214635022U,	// FMULv1i32_indexed
    2214628300U,	// FMULv1i64_indexed
    2147510419U,	// FMULv2f32
    2147503997U,	// FMULv2f64
    2147510419U,	// FMULv2i32_indexed
    2147503997U,	// FMULv2i64_indexed
    2147505492U,	// FMULv4f16
    2147512434U,	// FMULv4f32
    2147505492U,	// FMULv4i16_indexed
    2147512434U,	// FMULv4i32_indexed
    2147507468U,	// FMULv8f16
    2147507468U,	// FMULv8i16_indexed
    67146283U,	// FNEGDr
    67146283U,	// FNEGHr
    67146283U,	// FNEGSr
    26567U,	// FNEGv2f32
    20009U,	// FNEGv2f64
    21640U,	// FNEGv4f16
    28374U,	// FNEGv4f32
    23446U,	// FNEGv8f16
    2214629835U,	// FNMADDDrrr
    2214629835U,	// FNMADDHrrr
    2214629835U,	// FNMADDSrrr
    2214628183U,	// FNMSUBDrrr
    2214628183U,	// FNMSUBHrrr
    2214628183U,	// FNMSUBSrrr
    2214634402U,	// FNMULDrr
    2214634402U,	// FNMULHrr
    2214634402U,	// FNMULSrr
    67146237U,	// FRECPEv1f16
    67146237U,	// FRECPEv1i32
    67146237U,	// FRECPEv1i64
    26501U,	// FRECPEv2f32
    19966U,	// FRECPEv2f64
    21597U,	// FRECPEv4f16
    28308U,	// FRECPEv4f32
    23403U,	// FRECPEv8f16
    2214638563U,	// FRECPS16
    2214638563U,	// FRECPS32
    2214638563U,	// FRECPS64
    2147510914U,	// FRECPSv2f32
    2147504294U,	// FRECPSv2f64
    2147505987U,	// FRECPSv4f16
    2147512825U,	// FRECPSv4f32
    2147507839U,	// FRECPSv8f16
    67155229U,	// FRECPXv1f16
    67155229U,	// FRECPXv1i32
    67155229U,	// FRECPXv1i64
    67141883U,	// FRINTADr
    67141883U,	// FRINTAHr
    67141883U,	// FRINTASr
    26303U,	// FRINTAv2f32
    19856U,	// FRINTAv2f64
    21399U,	// FRINTAv4f16
    28100U,	// FRINTAv4f32
    23205U,	// FRINTAv8f16
    67150416U,	// FRINTIDr
    67150416U,	// FRINTIHr
    67150416U,	// FRINTISr
    26671U,	// FRINTIv2f32
    20053U,	// FRINTIv2f64
    21744U,	// FRINTIv4f16
    28490U,	// FRINTIv4f32
    23550U,	// FRINTIv8f16
    67150813U,	// FRINTMDr
    67150813U,	// FRINTMHr
    67150813U,	// FRINTMSr
    26802U,	// FRINTMv2f32
    20380U,	// FRINTMv2f64
    21875U,	// FRINTMv4f16
    28827U,	// FRINTMv4f32
    23851U,	// FRINTMv8f16
    67150900U,	// FRINTNDr
    67150900U,	// FRINTNHr
    67150900U,	// FRINTNSr
    26908U,	// FRINTNv2f32
    20400U,	// FRINTNv2f64
    21981U,	// FRINTNv4f16
    28865U,	// FRINTNv4f32
    23889U,	// FRINTNv8f16
    67151012U,	// FRINTPDr
    67151012U,	// FRINTPHr
    67151012U,	// FRINTPSr
    27083U,	// FRINTPv2f32
    20499U,	// FRINTPv2f64
    22156U,	// FRINTPv4f16
    28994U,	// FRINTPv4f32
    24008U,	// FRINTPv8f16
    67155237U,	// FRINTXDr
    67155237U,	// FRINTXHr
    67155237U,	// FRINTXSr
    27482U,	// FRINTXv2f32
    20884U,	// FRINTXv2f64
    22670U,	// FRINTXv4f16
    29548U,	// FRINTXv4f32
    24562U,	// FRINTXv8f16
    67155302U,	// FRINTZDr
    67155302U,	// FRINTZHr
    67155302U,	// FRINTZSr
    27501U,	// FRINTZv2f32
    20895U,	// FRINTZv2f64
    22689U,	// FRINTZv4f16
    29567U,	// FRINTZv4f32
    24581U,	// FRINTZv8f16
    67146260U,	// FRSQRTEv1f16
    67146260U,	// FRSQRTEv1i32
    67146260U,	// FRSQRTEv1i64
    26523U,	// FRSQRTEv2f32
    19977U,	// FRSQRTEv2f64
    21608U,	// FRSQRTEv4f16
    28330U,	// FRSQRTEv4f32
    23414U,	// FRSQRTEv8f16
    2214638584U,	// FRSQRTS16
    2214638584U,	// FRSQRTS32
    2214638584U,	// FRSQRTS64
    2147510936U,	// FRSQRTSv2f32
    2147504316U,	// FRSQRTSv2f64
    2147506009U,	// FRSQRTSv4f16
    2147512847U,	// FRSQRTSv4f32
    2147507861U,	// FRSQRTSv8f16
    67155020U,	// FSQRTDr
    67155020U,	// FSQRTHr
    67155020U,	// FSQRTSr
    27341U,	// FSQRTv2f32
    20721U,	// FSQRTv2f64
    22414U,	// FSQRTv4f16
    29252U,	// FSQRTv4f32
    24266U,	// FSQRTv8f16
    2214628170U,	// FSUBDrr
    2214628170U,	// FSUBHrr
    2214628170U,	// FSUBSrr
    2147509962U,	// FSUBv2f32
    2147503515U,	// FSUBv2f64
    2147505058U,	// FSUBv4f16
    2147511759U,	// FSUBv4f32
    2147506864U,	// FSUBv8f16
    193594U,	// HINT
    95278U,	// HLT
    84922U,	// HVC
    679531175U,	// INSvi16gpr
    746640039U,	// INSvi16lane
    679536158U,	// INSvi32gpr
    746645022U,	// INSvi32lane
    679529436U,	// INSvi64gpr
    746638300U,	// INSvi64lane
    679526709U,	// INSvi8gpr
    746635573U,	// INSvi8lane
    166694U,	// ISB
    196609U,	// LD1Fourv16b
    9650177U,	// LD1Fourv16b_POST
    229377U,	// LD1Fourv1d
    10731521U,	// LD1Fourv1d_POST
    262145U,	// LD1Fourv2d
    9715713U,	// LD1Fourv2d_POST
    294913U,	// LD1Fourv2s
    10797057U,	// LD1Fourv2s_POST
    327681U,	// LD1Fourv4h
    10829825U,	// LD1Fourv4h_POST
    360449U,	// LD1Fourv4s
    9814017U,	// LD1Fourv4s_POST
    393217U,	// LD1Fourv8b
    10895361U,	// LD1Fourv8b_POST
    425985U,	// LD1Fourv8h
    9879553U,	// LD1Fourv8h_POST
    196609U,	// LD1Onev16b
    11747329U,	// LD1Onev16b_POST
    229377U,	// LD1Onev1d
    12828673U,	// LD1Onev1d_POST
    262145U,	// LD1Onev2d
    11812865U,	// LD1Onev2d_POST
    294913U,	// LD1Onev2s
    12894209U,	// LD1Onev2s_POST
    327681U,	// LD1Onev4h
    12926977U,	// LD1Onev4h_POST
    360449U,	// LD1Onev4s
    11911169U,	// LD1Onev4s_POST
    393217U,	// LD1Onev8b
    12992513U,	// LD1Onev8b_POST
    425985U,	// LD1Onev8h
    11976705U,	// LD1Onev8h_POST
    206060U,	// LD1Rv16b
    13853932U,	// LD1Rv16b_POST
    238828U,	// LD1Rv1d
    12838124U,	// LD1Rv1d_POST
    271596U,	// LD1Rv2d
    12870892U,	// LD1Rv2d_POST
    304364U,	// LD1Rv2s
    15000812U,	// LD1Rv2s_POST
    337132U,	// LD1Rv4h
    16082156U,	// LD1Rv4h_POST
    369900U,	// LD1Rv4s
    15066348U,	// LD1Rv4s_POST
    402668U,	// LD1Rv8b
    14050540U,	// LD1Rv8b_POST
    435436U,	// LD1Rv8h
    16180460U,	// LD1Rv8h_POST
    196609U,	// LD1Threev16b
    16990209U,	// LD1Threev16b_POST
    229377U,	// LD1Threev1d
    18071553U,	// LD1Threev1d_POST
    262145U,	// LD1Threev2d
    17055745U,	// LD1Threev2d_POST
    294913U,	// LD1Threev2s
    18137089U,	// LD1Threev2s_POST
    327681U,	// LD1Threev4h
    18169857U,	// LD1Threev4h_POST
    360449U,	// LD1Threev4s
    17154049U,	// LD1Threev4s_POST
    393217U,	// LD1Threev8b
    18235393U,	// LD1Threev8b_POST
    425985U,	// LD1Threev8h
    17219585U,	// LD1Threev8h_POST
    196609U,	// LD1Twov16b
    10698753U,	// LD1Twov16b_POST
    229377U,	// LD1Twov1d
    11780097U,	// LD1Twov1d_POST
    262145U,	// LD1Twov2d
    10764289U,	// LD1Twov2d_POST
    294913U,	// LD1Twov2s
    11845633U,	// LD1Twov2s_POST
    327681U,	// LD1Twov4h
    11878401U,	// LD1Twov4h_POST
    360449U,	// LD1Twov4s
    10862593U,	// LD1Twov4s_POST
    393217U,	// LD1Twov8b
    11943937U,	// LD1Twov8b_POST
    425985U,	// LD1Twov8h
    10928129U,	// LD1Twov8h_POST
    19333121U,	// LD1i16
    20398081U,	// LD1i16_POST
    19365889U,	// LD1i32
    21479425U,	// LD1i32_POST
    19398657U,	// LD1i64
    22560769U,	// LD1i64_POST
    19431425U,	// LD1i8
    23642113U,	// LD1i8_POST
    206066U,	// LD2Rv16b
    15951090U,	// LD2Rv16b_POST
    238834U,	// LD2Rv1d
    11789554U,	// LD2Rv1d_POST
    271602U,	// LD2Rv2d
    11822322U,	// LD2Rv2d_POST
    304370U,	// LD2Rv2s
    12903666U,	// LD2Rv2s_POST
    337138U,	// LD2Rv4h
    15033586U,	// LD2Rv4h_POST
    369906U,	// LD2Rv4s
    12969202U,	// LD2Rv4s_POST
    402674U,	// LD2Rv8b
    16147698U,	// LD2Rv8b_POST
    435442U,	// LD2Rv8h
    15131890U,	// LD2Rv8h_POST
    196633U,	// LD2Twov16b
    10698777U,	// LD2Twov16b_POST
    262169U,	// LD2Twov2d
    10764313U,	// LD2Twov2d_POST
    294937U,	// LD2Twov2s
    11845657U,	// LD2Twov2s_POST
    327705U,	// LD2Twov4h
    11878425U,	// LD2Twov4h_POST
    360473U,	// LD2Twov4s
    10862617U,	// LD2Twov4s_POST
    393241U,	// LD2Twov8b
    11943961U,	// LD2Twov8b_POST
    426009U,	// LD2Twov8h
    10928153U,	// LD2Twov8h_POST
    19333145U,	// LD2i16
    21446681U,	// LD2i16_POST
    19365913U,	// LD2i32
    22528025U,	// LD2i32_POST
    19398681U,	// LD2i64
    24657945U,	// LD2i64_POST
    19431449U,	// LD2i8
    20496409U,	// LD2i8_POST
    206072U,	// LD3Rv16b
    25388280U,	// LD3Rv16b_POST
    238840U,	// LD3Rv1d
    18081016U,	// LD3Rv1d_POST
    271608U,	// LD3Rv2d
    18113784U,	// LD3Rv2d_POST
    304376U,	// LD3Rv2s
    26535160U,	// LD3Rv2s_POST
    337144U,	// LD3Rv4h
    27616504U,	// LD3Rv4h_POST
    369912U,	// LD3Rv4s
    26600696U,	// LD3Rv4s_POST
    402680U,	// LD3Rv8b
    25584888U,	// LD3Rv8b_POST
    435448U,	// LD3Rv8h
    27714808U,	// LD3Rv8h_POST
    196675U,	// LD3Threev16b
    16990275U,	// LD3Threev16b_POST
    262211U,	// LD3Threev2d
    17055811U,	// LD3Threev2d_POST
    294979U,	// LD3Threev2s
    18137155U,	// LD3Threev2s_POST
    327747U,	// LD3Threev4h
    18169923U,	// LD3Threev4h_POST
    360515U,	// LD3Threev4s
    17154115U,	// LD3Threev4s_POST
    393283U,	// LD3Threev8b
    18235459U,	// LD3Threev8b_POST
    426051U,	// LD3Threev8h
    17219651U,	// LD3Threev8h_POST
    19333187U,	// LD3i16
    28786755U,	// LD3i16_POST
    19365955U,	// LD3i32
    29868099U,	// LD3i32_POST
    19398723U,	// LD3i64
    30949443U,	// LD3i64_POST
    19431491U,	// LD3i8
    32030787U,	// LD3i8_POST
    196692U,	// LD4Fourv16b
    9650260U,	// LD4Fourv16b_POST
    262228U,	// LD4Fourv2d
    9715796U,	// LD4Fourv2d_POST
    294996U,	// LD4Fourv2s
    10797140U,	// LD4Fourv2s_POST
    327764U,	// LD4Fourv4h
    10829908U,	// LD4Fourv4h_POST
    360532U,	// LD4Fourv4s
    9814100U,	// LD4Fourv4s_POST
    393300U,	// LD4Fourv8b
    10895444U,	// LD4Fourv8b_POST
    426068U,	// LD4Fourv8h
    9879636U,	// LD4Fourv8h_POST
    206078U,	// LD4Rv16b
    14902526U,	// LD4Rv16b_POST
    238846U,	// LD4Rv1d
    10740990U,	// LD4Rv1d_POST
    271614U,	// LD4Rv2d
    10773758U,	// LD4Rv2d_POST
    304382U,	// LD4Rv2s
    11855102U,	// LD4Rv2s_POST
    337150U,	// LD4Rv4h
    12936446U,	// LD4Rv4h_POST
    369918U,	// LD4Rv4s
    11920638U,	// LD4Rv4s_POST
    402686U,	// LD4Rv8b
    15099134U,	// LD4Rv8b_POST
    435454U,	// LD4Rv8h
    13034750U,	// LD4Rv8h_POST
    19333204U,	// LD4i16
    22495316U,	// LD4i16_POST
    19365972U,	// LD4i32
    24625236U,	// LD4i32_POST
    19398740U,	// LD4i64
    33046612U,	// LD4i64_POST
    19431508U,	// LD4i8
    21545044U,	// LD4i8_POST
    805423401U,	// LDADDAB
    805429264U,	// LDADDAH
    805423556U,	// LDADDALB
    805429381U,	// LDADDALH
    805429865U,	// LDADDALW
    805429865U,	// LDADDALX
    805421184U,	// LDADDAW
    805421184U,	// LDADDAX
    805423527U,	// LDADDB
    805429373U,	// LDADDH
    805423656U,	// LDADDLB
    805429481U,	// LDADDLH
    805429993U,	// LDADDLW
    805429993U,	// LDADDLX
    805425591U,	// LDADDW
    805425591U,	// LDADDX
    2248182483U,	// LDAPRB
    2248188336U,	// LDAPRH
    2248189278U,	// LDAPRW
    2248189278U,	// LDAPRX
    2248182431U,	// LDARB
    2248188284U,	// LDARH
    2248189188U,	// LDARW
    2248189188U,	// LDARX
    67151030U,	// LDAXPW
    67151030U,	// LDAXPX
    2248182525U,	// LDAXRB
    2248188378U,	// LDAXRH
    2248189340U,	// LDAXRW
    2248189340U,	// LDAXRX
    805423457U,	// LDCLRAB
    805429310U,	// LDCLRAH
    805423596U,	// LDCLRALB
    805429421U,	// LDCLRALH
    805429918U,	// LDCLRALW
    805429918U,	// LDCLRALX
    805421251U,	// LDCLRAW
    805421251U,	// LDCLRAX
    805423796U,	// LDCLRB
    805429649U,	// LDCLRH
    805423692U,	// LDCLRLB
    805429517U,	// LDCLRLH
    805430120U,	// LDCLRLW
    805430120U,	// LDCLRLX
    805430590U,	// LDCLRW
    805430590U,	// LDCLRX
    805423466U,	// LDEORAB
    805429319U,	// LDEORAH
    805423606U,	// LDEORALB
    805429431U,	// LDEORALH
    805429927U,	// LDEORALW
    805429927U,	// LDEORALX
    805421259U,	// LDEORAW
    805421259U,	// LDEORAX
    805423819U,	// LDEORB
    805429672U,	// LDEORH
    805423701U,	// LDEORLB
    805429526U,	// LDEORLH
    805430128U,	// LDEORLW
    805430128U,	// LDEORLX
    805430610U,	// LDEORW
    805430610U,	// LDEORX
    2248182438U,	// LDLARB
    2248188291U,	// LDLARH
    2248189194U,	// LDLARW
    2248189194U,	// LDLARX
    67150988U,	// LDNPDi
    67150988U,	// LDNPQi
    67150988U,	// LDNPSi
    67150988U,	// LDNPWi
    67150988U,	// LDNPXi
    67150970U,	// LDPDi
    268559482U,	// LDPDpost
    268559482U,	// LDPDpre
    67150970U,	// LDPQi
    268559482U,	// LDPQpost
    268559482U,	// LDPQpre
    67155141U,	// LDPSWi
    268563653U,	// LDPSWpost
    268563653U,	// LDPSWpre
    67150970U,	// LDPSi
    268559482U,	// LDPSpost
    268559482U,	// LDPSpre
    67150970U,	// LDPWi
    268559482U,	// LDPWpost
    268559482U,	// LDPWpre
    67150970U,	// LDPXi
    268559482U,	// LDPXpost
    268559482U,	// LDPXpre
    2248179819U,	// LDRAAindexed
    2449588331U,	// LDRAAwriteback
    2248182099U,	// LDRABindexed
    2449590611U,	// LDRABwriteback
    302107310U,	// LDRBBpost
    2449590958U,	// LDRBBpre
    2248182446U,	// LDRBBroW
    2248182446U,	// LDRBBroX
    2248182446U,	// LDRBBui
    302114074U,	// LDRBpost
    2449597722U,	// LDRBpre
    2248189210U,	// LDRBroW
    2248189210U,	// LDRBroX
    2248189210U,	// LDRBui
    402695450U,	// LDRDl
    302114074U,	// LDRDpost
    2449597722U,	// LDRDpre
    2248189210U,	// LDRDroW
    2248189210U,	// LDRDroX
    2248189210U,	// LDRDui
    302113163U,	// LDRHHpost
    2449596811U,	// LDRHHpre
    2248188299U,	// LDRHHroW
    2248188299U,	// LDRHHroX
    2248188299U,	// LDRHHui
    302114074U,	// LDRHpost
    2449597722U,	// LDRHpre
    2248189210U,	// LDRHroW
    2248189210U,	// LDRHroX
    2248189210U,	// LDRHui
    402695450U,	// LDRQl
    302114074U,	// LDRQpost
    2449597722U,	// LDRQpre
    2248189210U,	// LDRQroW
    2248189210U,	// LDRQroX
    2248189210U,	// LDRQui
    302107435U,	// LDRSBWpost
    2449591083U,	// LDRSBWpre
    2248182571U,	// LDRSBWroW
    2248182571U,	// LDRSBWroX
    2248182571U,	// LDRSBWui
    302107435U,	// LDRSBXpost
    2449591083U,	// LDRSBXpre
    2248182571U,	// LDRSBXroW
    2248182571U,	// LDRSBXroX
    2248182571U,	// LDRSBXui
    302113288U,	// LDRSHWpost
    2449596936U,	// LDRSHWpre
    2248188424U,	// LDRSHWroW
    2248188424U,	// LDRSHWroX
    2248188424U,	// LDRSHWui
    302113288U,	// LDRSHXpost
    2449596936U,	// LDRSHXpre
    2248188424U,	// LDRSHXroW
    2248188424U,	// LDRSHXroX
    2248188424U,	// LDRSHXui
    402699468U,	// LDRSWl
    302118092U,	// LDRSWpost
    2449601740U,	// LDRSWpre
    2248193228U,	// LDRSWroW
    2248193228U,	// LDRSWroX
    2248193228U,	// LDRSWui
    402695450U,	// LDRSl
    302114074U,	// LDRSpost
    2449597722U,	// LDRSpre
    2248189210U,	// LDRSroW
    2248189210U,	// LDRSroX
    2248189210U,	// LDRSui
    402695450U,	// LDRWl
    302114074U,	// LDRWpost
    2449597722U,	// LDRWpre
    2248189210U,	// LDRWroW
    2248189210U,	// LDRWroX
    2248189210U,	// LDRWui
    402695450U,	// LDRXl
    302114074U,	// LDRXpost
    2449597722U,	// LDRXpre
    2248189210U,	// LDRXroW
    2248189210U,	// LDRXroX
    2248189210U,	// LDRXui
    805423482U,	// LDSETAB
    805429335U,	// LDSETAH
    805423624U,	// LDSETALB
    805429449U,	// LDSETALH
    805429943U,	// LDSETALW
    805429943U,	// LDSETALX
    805421299U,	// LDSETAW
    805421299U,	// LDSETAX
    805423938U,	// LDSETB
    805429791U,	// LDSETH
    805423717U,	// LDSETLB
    805429542U,	// LDSETLH
    805430157U,	// LDSETLW
    805430157U,	// LDSETLX
    805434387U,	// LDSETW
    805434387U,	// LDSETX
    805423491U,	// LDSMAXAB
    805429344U,	// LDSMAXAH
    805423634U,	// LDSMAXALB
    805429459U,	// LDSMAXALH
    805429952U,	// LDSMAXALW
    805429952U,	// LDSMAXALX
    805421315U,	// LDSMAXAW
    805421315U,	// LDSMAXAX
    805423981U,	// LDSMAXB
    805429799U,	// LDSMAXH
    805423726U,	// LDSMAXLB
    805429584U,	// LDSMAXLH
    805430185U,	// LDSMAXLW
    805430185U,	// LDSMAXLX
    805434609U,	// LDSMAXW
    805434609U,	// LDSMAXX
    805423410U,	// LDSMINAB
    805429283U,	// LDSMINAH
    805423566U,	// LDSMINALB
    805429391U,	// LDSMINALH
    805429883U,	// LDSMINALW
    805429883U,	// LDSMINALX
    805421220U,	// LDSMINAW
    805421220U,	// LDSMINAX
    805423751U,	// LDSMINB
    805429604U,	// LDSMINH
    805423665U,	// LDSMINLB
    805429490U,	// LDSMINLH
    805430089U,	// LDSMINLW
    805430089U,	// LDSMINLX
    805430258U,	// LDSMINW
    805430258U,	// LDSMINX
    2248182491U,	// LDTRBi
    2248188344U,	// LDTRHi
    2248182578U,	// LDTRSBWi
    2248182578U,	// LDTRSBXi
    2248188431U,	// LDTRSHWi
    2248188431U,	// LDTRSHXi
    2248193235U,	// LDTRSWi
    2248189305U,	// LDTRWi
    2248189305U,	// LDTRXi
    805423501U,	// LDUMAXAB
    805429354U,	// LDUMAXAH
    805423645U,	// LDUMAXALB
    805429470U,	// LDUMAXALH
    805429962U,	// LDUMAXALW
    805429962U,	// LDUMAXALX
    805421324U,	// LDUMAXAW
    805421324U,	// LDUMAXAX
    805423990U,	// LDUMAXB
    805429808U,	// LDUMAXH
    805423736U,	// LDUMAXLB
    805429594U,	// LDUMAXLH
    805430194U,	// LDUMAXLW
    805430194U,	// LDUMAXLX
    805434617U,	// LDUMAXW
    805434617U,	// LDUMAXX
    805423420U,	// LDUMINAB
    805429293U,	// LDUMINAH
    805423577U,	// LDUMINALB
    805429402U,	// LDUMINALH
    805429893U,	// LDUMINALW
    805429893U,	// LDUMINALX
    805421229U,	// LDUMINAW
    805421229U,	// LDUMINAX
    805423760U,	// LDUMINB
    805429613U,	// LDUMINH
    805423675U,	// LDUMINLB
    805429500U,	// LDUMINLH
    805430098U,	// LDUMINLW
    805430098U,	// LDUMINLX
    805430266U,	// LDUMINW
    805430266U,	// LDUMINX
    2248182511U,	// LDURBBi
    2248189328U,	// LDURBi
    2248189328U,	// LDURDi
    2248188364U,	// LDURHHi
    2248189328U,	// LDURHi
    2248189328U,	// LDURQi
    2248182586U,	// LDURSBWi
    2248182586U,	// LDURSBXi
    2248188439U,	// LDURSHWi
    2248188439U,	// LDURSHXi
    2248193243U,	// LDURSWi
    2248189328U,	// LDURSi
    2248189328U,	// LDURWi
    2248189328U,	// LDURXi
    67151037U,	// LDXPW
    67151037U,	// LDXPX
    2248182533U,	// LDXRB
    2248188386U,	// LDXRH
    2248189347U,	// LDXRW
    2248189347U,	// LDXRX
    0U,	// LOADgot
    2214634370U,	// LSLVWr
    2214634370U,	// LSLVXr
    2214634863U,	// LSRVWr
    2214634863U,	// LSRVXr
    2214629829U,	// MADDWrrr
    2214629829U,	// MADDXrrr
    2281751127U,	// MLAv16i8
    2281760401U,	// MLAv2i32
    2281760401U,	// MLAv2i32_indexed
    2281755497U,	// MLAv4i16
    2281755497U,	// MLAv4i16_indexed
    2281762198U,	// MLAv4i32
    2281762198U,	// MLAv4i32_indexed
    2281757303U,	// MLAv8i16
    2281757303U,	// MLAv8i16_indexed
    2281752048U,	// MLAv8i8
    2281751750U,	// MLSv16i8
    2281761380U,	// MLSv2i32
    2281761380U,	// MLSv2i32_indexed
    2281756453U,	// MLSv4i16
    2281756453U,	// MLSv4i16_indexed
    2281763291U,	// MLSv4i32
    2281763291U,	// MLSv4i32_indexed
    2281758305U,	// MLSv8i16
    2281758305U,	// MLSv8i16_indexed
    2281752696U,	// MLSv8i8
    872456792U,	// MOVID
    939541393U,	// MOVIv16b_ns
    872435296U,	// MOVIv2d_ns
    3087034426U,	// MOVIv2i32
    3087034426U,	// MOVIv2s_msl
    3087029499U,	// MOVIv4i16
    3087036245U,	// MOVIv4i32
    3087036245U,	// MOVIv4s_msl
    939542245U,	// MOVIv8b_ns
    3087031305U,	// MOVIv8i16
    335585891U,	// MOVKWi
    335585891U,	// MOVKXi
    3087049836U,	// MOVNWi
    3087049836U,	// MOVNXi
    3087054190U,	// MOVZWi
    3087054190U,	// MOVZXi
    0U,	// MOVaddr
    0U,	// MOVaddrBA
    0U,	// MOVaddrCP
    0U,	// MOVaddrEXT
    0U,	// MOVaddrJT
    0U,	// MOVaddrTLS
    0U,	// MOVbaseTLS
    0U,	// MOVi32imm
    0U,	// MOVi64imm
    1006679027U,	// MRS
    599412U,	// MSR
    615796U,	// MSRpstateImm1
    615796U,	// MSRpstateImm4
    2214628177U,	// MSUBWrrr
    2214628177U,	// MSUBXrrr
    2147501053U,	// MULv16i8
    2147510420U,	// MULv2i32
    2147510420U,	// MULv2i32_indexed
    2147505493U,	// MULv4i16
    2147505493U,	// MULv4i16_indexed
    2147512435U,	// MULv4i32
    2147512435U,	// MULv4i32_indexed
    2147507469U,	// MULv8i16
    2147507469U,	// MULv8i16_indexed
    2147501895U,	// MULv8i8
    3087034398U,	// MVNIv2i32
    3087034398U,	// MVNIv2s_msl
    3087029471U,	// MVNIv4i16
    3087036217U,	// MVNIv4i32
    3087036217U,	// MVNIv4s_msl
    3087031277U,	// MVNIv8i16
    17260U,	// NEGv16i8
    67146284U,	// NEGv1i64
    26568U,	// NEGv2i32
    20010U,	// NEGv2i64
    21641U,	// NEGv4i16
    28375U,	// NEGv4i32
    23447U,	// NEGv8i16
    18116U,	// NEGv8i8
    17654U,	// NOTv16i8
    18595U,	// NOTv8i8
    0U,	// ORNWrr
    2214634543U,	// ORNWrs
    0U,	// ORNXrr
    2214634543U,	// ORNXrs
    2147501082U,	// ORNv16i8
    2147501989U,	// ORNv8i8
    2214634853U,	// ORRWri
    0U,	// ORRWrr
    2214634853U,	// ORRWrs
    2214634853U,	// ORRXri
    0U,	// ORRXrr
    2214634853U,	// ORRXrs
    2147501215U,	// ORRv16i8
    335604268U,	// ORRv2i32
    335599341U,	// ORRv4i16
    335606179U,	// ORRv4i32
    335601193U,	// ORRv8i16
    2147502165U,	// ORRv8i8
    67141753U,	// PACDA
    67144096U,	// PACDB
    1081621U,	// PACDZA
    1084287U,	// PACDZB
    2214625423U,	// PACGA
    67141782U,	// PACIA
    13825U,	// PACIA1716
    13946U,	// PACIASP
    13998U,	// PACIAZ
    67144118U,	// PACIB
    13845U,	// PACIB1716
    13962U,	// PACIBSP
    14012U,	// PACIBZ
    1081637U,	// PACIZA
    1084303U,	// PACIZB
    2147506517U,	// PMULLv16i8
    2147509467U,	// PMULLv1i64
    2147509456U,	// PMULLv2i64
    2147507418U,	// PMULLv8i8
    2147501052U,	// PMULv16i8
    2147501894U,	// PMULv8i8
    403284935U,	// PRFMl
    2248778695U,	// PRFMroW
    2248778695U,	// PRFMroX
    2248778695U,	// PRFMui
    2248778725U,	// PRFUMi
    2147510472U,	// RADDHNv2i64_v2i32
    2281761975U,	// RADDHNv2i64_v4i32
    2147505545U,	// RADDHNv4i32_v4i16
    2281757080U,	// RADDHNv4i32_v8i16
    2281750922U,	// RADDHNv8i16_v16i8
    2147501914U,	// RADDHNv8i16_v8i8
    67154984U,	// RBITWr
    67154984U,	// RBITXr
    17625U,	// RBITv16i8
    18569U,	// RBITv8i8
    1094670U,	// RET
    13911U,	// RETAA
    13918U,	// RETAB
    0U,	// RET_ReallyLR
    67141726U,	// REV16Wr
    67141726U,	// REV16Xr
    16952U,	// REV16v16i8
    17876U,	// REV16v8i8
    67141650U,	// REV32Xr
    16754U,	// REV32v16i8
    21287U,	// REV32v4i16
    22727U,	// REV32v8i16
    17829U,	// REV32v8i8
    16941U,	// REV64v16i8
    26228U,	// REV64v2i32
    21324U,	// REV64v4i16
    28025U,	// REV64v4i32
    23130U,	// REV64v8i16
    17866U,	// REV64v8i8
    67155088U,	// REVWr
    67155088U,	// REVXr
    2214634841U,	// RORVWr
    2214634841U,	// RORVXr
    2281750963U,	// RSHRNv16i8_shift
    2147510534U,	// RSHRNv2i32_shift
    2147505607U,	// RSHRNv4i16_shift
    2281762013U,	// RSHRNv4i32_shift
    2281757118U,	// RSHRNv8i16_shift
    2147501967U,	// RSHRNv8i8_shift
    2147510461U,	// RSUBHNv2i64_v2i32
    2281761963U,	// RSUBHNv2i64_v4i32
    2147505534U,	// RSUBHNv4i32_v4i16
    2281757068U,	// RSUBHNv4i32_v8i16
    2281750909U,	// RSUBHNv8i16_v16i8
    2147501903U,	// RSUBHNv8i16_v8i8
    2281756881U,	// SABALv16i8_v8i16
    2281754217U,	// SABALv2i32_v2i64
    2281762654U,	// SABALv4i16_v4i32
    2281753667U,	// SABALv4i32_v2i64
    2281761748U,	// SABALv8i16_v4i32
    2281757714U,	// SABALv8i8_v8i16
    2281751107U,	// SABAv16i8
    2281760382U,	// SABAv2i32
    2281755478U,	// SABAv4i16
    2281762179U,	// SABAv4i32
    2281757284U,	// SABAv8i16
    2281752030U,	// SABAv8i8
    2147506451U,	// SABDLv16i8_v8i16
    2147503793U,	// SABDLv2i32_v2i64
    2147512230U,	// SABDLv4i16_v4i32
    2147503250U,	// SABDLv4i32_v2i64
    2147511331U,	// SABDLv8i16_v4i32
    2147507278U,	// SABDLv8i8_v8i16
    2147500758U,	// SABDv16i8
    2147510028U,	// SABDv2i32
    2147505124U,	// SABDv4i16
    2147511835U,	// SABDv4i32
    2147506930U,	// SABDv8i16
    2147501646U,	// SABDv8i8
    134274406U,	// SADALPv16i8_v8i16
    134269948U,	// SADALPv2i32_v1i64
    134277481U,	// SADALPv4i16_v2i32
    134270917U,	// SADALPv4i32_v2i64
    134279392U,	// SADALPv8i16_v4i32
    134272554U,	// SADALPv8i8_v4i16
    23932U,	// SADDLPv16i8_v8i16
    19474U,	// SADDLPv2i32_v1i64
    27007U,	// SADDLPv4i16_v2i32
    20443U,	// SADDLPv4i32_v2i64
    28918U,	// SADDLPv8i16_v4i32
    22080U,	// SADDLPv8i8_v4i16
    34089U,	// SADDLVv16i8v
    38902U,	// SADDLVv4i16v
    45740U,	// SADDLVv4i32v
    40754U,	// SADDLVv8i16v
    35025U,	// SADDLVv8i8v
    2147506473U,	// SADDLv16i8_v8i16
    2147503813U,	// SADDLv2i32_v2i64
    2147512250U,	// SADDLv4i16_v4i32
    2147503272U,	// SADDLv4i32_v2i64
    2147511353U,	// SADDLv8i16_v4i32
    2147507298U,	// SADDLv8i8_v8i16
    2147506756U,	// SADDWv16i8_v8i16
    2147504493U,	// SADDWv2i32_v2i64
    2147513139U,	// SADDWv4i16_v4i32
    2147503435U,	// SADDWv4i32_v2i64
    2147511651U,	// SADDWv8i16_v4i32
    2147508153U,	// SADDWv8i8_v8i16
    2214638506U,	// SBCSWr
    2214638506U,	// SBCSXr
    2214628255U,	// SBCWr
    2214628255U,	// SBCXr
    2214634427U,	// SBFMWri
    2214634427U,	// SBFMXri
    2214629917U,	// SCVTFSWDri
    2214629917U,	// SCVTFSWHri
    2214629917U,	// SCVTFSWSri
    2214629917U,	// SCVTFSXDri
    2214629917U,	// SCVTFSXHri
    2214629917U,	// SCVTFSXSri
    67146269U,	// SCVTFUWDri
    67146269U,	// SCVTFUWHri
    67146269U,	// SCVTFUWSri
    67146269U,	// SCVTFUXDri
    67146269U,	// SCVTFUXHri
    67146269U,	// SCVTFUXSri
    2214629917U,	// SCVTFd
    2214629917U,	// SCVTFh
    2214629917U,	// SCVTFs
    67146269U,	// SCVTFv1i16
    67146269U,	// SCVTFv1i32
    67146269U,	// SCVTFv1i64
    26547U,	// SCVTFv2f32
    19989U,	// SCVTFv2f64
    2147510195U,	// SCVTFv2i32_shift
    2147503637U,	// SCVTFv2i64_shift
    21620U,	// SCVTFv4f16
    28354U,	// SCVTFv4f32
    2147505268U,	// SCVTFv4i16_shift
    2147512002U,	// SCVTFv4i32_shift
    23426U,	// SCVTFv8f16
    2147507074U,	// SCVTFv8i16_shift
    2214638747U,	// SDIVWr
    2214638747U,	// SDIVXr
    13988U,	// SDOT2S
    13988U,	// SDOT4S
    2281763904U,	// SDOTIDX2S
    2281763904U,	// SDOTIDX4S
    2416045568U,	// SHA1Crrr
    67146439U,	// SHA1Hrr
    2416046203U,	// SHA1Mrrr
    2416046284U,	// SHA1Prrr
    2281761656U,	// SHA1SU0rrr
    134278061U,	// SHA1SU1rr
    2416044999U,	// SHA256H2rrr
    2416045801U,	// SHA256Hrrr
    134278020U,	// SHA256SU0rr
    2281761721U,	// SHA256SU1rrr
    2147500802U,	// SHADDv16i8
    2147510077U,	// SHADDv2i32
    2147505173U,	// SHADDv4i16
    2147511884U,	// SHADDv4i32
    2147506979U,	// SHADDv8i16
    2147501686U,	// SHADDv8i8
    22848U,	// SHLLv16i8
    2147503914U,	// SHLLv2i32
    28703U,	// SHLLv4i16
    2147503295U,	// SHLLv4i32
    27728U,	// SHLLv8i16
    23751U,	// SHLLv8i8
    2214634250U,	// SHLd
    2147500957U,	// SHLv16i8_shift
    2147510341U,	// SHLv2i32_shift
    2147503835U,	// SHLv2i64_shift
    2147505414U,	// SHLv4i16_shift
    2147512272U,	// SHLv4i32_shift
    2147507320U,	// SHLv8i16_shift
    2147501808U,	// SHLv8i8_shift
    2281750937U,	// SHRNv16i8_shift
    2147510512U,	// SHRNv2i32_shift
    2147505585U,	// SHRNv4i16_shift
    2281761989U,	// SHRNv4i32_shift
    2281757094U,	// SHRNv8i16_shift
    2147501945U,	// SHRNv8i8_shift
    2147500682U,	// SHSUBv16i8
    2147509971U,	// SHSUBv2i32
    2147505067U,	// SHSUBv4i16
    2147511768U,	// SHSUBv4i32
    2147506873U,	// SHSUBv8i16
    2147501598U,	// SHSUBv8i8
    2416042566U,	// SLId
    2281751423U,	// SLIv16i8_shift
    2281760790U,	// SLIv2i32_shift
    2281754181U,	// SLIv2i64_shift
    2281755863U,	// SLIv4i16_shift
    2281762609U,	// SLIv4i32_shift
    2281757669U,	// SLIv8i16_shift
    2281752277U,	// SLIv8i8_shift
    2214634225U,	// SMADDLrrr
    2147501132U,	// SMAXPv16i8
    2147510760U,	// SMAXPv2i32
    2147505833U,	// SMAXPv4i16
    2147512671U,	// SMAXPv4i32
    2147507685U,	// SMAXPv8i16
    2147502090U,	// SMAXPv8i8
    34135U,	// SMAXVv16i8v
    38997U,	// SMAXVv4i16v
    45835U,	// SMAXVv4i32v
    40849U,	// SMAXVv8i16v
    35067U,	// SMAXVv8i8v
    2147501421U,	// SMAXv16i8
    2147511102U,	// SMAXv2i32
    2147506290U,	// SMAXv4i16
    2147513168U,	// SMAXv4i32
    2147508182U,	// SMAXv8i16
    2147502351U,	// SMAXv8i8
    84910U,	// SMC
    2147501101U,	// SMINPv16i8
    2147510711U,	// SMINPv2i32
    2147505784U,	// SMINPv4i16
    2147512622U,	// SMINPv4i32
    2147507636U,	// SMINPv8i16
    2147502062U,	// SMINPv8i8
    34113U,	// SMINVv16i8v
    38958U,	// SMINVv4i16v
    45796U,	// SMINVv4i32v
    40810U,	// SMINVv8i16v
    35047U,	// SMINVv8i8v
    2147501062U,	// SMINv16i8
    2147510492U,	// SMINv2i32
    2147505565U,	// SMINv4i16
    2147512495U,	// SMINv4i32
    2147507519U,	// SMINv8i16
    2147501925U,	// SMINv8i8
    2281756903U,	// SMLALv16i8_v8i16
    2281754249U,	// SMLALv2i32_indexed
    2281754249U,	// SMLALv2i32_v2i64
    2281762686U,	// SMLALv4i16_indexed
    2281762686U,	// SMLALv4i16_v4i32
    2281753702U,	// SMLALv4i32_indexed
    2281753702U,	// SMLALv4i32_v2i64
    2281761783U,	// SMLALv8i16_indexed
    2281761783U,	// SMLALv8i16_v4i32
    2281757734U,	// SMLALv8i8_v8i16
    2281757046U,	// SMLSLv16i8_v8i16
    2281754473U,	// SMLSLv2i32_indexed
    2281754473U,	// SMLSLv2i32_v2i64
    2281762910U,	// SMLSLv4i16_indexed
    2281762910U,	// SMLSLv4i16_v4i32
    2281753860U,	// SMLSLv4i32_indexed
    2281753860U,	// SMLSLv4i32_v2i64
    2281761941U,	// SMLSLv8i16_indexed
    2281761941U,	// SMLSLv8i16_v4i32
    2281757944U,	// SMLSLv8i8_v8i16
    37550U,	// SMOVvi16to32
    37550U,	// SMOVvi16to64
    42533U,	// SMOVvi32to64
    33084U,	// SMOVvi8to32
    33084U,	// SMOVvi8to64
    2214634201U,	// SMSUBLrrr
    2214633794U,	// SMULHrr
    2147506528U,	// SMULLv16i8_v8i16
    2147503945U,	// SMULLv2i32_indexed
    2147503945U,	// SMULLv2i32_v2i64
    2147512382U,	// SMULLv4i16_indexed
    2147512382U,	// SMULLv4i16_v4i32
    2147503329U,	// SMULLv4i32_indexed
    2147503329U,	// SMULLv4i32_v2i64
    2147511410U,	// SMULLv8i16_indexed
    2147511410U,	// SMULLv8i16_v4i32
    2147507428U,	// SMULLv8i8_v8i16
    17576U,	// SQABSv16i8
    67154845U,	// SQABSv1i16
    67154845U,	// SQABSv1i32
    67154845U,	// SQABSv1i64
    67154845U,	// SQABSv1i8
    27208U,	// SQABSv2i32
    20596U,	// SQABSv2i64
    22281U,	// SQABSv4i16
    29119U,	// SQABSv4i32
    24133U,	// SQABSv8i16
    18525U,	// SQABSv8i8
    2147500825U,	// SQADDv16i8
    2214629844U,	// SQADDv1i16
    2214629844U,	// SQADDv1i32
    2214629844U,	// SQADDv1i64
    2214629844U,	// SQADDv1i8
    2147510098U,	// SQADDv2i32
    2147503563U,	// SQADDv2i64
    2147505194U,	// SQADDv4i16
    2147511905U,	// SQADDv4i32
    2147507000U,	// SQADDv8i16
    2147501707U,	// SQADDv8i8
    2416042610U,	// SQDMLALi16
    2416042610U,	// SQDMLALi32
    2416038518U,	// SQDMLALv1i32_indexed
    2416043501U,	// SQDMLALv1i64_indexed
    2281754237U,	// SQDMLALv2i32_indexed
    2281754237U,	// SQDMLALv2i32_v2i64
    2281762674U,	// SQDMLALv4i16_indexed
    2281762674U,	// SQDMLALv4i16_v4i32
    2281753689U,	// SQDMLALv4i32_indexed
    2281753689U,	// SQDMLALv4i32_v2i64
    2281761770U,	// SQDMLALv8i16_indexed
    2281761770U,	// SQDMLALv8i16_v4i32
    2416042878U,	// SQDMLSLi16
    2416042878U,	// SQDMLSLi32
    2416038540U,	// SQDMLSLv1i32_indexed
    2416043523U,	// SQDMLSLv1i64_indexed
    2281754461U,	// SQDMLSLv2i32_indexed
    2281754461U,	// SQDMLSLv2i32_v2i64
    2281762898U,	// SQDMLSLv4i16_indexed
    2281762898U,	// SQDMLSLv4i16_v4i32
    2281753847U,	// SQDMLSLv4i32_indexed
    2281753847U,	// SQDMLSLv4i32_v2i64
    2281761928U,	// SQDMLSLv8i16_indexed
    2281761928U,	// SQDMLSLv8i16_v4i32
    2214633775U,	// SQDMULHv1i16
    2214629971U,	// SQDMULHv1i16_indexed
    2214633775U,	// SQDMULHv1i32
    2214634954U,	// SQDMULHv1i32_indexed
    2147510247U,	// SQDMULHv2i32
    2147510247U,	// SQDMULHv2i32_indexed
    2147505320U,	// SQDMULHv4i16
    2147505320U,	// SQDMULHv4i16_indexed
    2147512066U,	// SQDMULHv4i32
    2147512066U,	// SQDMULHv4i32_indexed
    2147507126U,	// SQDMULHv8i16
    2147507126U,	// SQDMULHv8i16_indexed
    2214634304U,	// SQDMULLi16
    2214634304U,	// SQDMULLi32
    2214630017U,	// SQDMULLv1i32_indexed
    2214635000U,	// SQDMULLv1i64_indexed
    2147503933U,	// SQDMULLv2i32_indexed
    2147503933U,	// SQDMULLv2i32_v2i64
    2147512370U,	// SQDMULLv4i16_indexed
    2147512370U,	// SQDMULLv4i16_v4i32
    2147503316U,	// SQDMULLv4i32_indexed
    2147503316U,	// SQDMULLv4i32_v2i64
    2147511397U,	// SQDMULLv8i16_indexed
    2147511397U,	// SQDMULLv8i16_v4i32
    17258U,	// SQNEGv16i8
    67146289U,	// SQNEGv1i16
    67146289U,	// SQNEGv1i32
    67146289U,	// SQNEGv1i64
    67146289U,	// SQNEGv1i8
    26576U,	// SQNEGv2i32
    20018U,	// SQNEGv2i64
    21649U,	// SQNEGv4i16
    28383U,	// SQNEGv4i32
    23455U,	// SQNEGv8i16
    18114U,	// SQNEGv8i8
    2416038471U,	// SQRDMLAHi16_indexed
    2416043454U,	// SQRDMLAHi32_indexed
    2416042009U,	// SQRDMLAHv1i16
    2416042009U,	// SQRDMLAHv1i32
    2281760730U,	// SQRDMLAHv2i32
    2281760730U,	// SQRDMLAHv2i32_indexed
    2281755803U,	// SQRDMLAHv4i16
    2281755803U,	// SQRDMLAHv4i16_indexed
    2281762549U,	// SQRDMLAHv4i32
    2281762549U,	// SQRDMLAHv4i32_indexed
    2281757609U,	// SQRDMLAHv8i16
    2281757609U,	// SQRDMLAHv8i16_indexed
    2416038506U,	// SQRDMLSHi16_indexed
    2416043489U,	// SQRDMLSHi32_indexed
    2416042494U,	// SQRDMLSHv1i16
    2416042494U,	// SQRDMLSHv1i32
    2281760768U,	// SQRDMLSHv2i32
    2281760768U,	// SQRDMLSHv2i32_indexed
    2281755841U,	// SQRDMLSHv4i16
    2281755841U,	// SQRDMLSHv4i16_indexed
    2281762587U,	// SQRDMLSHv4i32
    2281762587U,	// SQRDMLSHv4i32_indexed
    2281757647U,	// SQRDMLSHv8i16
    2281757647U,	// SQRDMLSHv8i16_indexed
    2214633784U,	// SQRDMULHv1i16
    2214629982U,	// SQRDMULHv1i16_indexed
    2214633784U,	// SQRDMULHv1i32
    2214634965U,	// SQRDMULHv1i32_indexed
    2147510259U,	// SQRDMULHv2i32
    2147510259U,	// SQRDMULHv2i32_indexed
    2147505332U,	// SQRDMULHv4i16
    2147505332U,	// SQRDMULHv4i16_indexed
    2147512078U,	// SQRDMULHv4i32
    2147512078U,	// SQRDMULHv4i32_indexed
    2147507138U,	// SQRDMULHv8i16
    2147507138U,	// SQRDMULHv8i16_indexed
    2147500977U,	// SQRSHLv16i8
    2214634262U,	// SQRSHLv1i16
    2214634262U,	// SQRSHLv1i32
    2214634262U,	// SQRSHLv1i64
    2214634262U,	// SQRSHLv1i8
    2147510359U,	// SQRSHLv2i32
    2147503853U,	// SQRSHLv2i64
    2147505432U,	// SQRSHLv4i16
    2147512290U,	// SQRSHLv4i32
    2147507338U,	// SQRSHLv8i16
    2147501826U,	// SQRSHLv8i8
    2214634525U,	// SQRSHRNb
    2214634525U,	// SQRSHRNh
    2214634525U,	// SQRSHRNs
    2281750961U,	// SQRSHRNv16i8_shift
    2147510532U,	// SQRSHRNv2i32_shift
    2147505605U,	// SQRSHRNv4i16_shift
    2281762011U,	// SQRSHRNv4i32_shift
    2281757116U,	// SQRSHRNv8i16_shift
    2147501965U,	// SQRSHRNv8i8_shift
    2214634586U,	// SQRSHRUNb
    2214634586U,	// SQRSHRUNh
    2214634586U,	// SQRSHRUNs
    2281751037U,	// SQRSHRUNv16i8_shift
    2147510599U,	// SQRSHRUNv2i32_shift
    2147505672U,	// SQRSHRUNv4i16_shift
    2281762081U,	// SQRSHRUNv4i32_shift
    2281757186U,	// SQRSHRUNv8i16_shift
    2147502029U,	// SQRSHRUNv8i8_shift
    2214638696U,	// SQSHLUb
    2214638696U,	// SQSHLUd
    2214638696U,	// SQSHLUh
    2214638696U,	// SQSHLUs
    2147501331U,	// SQSHLUv16i8_shift
    2147511020U,	// SQSHLUv2i32_shift
    2147504400U,	// SQSHLUv2i64_shift
    2147506093U,	// SQSHLUv4i16_shift
    2147512931U,	// SQSHLUv4i32_shift
    2147507945U,	// SQSHLUv8i16_shift
    2147502269U,	// SQSHLUv8i8_shift
    2214634248U,	// SQSHLb
    2214634248U,	// SQSHLd
    2214634248U,	// SQSHLh
    2214634248U,	// SQSHLs
    2147500955U,	// SQSHLv16i8
    2147500955U,	// SQSHLv16i8_shift
    2214634248U,	// SQSHLv1i16
    2214634248U,	// SQSHLv1i32
    2214634248U,	// SQSHLv1i64
    2214634248U,	// SQSHLv1i8
    2147510339U,	// SQSHLv2i32
    2147510339U,	// SQSHLv2i32_shift
    2147503833U,	// SQSHLv2i64
    2147503833U,	// SQSHLv2i64_shift
    2147505412U,	// SQSHLv4i16
    2147505412U,	// SQSHLv4i16_shift
    2147512270U,	// SQSHLv4i32
    2147512270U,	// SQSHLv4i32_shift
    2147507318U,	// SQSHLv8i16
    2147507318U,	// SQSHLv8i16_shift
    2147501806U,	// SQSHLv8i8
    2147501806U,	// SQSHLv8i8_shift
    2214634509U,	// SQSHRNb
    2214634509U,	// SQSHRNh
    2214634509U,	// SQSHRNs
    2281750935U,	// SQSHRNv16i8_shift
    2147510510U,	// SQSHRNv2i32_shift
    2147505583U,	// SQSHRNv4i16_shift
    2281761987U,	// SQSHRNv4i32_shift
    2281757092U,	// SQSHRNv8i16_shift
    2147501943U,	// SQSHRNv8i8_shift
    2214634577U,	// SQSHRUNb
    2214634577U,	// SQSHRUNh
    2214634577U,	// SQSHRUNs
    2281751023U,	// SQSHRUNv16i8_shift
    2147510587U,	// SQSHRUNv2i32_shift
    2147505660U,	// SQSHRUNv4i16_shift
    2281762068U,	// SQSHRUNv4i32_shift
    2281757173U,	// SQSHRUNv8i16_shift
    2147502017U,	// SQSHRUNv8i8_shift
    2147500704U,	// SQSUBv16i8
    2214628191U,	// SQSUBv1i16
    2214628191U,	// SQSUBv1i32
    2214628191U,	// SQSUBv1i64
    2214628191U,	// SQSUBv1i8
    2147509991U,	// SQSUBv2i32
    2147503524U,	// SQSUBv2i64
    2147505087U,	// SQSUBv4i16
    2147511788U,	// SQSUBv4i32
    2147506893U,	// SQSUBv8i16
    2147501618U,	// SQSUBv8i8
    134267351U,	// SQXTNv16i8
    67150915U,	// SQXTNv1i16
    67150915U,	// SQXTNv1i32
    67150915U,	// SQXTNv1i8
    26919U,	// SQXTNv2i32
    21992U,	// SQXTNv4i16
    134278398U,	// SQXTNv4i32
    134273503U,	// SQXTNv8i16
    18349U,	// SQXTNv8i8
    134267404U,	// SQXTUNv16i8
    67150948U,	// SQXTUNv1i16
    67150948U,	// SQXTUNv1i32
    67150948U,	// SQXTUNv1i8
    26964U,	// SQXTUNv2i32
    22037U,	// SQXTUNv4i16
    134278447U,	// SQXTUNv4i32
    134273552U,	// SQXTUNv8i16
    18394U,	// SQXTUNv8i8
    2147500778U,	// SRHADDv16i8
    2147510055U,	// SRHADDv2i32
    2147505151U,	// SRHADDv4i16
    2147511862U,	// SRHADDv4i32
    2147506957U,	// SRHADDv8i16
    2147501664U,	// SRHADDv8i8
    2416042571U,	// SRId
    2281751432U,	// SRIv16i8_shift
    2281760807U,	// SRIv2i32_shift
    2281754189U,	// SRIv2i64_shift
    2281755880U,	// SRIv4i16_shift
    2281762626U,	// SRIv4i32_shift
    2281757686U,	// SRIv8i16_shift
    2281752285U,	// SRIv8i8_shift
    2147501001U,	// SRSHLv16i8
    2214634278U,	// SRSHLv1i64
    2147510381U,	// SRSHLv2i32
    2147503875U,	// SRSHLv2i64
    2147505454U,	// SRSHLv4i16
    2147512312U,	// SRSHLv4i32
    2147507360U,	// SRSHLv8i16
    2147501848U,	// SRSHLv8i8
    2214634783U,	// SRSHRd
    2147501164U,	// SRSHRv16i8_shift
    2147510790U,	// SRSHRv2i32_shift
    2147504186U,	// SRSHRv2i64_shift
    2147505863U,	// SRSHRv4i16_shift
    2147512701U,	// SRSHRv4i32_shift
    2147507715U,	// SRSHRv8i16_shift
    2147502119U,	// SRSHRv8i8_shift
    2416034003U,	// SRSRAd
    2281751136U,	// SRSRAv16i8_shift
    2281760409U,	// SRSRAv2i32_shift
    2281753962U,	// SRSRAv2i64_shift
    2281755505U,	// SRSRAv4i16_shift
    2281762206U,	// SRSRAv4i32_shift
    2281757311U,	// SRSRAv8i16_shift
    2281752056U,	// SRSRAv8i8_shift
    2147506495U,	// SSHLLv16i8_shift
    2147503913U,	// SSHLLv2i32_shift
    2147512350U,	// SSHLLv4i16_shift
    2147503294U,	// SSHLLv4i32_shift
    2147511375U,	// SSHLLv8i16_shift
    2147507398U,	// SSHLLv8i8_shift
    2147501023U,	// SSHLv16i8
    2214634292U,	// SSHLv1i64
    2147510401U,	// SSHLv2i32
    2147503895U,	// SSHLv2i64
    2147505474U,	// SSHLv4i16
    2147512332U,	// SSHLv4i32
    2147507380U,	// SSHLv8i16
    2147501868U,	// SSHLv8i8
    2214634797U,	// SSHRd
    2147501186U,	// SSHRv16i8_shift
    2147510810U,	// SSHRv2i32_shift
    2147504206U,	// SSHRv2i64_shift
    2147505883U,	// SSHRv4i16_shift
    2147512721U,	// SSHRv4i32_shift
    2147507735U,	// SSHRv8i16_shift
    2147502139U,	// SSHRv8i8_shift
    2416034017U,	// SSRAd
    2281751158U,	// SSRAv16i8_shift
    2281760429U,	// SSRAv2i32_shift
    2281753982U,	// SSRAv2i64_shift
    2281755525U,	// SSRAv4i16_shift
    2281762226U,	// SSRAv4i32_shift
    2281757331U,	// SSRAv8i16_shift
    2281752076U,	// SSRAv8i8_shift
    2147506429U,	// SSUBLv16i8_v8i16
    2147503773U,	// SSUBLv2i32_v2i64
    2147512210U,	// SSUBLv4i16_v4i32
    2147503228U,	// SSUBLv4i32_v2i64
    2147511309U,	// SSUBLv8i16_v4i32
    2147507258U,	// SSUBLv8i8_v8i16
    2147506734U,	// SSUBWv16i8_v8i16
    2147504473U,	// SSUBWv2i32_v2i64
    2147513119U,	// SSUBWv4i16_v4i32
    2147503413U,	// SSUBWv4i32_v2i64
    2147511629U,	// SSUBWv8i16_v4i32
    2147508133U,	// SSUBWv8i8_v8i16
    196621U,	// ST1Fourv16b
    9650189U,	// ST1Fourv16b_POST
    229389U,	// ST1Fourv1d
    10731533U,	// ST1Fourv1d_POST
    262157U,	// ST1Fourv2d
    9715725U,	// ST1Fourv2d_POST
    294925U,	// ST1Fourv2s
    10797069U,	// ST1Fourv2s_POST
    327693U,	// ST1Fourv4h
    10829837U,	// ST1Fourv4h_POST
    360461U,	// ST1Fourv4s
    9814029U,	// ST1Fourv4s_POST
    393229U,	// ST1Fourv8b
    10895373U,	// ST1Fourv8b_POST
    425997U,	// ST1Fourv8h
    9879565U,	// ST1Fourv8h_POST
    196621U,	// ST1Onev16b
    11747341U,	// ST1Onev16b_POST
    229389U,	// ST1Onev1d
    12828685U,	// ST1Onev1d_POST
    262157U,	// ST1Onev2d
    11812877U,	// ST1Onev2d_POST
    294925U,	// ST1Onev2s
    12894221U,	// ST1Onev2s_POST
    327693U,	// ST1Onev4h
    12926989U,	// ST1Onev4h_POST
    360461U,	// ST1Onev4s
    11911181U,	// ST1Onev4s_POST
    393229U,	// ST1Onev8b
    12992525U,	// ST1Onev8b_POST
    425997U,	// ST1Onev8h
    11976717U,	// ST1Onev8h_POST
    196621U,	// ST1Threev16b
    16990221U,	// ST1Threev16b_POST
    229389U,	// ST1Threev1d
    18071565U,	// ST1Threev1d_POST
    262157U,	// ST1Threev2d
    17055757U,	// ST1Threev2d_POST
    294925U,	// ST1Threev2s
    18137101U,	// ST1Threev2s_POST
    327693U,	// ST1Threev4h
    18169869U,	// ST1Threev4h_POST
    360461U,	// ST1Threev4s
    17154061U,	// ST1Threev4s_POST
    393229U,	// ST1Threev8b
    18235405U,	// ST1Threev8b_POST
    425997U,	// ST1Threev8h
    17219597U,	// ST1Threev8h_POST
    196621U,	// ST1Twov16b
    10698765U,	// ST1Twov16b_POST
    229389U,	// ST1Twov1d
    11780109U,	// ST1Twov1d_POST
    262157U,	// ST1Twov2d
    10764301U,	// ST1Twov2d_POST
    294925U,	// ST1Twov2s
    11845645U,	// ST1Twov2s_POST
    327693U,	// ST1Twov4h
    11878413U,	// ST1Twov4h_POST
    360461U,	// ST1Twov4s
    10862605U,	// ST1Twov4s_POST
    393229U,	// ST1Twov8b
    11943949U,	// ST1Twov8b_POST
    425997U,	// ST1Twov8h
    10928141U,	// ST1Twov8h_POST
    638989U,	// ST1i16
    1108803597U,	// ST1i16_POST
    655373U,	// ST1i32
    1175945229U,	// ST1i32_POST
    671757U,	// ST1i64
    1243086861U,	// ST1i64_POST
    688141U,	// ST1i8
    1310228493U,	// ST1i8_POST
    196670U,	// ST2Twov16b
    10698814U,	// ST2Twov16b_POST
    262206U,	// ST2Twov2d
    10764350U,	// ST2Twov2d_POST
    294974U,	// ST2Twov2s
    11845694U,	// ST2Twov2s_POST
    327742U,	// ST2Twov4h
    11878462U,	// ST2Twov4h_POST
    360510U,	// ST2Twov4s
    10862654U,	// ST2Twov4s_POST
    393278U,	// ST2Twov8b
    11943998U,	// ST2Twov8b_POST
    426046U,	// ST2Twov8h
    10928190U,	// ST2Twov8h_POST
    639038U,	// ST2i16
    1175912510U,	// ST2i16_POST
    655422U,	// ST2i32
    1243054142U,	// ST2i32_POST
    671806U,	// ST2i64
    1377304638U,	// ST2i64_POST
    688190U,	// ST2i8
    1108901950U,	// ST2i8_POST
    196687U,	// ST3Threev16b
    16990287U,	// ST3Threev16b_POST
    262223U,	// ST3Threev2d
    17055823U,	// ST3Threev2d_POST
    294991U,	// ST3Threev2s
    18137167U,	// ST3Threev2s_POST
    327759U,	// ST3Threev4h
    18169935U,	// ST3Threev4h_POST
    360527U,	// ST3Threev4s
    17154127U,	// ST3Threev4s_POST
    393295U,	// ST3Threev8b
    18235471U,	// ST3Threev8b_POST
    426063U,	// ST3Threev8h
    17219663U,	// ST3Threev8h_POST
    639055U,	// ST3i16
    1444347983U,	// ST3i16_POST
    655439U,	// ST3i32
    1511489615U,	// ST3i32_POST
    671823U,	// ST3i64
    1578631247U,	// ST3i64_POST
    688207U,	// ST3i8
    1645772879U,	// ST3i8_POST
    196697U,	// ST4Fourv16b
    9650265U,	// ST4Fourv16b_POST
    262233U,	// ST4Fourv2d
    9715801U,	// ST4Fourv2d_POST
    295001U,	// ST4Fourv2s
    10797145U,	// ST4Fourv2s_POST
    327769U,	// ST4Fourv4h
    10829913U,	// ST4Fourv4h_POST
    360537U,	// ST4Fourv4s
    9814105U,	// ST4Fourv4s_POST
    393305U,	// ST4Fourv8b
    10895449U,	// ST4Fourv8b_POST
    426073U,	// ST4Fourv8h
    9879641U,	// ST4Fourv8h_POST
    639065U,	// ST4i16
    1243021401U,	// ST4i16_POST
    655449U,	// ST4i32
    1377271897U,	// ST4i32_POST
    671833U,	// ST4i64
    1712848985U,	// ST4i64_POST
    688217U,	// ST4i8
    1176010841U,	// ST4i8_POST
    2248182460U,	// STLLRB
    2248188313U,	// STLLRH
    2248189253U,	// STLLRW
    2248189253U,	// STLLRX
    2248182468U,	// STLRB
    2248188321U,	// STLRH
    2248189260U,	// STLRW
    2248189260U,	// STLRX
    2214634691U,	// STLXPW
    2214634691U,	// STLXPX
    67144460U,	// STLXRB
    67150313U,	// STLXRH
    67151273U,	// STLXRW
    67151273U,	// STLXRX
    67150994U,	// STNPDi
    67150994U,	// STNPQi
    67150994U,	// STNPSi
    67150994U,	// STNPWi
    67150994U,	// STNPXi
    67151020U,	// STPDi
    268559532U,	// STPDpost
    268559532U,	// STPDpre
    67151020U,	// STPQi
    268559532U,	// STPQpost
    268559532U,	// STPQpre
    67151020U,	// STPSi
    268559532U,	// STPSpost
    268559532U,	// STPSpre
    67151020U,	// STPWi
    268559532U,	// STPWpost
    268559532U,	// STPWpre
    67151020U,	// STPXi
    268559532U,	// STPXpost
    268559532U,	// STPXpre
    302107362U,	// STRBBpost
    2449591010U,	// STRBBpre
    2248182498U,	// STRBBroW
    2248182498U,	// STRBBroX
    2248182498U,	// STRBBui
    302114175U,	// STRBpost
    2449597823U,	// STRBpre
    2248189311U,	// STRBroW
    2248189311U,	// STRBroX
    2248189311U,	// STRBui
    302114175U,	// STRDpost
    2449597823U,	// STRDpre
    2248189311U,	// STRDroW
    2248189311U,	// STRDroX
    2248189311U,	// STRDui
    302113215U,	// STRHHpost
    2449596863U,	// STRHHpre
    2248188351U,	// STRHHroW
    2248188351U,	// STRHHroX
    2248188351U,	// STRHHui
    302114175U,	// STRHpost
    2449597823U,	// STRHpre
    2248189311U,	// STRHroW
    2248189311U,	// STRHroX
    2248189311U,	// STRHui
    302114175U,	// STRQpost
    2449597823U,	// STRQpre
    2248189311U,	// STRQroW
    2248189311U,	// STRQroX
    2248189311U,	// STRQui
    302114175U,	// STRSpost
    2449597823U,	// STRSpre
    2248189311U,	// STRSroW
    2248189311U,	// STRSroX
    2248189311U,	// STRSui
    302114175U,	// STRWpost
    2449597823U,	// STRWpre
    2248189311U,	// STRWroW
    2248189311U,	// STRWroX
    2248189311U,	// STRWui
    302114175U,	// STRXpost
    2449597823U,	// STRXpre
    2248189311U,	// STRXroW
    2248189311U,	// STRXroX
    2248189311U,	// STRXui
    2248182504U,	// STTRBi
    2248188357U,	// STTRHi
    2248189316U,	// STTRWi
    2248189316U,	// STTRXi
    2248182518U,	// STURBBi
    2248189334U,	// STURBi
    2248189334U,	// STURDi
    2248188371U,	// STURHHi
    2248189334U,	// STURHi
    2248189334U,	// STURQi
    2248189334U,	// STURSi
    2248189334U,	// STURWi
    2248189334U,	// STURXi
    2214634698U,	// STXPW
    2214634698U,	// STXPX
    67144468U,	// STXRB
    67150321U,	// STXRH
    67151280U,	// STXRW
    67151280U,	// STXRX
    2147510462U,	// SUBHNv2i64_v2i32
    2281761964U,	// SUBHNv2i64_v4i32
    2147505535U,	// SUBHNv4i32_v4i16
    2281757069U,	// SUBHNv4i32_v8i16
    2281750910U,	// SUBHNv8i16_v16i8
    2147501904U,	// SUBHNv8i16_v8i8
    2214638500U,	// SUBSWri
    0U,	// SUBSWrr
    2214638500U,	// SUBSWrs
    2214638500U,	// SUBSWrx
    2214638500U,	// SUBSXri
    0U,	// SUBSXrr
    2214638500U,	// SUBSXrs
    2214638500U,	// SUBSXrx
    2214638500U,	// SUBSXrx64
    2214628171U,	// SUBWri
    0U,	// SUBWrr
    2214628171U,	// SUBWrs
    2214628171U,	// SUBWrx
    2214628171U,	// SUBXri
    0U,	// SUBXrr
    2214628171U,	// SUBXrs
    2214628171U,	// SUBXrx
    2214628171U,	// SUBXrx64
    2147500684U,	// SUBv16i8
    2214628171U,	// SUBv1i64
    2147509963U,	// SUBv2i32
    2147503516U,	// SUBv2i64
    2147505059U,	// SUBv4i16
    2147511760U,	// SUBv4i32
    2147506865U,	// SUBv8i16
    2147501600U,	// SUBv8i8
    134267684U,	// SUQADDv16i8
    268554715U,	// SUQADDv1i16
    268554715U,	// SUQADDv1i32
    268554715U,	// SUQADDv1i64
    268554715U,	// SUQADDv1i8
    134276956U,	// SUQADDv2i32
    134270421U,	// SUQADDv2i64
    134272052U,	// SUQADDv4i16
    134278763U,	// SUQADDv4i32
    134273858U,	// SUQADDv8i16
    134268565U,	// SUQADDv8i8
    84927U,	// SVC
    805423430U,	// SWPAB
    805429303U,	// SWPAH
    805423588U,	// SWPALB
    805429413U,	// SWPALH
    805429911U,	// SWPALW
    805429911U,	// SWPALX
    805421245U,	// SWPAW
    805421245U,	// SWPAX
    805423769U,	// SWPB
    805429622U,	// SWPH
    805423685U,	// SWPLB
    805429510U,	// SWPLH
    805430114U,	// SWPLW
    805430114U,	// SWPLX
    805430449U,	// SWPW
    805430449U,	// SWPX
    2214634375U,	// SYSLxt
    1744876545U,	// SYSxt
    3995099860U,	// TBLv16i8Four
    3995099860U,	// TBLv16i8One
    3995099860U,	// TBLv16i8Three
    3995099860U,	// TBLv16i8Two
    1848664788U,	// TBLv8i8Four
    1848664788U,	// TBLv8i8One
    1848664788U,	// TBLv8i8Three
    1848664788U,	// TBLv8i8Two
    2214638944U,	// TBNZW
    2214638944U,	// TBNZX
    4062246145U,	// TBXv16i8Four
    4062246145U,	// TBXv16i8One
    4062246145U,	// TBXv16i8Three
    4062246145U,	// TBXv16i8Two
    1915811073U,	// TBXv8i8Four
    1915811073U,	// TBXv8i8One
    1915811073U,	// TBXv8i8Three
    1915811073U,	// TBXv8i8Two
    2214638928U,	// TBZW
    2214638928U,	// TBZX
    0U,	// TCRETURNdi
    0U,	// TCRETURNri
    1095028U,	// TLSDESCCALL
    0U,	// TLSDESC_CALLSEQ
    2147500372U,	// TRN1v16i8
    2147509822U,	// TRN1v2i32
    2147503144U,	// TRN1v2i64
    2147504908U,	// TRN1v4i16
    2147511186U,	// TRN1v4i32
    2147506348U,	// TRN1v8i16
    2147501450U,	// TRN1v8i8
    2147500493U,	// TRN2v16i8
    2147509849U,	// TRN2v2i32
    2147503386U,	// TRN2v2i64
    2147504945U,	// TRN2v4i16
    2147511541U,	// TRN2v4i32
    2147506646U,	// TRN2v8i16
    2147501487U,	// TRN2v8i8
    2281756892U,	// UABALv16i8_v8i16
    2281754227U,	// UABALv2i32_v2i64
    2281762664U,	// UABALv4i16_v4i32
    2281753678U,	// UABALv4i32_v2i64
    2281761759U,	// UABALv8i16_v4i32
    2281757724U,	// UABALv8i8_v8i16
    2281751117U,	// UABAv16i8
    2281760391U,	// UABAv2i32
    2281755487U,	// UABAv4i16
    2281762188U,	// UABAv4i32
    2281757293U,	// UABAv8i16
    2281752039U,	// UABAv8i8
    2147506462U,	// UABDLv16i8_v8i16
    2147503803U,	// UABDLv2i32_v2i64
    2147512240U,	// UABDLv4i16_v4i32
    2147503261U,	// UABDLv4i32_v2i64
    2147511342U,	// UABDLv8i16_v4i32
    2147507288U,	// UABDLv8i8_v8i16
    2147500768U,	// UABDv16i8
    2147510037U,	// UABDv2i32
    2147505133U,	// UABDv4i16
    2147511844U,	// UABDv4i32
    2147506939U,	// UABDv8i16
    2147501655U,	// UABDv8i8
    134274417U,	// UADALPv16i8_v8i16
    134269959U,	// UADALPv2i32_v1i64
    134277492U,	// UADALPv4i16_v2i32
    134270928U,	// UADALPv4i32_v2i64
    134279403U,	// UADALPv8i16_v4i32
    134272565U,	// UADALPv8i8_v4i16
    23943U,	// UADDLPv16i8_v8i16
    19485U,	// UADDLPv2i32_v1i64
    27018U,	// UADDLPv4i16_v2i32
    20454U,	// UADDLPv4i32_v2i64
    28929U,	// UADDLPv8i16_v4i32
    22091U,	// UADDLPv8i8_v4i16
    34101U,	// UADDLVv16i8v
    38913U,	// UADDLVv4i16v
    45751U,	// UADDLVv4i32v
    40765U,	// UADDLVv8i16v
    35036U,	// UADDLVv8i8v
    2147506484U,	// UADDLv16i8_v8i16
    2147503823U,	// UADDLv2i32_v2i64
    2147512260U,	// UADDLv4i16_v4i32
    2147503283U,	// UADDLv4i32_v2i64
    2147511364U,	// UADDLv8i16_v4i32
    2147507308U,	// UADDLv8i8_v8i16
    2147506767U,	// UADDWv16i8_v8i16
    2147504503U,	// UADDWv2i32_v2i64
    2147513149U,	// UADDWv4i16_v4i32
    2147503446U,	// UADDWv4i32_v2i64
    2147511662U,	// UADDWv8i16_v4i32
    2147508163U,	// UADDWv8i8_v8i16
    2214634433U,	// UBFMWri
    2214634433U,	// UBFMXri
    2214629924U,	// UCVTFSWDri
    2214629924U,	// UCVTFSWHri
    2214629924U,	// UCVTFSWSri
    2214629924U,	// UCVTFSXDri
    2214629924U,	// UCVTFSXHri
    2214629924U,	// UCVTFSXSri
    67146276U,	// UCVTFUWDri
    67146276U,	// UCVTFUWHri
    67146276U,	// UCVTFUWSri
    67146276U,	// UCVTFUXDri
    67146276U,	// UCVTFUXHri
    67146276U,	// UCVTFUXSri
    2214629924U,	// UCVTFd
    2214629924U,	// UCVTFh
    2214629924U,	// UCVTFs
    67146276U,	// UCVTFv1i16
    67146276U,	// UCVTFv1i32
    67146276U,	// UCVTFv1i64
    26557U,	// UCVTFv2f32
    19999U,	// UCVTFv2f64
    2147510205U,	// UCVTFv2i32_shift
    2147503647U,	// UCVTFv2i64_shift
    21630U,	// UCVTFv4f16
    28364U,	// UCVTFv4f32
    2147505278U,	// UCVTFv4i16_shift
    2147512012U,	// UCVTFv4i32_shift
    23436U,	// UCVTFv8f16
    2147507084U,	// UCVTFv8i16_shift
    2214638753U,	// UDIVWr
    2214638753U,	// UDIVXr
    13993U,	// UDOT2S
    13993U,	// UDOT4S
    2281763910U,	// UDOTIDX2S
    2281763910U,	// UDOTIDX4S
    2147500813U,	// UHADDv16i8
    2147510087U,	// UHADDv2i32
    2147505183U,	// UHADDv4i16
    2147511894U,	// UHADDv4i32
    2147506989U,	// UHADDv8i16
    2147501696U,	// UHADDv8i8
    2147500693U,	// UHSUBv16i8
    2147509981U,	// UHSUBv2i32
    2147505077U,	// UHSUBv4i16
    2147511778U,	// UHSUBv4i32
    2147506883U,	// UHSUBv8i16
    2147501608U,	// UHSUBv8i8
    2214634233U,	// UMADDLrrr
    2147501143U,	// UMAXPv16i8
    2147510770U,	// UMAXPv2i32
    2147505843U,	// UMAXPv4i16
    2147512681U,	// UMAXPv4i32
    2147507695U,	// UMAXPv8i16
    2147502100U,	// UMAXPv8i8
    34146U,	// UMAXVv16i8v
    39007U,	// UMAXVv4i16v
    45845U,	// UMAXVv4i32v
    40859U,	// UMAXVv8i16v
    35077U,	// UMAXVv8i8v
    2147501431U,	// UMAXv16i8
    2147511111U,	// UMAXv2i32
    2147506299U,	// UMAXv4i16
    2147513177U,	// UMAXv4i32
    2147508191U,	// UMAXv8i16
    2147502360U,	// UMAXv8i8
    2147501112U,	// UMINPv16i8
    2147510721U,	// UMINPv2i32
    2147505794U,	// UMINPv4i16
    2147512632U,	// UMINPv4i32
    2147507646U,	// UMINPv8i16
    2147502072U,	// UMINPv8i8
    34124U,	// UMINVv16i8v
    38968U,	// UMINVv4i16v
    45806U,	// UMINVv4i32v
    40820U,	// UMINVv8i16v
    35057U,	// UMINVv8i8v
    2147501072U,	// UMINv16i8
    2147510501U,	// UMINv2i32
    2147505574U,	// UMINv4i16
    2147512504U,	// UMINv4i32
    2147507528U,	// UMINv8i16
    2147501934U,	// UMINv8i8
    2281756914U,	// UMLALv16i8_v8i16
    2281754259U,	// UMLALv2i32_indexed
    2281754259U,	// UMLALv2i32_v2i64
    2281762696U,	// UMLALv4i16_indexed
    2281762696U,	// UMLALv4i16_v4i32
    2281753713U,	// UMLALv4i32_indexed
    2281753713U,	// UMLALv4i32_v2i64
    2281761794U,	// UMLALv8i16_indexed
    2281761794U,	// UMLALv8i16_v4i32
    2281757744U,	// UMLALv8i8_v8i16
    2281757057U,	// UMLSLv16i8_v8i16
    2281754483U,	// UMLSLv2i32_indexed
    2281754483U,	// UMLSLv2i32_v2i64
    2281762920U,	// UMLSLv4i16_indexed
    2281762920U,	// UMLSLv4i16_v4i32
    2281753871U,	// UMLSLv4i32_indexed
    2281753871U,	// UMLSLv4i32_v2i64
    2281761952U,	// UMLSLv8i16_indexed
    2281761952U,	// UMLSLv8i16_v4i32
    2281757954U,	// UMLSLv8i8_v8i16
    37558U,	// UMOVvi16
    42541U,	// UMOVvi32
    35819U,	// UMOVvi64
    33092U,	// UMOVvi8
    2214634209U,	// UMSUBLrrr
    2214633801U,	// UMULHrr
    2147506539U,	// UMULLv16i8_v8i16
    2147503955U,	// UMULLv2i32_indexed
    2147503955U,	// UMULLv2i32_v2i64
    2147512392U,	// UMULLv4i16_indexed
    2147512392U,	// UMULLv4i16_v4i32
    2147503340U,	// UMULLv4i32_indexed
    2147503340U,	// UMULLv4i32_v2i64
    2147511421U,	// UMULLv8i16_indexed
    2147511421U,	// UMULLv8i16_v4i32
    2147507438U,	// UMULLv8i8_v8i16
    2147500837U,	// UQADDv16i8
    2214629852U,	// UQADDv1i16
    2214629852U,	// UQADDv1i32
    2214629852U,	// UQADDv1i64
    2214629852U,	// UQADDv1i8
    2147510109U,	// UQADDv2i32
    2147503574U,	// UQADDv2i64
    2147505205U,	// UQADDv4i16
    2147511916U,	// UQADDv4i32
    2147507011U,	// UQADDv8i16
    2147501718U,	// UQADDv8i8
    2147500989U,	// UQRSHLv16i8
    2214634270U,	// UQRSHLv1i16
    2214634270U,	// UQRSHLv1i32
    2214634270U,	// UQRSHLv1i64
    2214634270U,	// UQRSHLv1i8
    2147510370U,	// UQRSHLv2i32
    2147503864U,	// UQRSHLv2i64
    2147505443U,	// UQRSHLv4i16
    2147512301U,	// UQRSHLv4i32
    2147507349U,	// UQRSHLv8i16
    2147501837U,	// UQRSHLv8i8
    2214634534U,	// UQRSHRNb
    2214634534U,	// UQRSHRNh
    2214634534U,	// UQRSHRNs
    2281750975U,	// UQRSHRNv16i8_shift
    2147510544U,	// UQRSHRNv2i32_shift
    2147505617U,	// UQRSHRNv4i16_shift
    2281762024U,	// UQRSHRNv4i32_shift
    2281757129U,	// UQRSHRNv8i16_shift
    2147501977U,	// UQRSHRNv8i8_shift
    2214634255U,	// UQSHLb
    2214634255U,	// UQSHLd
    2214634255U,	// UQSHLh
    2214634255U,	// UQSHLs
    2147500966U,	// UQSHLv16i8
    2147500966U,	// UQSHLv16i8_shift
    2214634255U,	// UQSHLv1i16
    2214634255U,	// UQSHLv1i32
    2214634255U,	// UQSHLv1i64
    2214634255U,	// UQSHLv1i8
    2147510349U,	// UQSHLv2i32
    2147510349U,	// UQSHLv2i32_shift
    2147503843U,	// UQSHLv2i64
    2147503843U,	// UQSHLv2i64_shift
    2147505422U,	// UQSHLv4i16
    2147505422U,	// UQSHLv4i16_shift
    2147512280U,	// UQSHLv4i32
    2147512280U,	// UQSHLv4i32_shift
    2147507328U,	// UQSHLv8i16
    2147507328U,	// UQSHLv8i16_shift
    2147501816U,	// UQSHLv8i8
    2147501816U,	// UQSHLv8i8_shift
    2214634517U,	// UQSHRNb
    2214634517U,	// UQSHRNh
    2214634517U,	// UQSHRNs
    2281750948U,	// UQSHRNv16i8_shift
    2147510521U,	// UQSHRNv2i32_shift
    2147505594U,	// UQSHRNv4i16_shift
    2281761999U,	// UQSHRNv4i32_shift
    2281757104U,	// UQSHRNv8i16_shift
    2147501954U,	// UQSHRNv8i8_shift
    2147500715U,	// UQSUBv16i8
    2214628198U,	// UQSUBv1i16
    2214628198U,	// UQSUBv1i32
    2214628198U,	// UQSUBv1i64
    2214628198U,	// UQSUBv1i8
    2147510001U,	// UQSUBv2i32
    2147503534U,	// UQSUBv2i64
    2147505097U,	// UQSUBv4i16
    2147511798U,	// UQSUBv4i32
    2147506903U,	// UQSUBv8i16
    2147501628U,	// UQSUBv8i8
    134267363U,	// UQXTNv16i8
    67150922U,	// UQXTNv1i16
    67150922U,	// UQXTNv1i32
    67150922U,	// UQXTNv1i8
    26929U,	// UQXTNv2i32
    22002U,	// UQXTNv4i16
    134278409U,	// UQXTNv4i32
    134273514U,	// UQXTNv8i16
    18359U,	// UQXTNv8i8
    26512U,	// URECPEv2i32
    28319U,	// URECPEv4i32
    2147500790U,	// URHADDv16i8
    2147510066U,	// URHADDv2i32
    2147505162U,	// URHADDv4i16
    2147511873U,	// URHADDv4i32
    2147506968U,	// URHADDv8i16
    2147501675U,	// URHADDv8i8
    2147501012U,	// URSHLv16i8
    2214634285U,	// URSHLv1i64
    2147510391U,	// URSHLv2i32
    2147503885U,	// URSHLv2i64
    2147505464U,	// URSHLv4i16
    2147512322U,	// URSHLv4i32
    2147507370U,	// URSHLv8i16
    2147501858U,	// URSHLv8i8
    2214634790U,	// URSHRd
    2147501175U,	// URSHRv16i8_shift
    2147510800U,	// URSHRv2i32_shift
    2147504196U,	// URSHRv2i64_shift
    2147505873U,	// URSHRv4i16_shift
    2147512711U,	// URSHRv4i32_shift
    2147507725U,	// URSHRv8i16_shift
    2147502129U,	// URSHRv8i8_shift
    26535U,	// URSQRTEv2i32
    28342U,	// URSQRTEv4i32
    2416034010U,	// URSRAd
    2281751147U,	// URSRAv16i8_shift
    2281760419U,	// URSRAv2i32_shift
    2281753972U,	// URSRAv2i64_shift
    2281755515U,	// URSRAv4i16_shift
    2281762216U,	// URSRAv4i32_shift
    2281757321U,	// URSRAv8i16_shift
    2281752066U,	// URSRAv8i8_shift
    2147506506U,	// USHLLv16i8_shift
    2147503923U,	// USHLLv2i32_shift
    2147512360U,	// USHLLv4i16_shift
    2147503305U,	// USHLLv4i32_shift
    2147511386U,	// USHLLv8i16_shift
    2147507408U,	// USHLLv8i8_shift
    2147501033U,	// USHLv16i8
    2214634298U,	// USHLv1i64
    2147510410U,	// USHLv2i32
    2147503904U,	// USHLv2i64
    2147505483U,	// USHLv4i16
    2147512341U,	// USHLv4i32
    2147507389U,	// USHLv8i16
    2147501877U,	// USHLv8i8
    2214634803U,	// USHRd
    2147501196U,	// USHRv16i8_shift
    2147510819U,	// USHRv2i32_shift
    2147504215U,	// USHRv2i64_shift
    2147505892U,	// USHRv4i16_shift
    2147512730U,	// USHRv4i32_shift
    2147507744U,	// USHRv8i16_shift
    2147502148U,	// USHRv8i8_shift
    134267672U,	// USQADDv16i8
    268554707U,	// USQADDv1i16
    268554707U,	// USQADDv1i32
    268554707U,	// USQADDv1i64
    268554707U,	// USQADDv1i8
    134276945U,	// USQADDv2i32
    134270410U,	// USQADDv2i64
    134272041U,	// USQADDv4i16
    134278752U,	// USQADDv4i32
    134273847U,	// USQADDv8i16
    134268554U,	// USQADDv8i8
    2416034023U,	// USRAd
    2281751168U,	// USRAv16i8_shift
    2281760438U,	// USRAv2i32_shift
    2281753991U,	// USRAv2i64_shift
    2281755534U,	// USRAv4i16_shift
    2281762235U,	// USRAv4i32_shift
    2281757340U,	// USRAv8i16_shift
    2281752085U,	// USRAv8i8_shift
    2147506440U,	// USUBLv16i8_v8i16
    2147503783U,	// USUBLv2i32_v2i64
    2147512220U,	// USUBLv4i16_v4i32
    2147503239U,	// USUBLv4i32_v2i64
    2147511320U,	// USUBLv8i16_v4i32
    2147507268U,	// USUBLv8i8_v8i16
    2147506745U,	// USUBWv16i8_v8i16
    2147504483U,	// USUBWv2i32_v2i64
    2147513129U,	// USUBWv4i16_v4i32
    2147503424U,	// USUBWv4i32_v2i64
    2147511640U,	// USUBWv8i16_v4i32
    2147508143U,	// USUBWv8i8_v8i16
    2147500392U,	// UZP1v16i8
    2147509840U,	// UZP1v2i32
    2147503162U,	// UZP1v2i64
    2147504926U,	// UZP1v4i16
    2147511204U,	// UZP1v4i32
    2147506366U,	// UZP1v8i16
    2147501468U,	// UZP1v8i8
    2147500579U,	// UZP2v16i8
    2147509867U,	// UZP2v2i32
    2147503404U,	// UZP2v2i64
    2147504963U,	// UZP2v4i16
    2147511620U,	// UZP2v4i32
    2147506725U,	// UZP2v8i16
    2147501505U,	// UZP2v8i8
    1085872U,	// XPACD
    1090105U,	// XPACI
    13924U,	// XPACLRI
    134267353U,	// XTNv16i8
    26921U,	// XTNv2i32
    21994U,	// XTNv4i16
    134278400U,	// XTNv4i32
    134273505U,	// XTNv8i16
    18351U,	// XTNv8i8
    2147500382U,	// ZIP1v16i8
    2147509831U,	// ZIP1v2i32
    2147503153U,	// ZIP1v2i64
    2147504917U,	// ZIP1v4i16
    2147511195U,	// ZIP1v4i32
    2147506357U,	// ZIP1v8i16
    2147501459U,	// ZIP1v8i8
    2147500569U,	// ZIP2v16i8
    2147509858U,	// ZIP2v2i32
    2147503395U,	// ZIP2v2i64
    2147504954U,	// ZIP2v4i16
    2147511611U,	// ZIP2v4i32
    2147506716U,	// ZIP2v8i16
    2147501496U,	// ZIP2v8i8
  };

  static const uint16_t OpInfo1[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// CFI_INSTRUCTION
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    0U,	// DBG_VALUE
    0U,	// REG_SEQUENCE
    0U,	// COPY
    0U,	// BUNDLE
    0U,	// LIFETIME_START
    0U,	// LIFETIME_END
    0U,	// STACKMAP
    0U,	// FENTRY_CALL
    0U,	// PATCHPOINT
    0U,	// LOAD_STACK_GUARD
    0U,	// STATEPOINT
    0U,	// LOCAL_ESCAPE
    0U,	// FAULTING_OP
    0U,	// PATCHABLE_OP
    0U,	// PATCHABLE_FUNCTION_ENTER
    0U,	// PATCHABLE_RET
    0U,	// PATCHABLE_FUNCTION_EXIT
    0U,	// PATCHABLE_TAIL_CALL
    0U,	// PATCHABLE_EVENT_CALL
    0U,	// G_ADD
    0U,	// G_SUB
    0U,	// G_MUL
    0U,	// G_SDIV
    0U,	// G_UDIV
    0U,	// G_SREM
    0U,	// G_UREM
    0U,	// G_AND
    0U,	// G_OR
    0U,	// G_XOR
    0U,	// G_IMPLICIT_DEF
    0U,	// G_FRAME_INDEX
    0U,	// G_GLOBAL_VALUE
    0U,	// G_EXTRACT
    0U,	// G_UNMERGE_VALUES
    0U,	// G_INSERT
    0U,	// G_MERGE_VALUES
    0U,	// G_PTRTOINT
    0U,	// G_INTTOPTR
    0U,	// G_BITCAST
    0U,	// G_LOAD
    0U,	// G_STORE
    0U,	// G_BRCOND
    0U,	// G_BRINDIRECT
    0U,	// G_INTRINSIC
    0U,	// G_INTRINSIC_W_SIDE_EFFECTS
    0U,	// G_ANYEXT
    0U,	// G_TRUNC
    0U,	// G_CONSTANT
    0U,	// G_FCONSTANT
    0U,	// G_VASTART
    0U,	// G_VAARG
    0U,	// G_SEXT
    0U,	// G_ZEXT
    0U,	// G_SHL
    0U,	// G_LSHR
    0U,	// G_ASHR
    0U,	// G_ICMP
    0U,	// G_FCMP
    0U,	// G_SELECT
    0U,	// G_UADDE
    0U,	// G_USUBE
    0U,	// G_SADDO
    0U,	// G_SSUBO
    0U,	// G_UMULO
    0U,	// G_SMULO
    0U,	// G_UMULH
    0U,	// G_SMULH
    0U,	// G_FADD
    0U,	// G_FSUB
    0U,	// G_FMUL
    0U,	// G_FMA
    0U,	// G_FDIV
    0U,	// G_FREM
    0U,	// G_FPOW
    0U,	// G_FEXP
    0U,	// G_FEXP2
    0U,	// G_FLOG
    0U,	// G_FLOG2
    0U,	// G_FNEG
    0U,	// G_FPEXT
    0U,	// G_FPTRUNC
    0U,	// G_FPTOSI
    0U,	// G_FPTOUI
    0U,	// G_SITOFP
    0U,	// G_UITOFP
    0U,	// G_GEP
    0U,	// G_PTR_MASK
    0U,	// G_BR
    0U,	// G_INSERT_VECTOR_ELT
    0U,	// G_EXTRACT_VECTOR_ELT
    0U,	// G_SHUFFLE_VECTOR
    0U,	// ABSv16i8
    0U,	// ABSv1i64
    0U,	// ABSv2i32
    0U,	// ABSv2i64
    0U,	// ABSv4i16
    0U,	// ABSv4i32
    0U,	// ABSv8i16
    0U,	// ABSv8i8
    0U,	// ADCSWr
    0U,	// ADCSXr
    0U,	// ADCWr
    0U,	// ADCXr
    16U,	// ADDHNv2i64_v2i32
    32U,	// ADDHNv2i64_v4i32
    16U,	// ADDHNv4i32_v4i16
    32U,	// ADDHNv4i32_v8i16
    32U,	// ADDHNv8i16_v16i8
    16U,	// ADDHNv8i16_v8i8
    16U,	// ADDPv16i8
    16U,	// ADDPv2i32
    16U,	// ADDPv2i64
    0U,	// ADDPv2i64p
    16U,	// ADDPv4i16
    16U,	// ADDPv4i32
    16U,	// ADDPv8i16
    16U,	// ADDPv8i8
    48U,	// ADDSWri
    0U,	// ADDSWrr
    64U,	// ADDSWrs
    80U,	// ADDSWrx
    48U,	// ADDSXri
    0U,	// ADDSXrr
    64U,	// ADDSXrs
    80U,	// ADDSXrx
    512U,	// ADDSXrx64
    0U,	// ADDVv16i8v
    0U,	// ADDVv4i16v
    0U,	// ADDVv4i32v
    0U,	// ADDVv8i16v
    0U,	// ADDVv8i8v
    48U,	// ADDWri
    0U,	// ADDWrr
    64U,	// ADDWrs
    80U,	// ADDWrx
    48U,	// ADDXri
    0U,	// ADDXrr
    64U,	// ADDXrs
    80U,	// ADDXrx
    512U,	// ADDXrx64
    16U,	// ADDv16i8
    0U,	// ADDv1i64
    16U,	// ADDv2i32
    16U,	// ADDv2i64
    16U,	// ADDv4i16
    16U,	// ADDv4i32
    16U,	// ADDv8i16
    16U,	// ADDv8i8
    0U,	// ADJCALLSTACKDOWN
    0U,	// ADJCALLSTACKUP
    0U,	// ADR
    0U,	// ADRP
    0U,	// AESDrr
    0U,	// AESErr
    0U,	// AESIMCrr
    0U,	// AESIMCrrTied
    0U,	// AESMCrr
    0U,	// AESMCrrTied
    96U,	// ANDSWri
    0U,	// ANDSWrr
    64U,	// ANDSWrs
    112U,	// ANDSXri
    0U,	// ANDSXrr
    64U,	// ANDSXrs
    96U,	// ANDWri
    0U,	// ANDWrr
    64U,	// ANDWrs
    112U,	// ANDXri
    0U,	// ANDXrr
    64U,	// ANDXrs
    16U,	// ANDv16i8
    16U,	// ANDv8i8
    0U,	// ASRVWr
    0U,	// ASRVXr
    0U,	// AUTDA
    0U,	// AUTDB
    0U,	// AUTDZA
    0U,	// AUTDZB
    0U,	// AUTIA
    0U,	// AUTIA1716
    0U,	// AUTIASP
    0U,	// AUTIAZ
    0U,	// AUTIB
    0U,	// AUTIB1716
    0U,	// AUTIBSP
    0U,	// AUTIBZ
    0U,	// AUTIZA
    0U,	// AUTIZB
    0U,	// B
    1152U,	// BFMWri
    1152U,	// BFMXri
    0U,	// BICSWrr
    64U,	// BICSWrs
    0U,	// BICSXrr
    64U,	// BICSXrs
    0U,	// BICWrr
    64U,	// BICWrs
    0U,	// BICXrr
    64U,	// BICXrs
    16U,	// BICv16i8
    0U,	// BICv2i32
    0U,	// BICv4i16
    0U,	// BICv4i32
    0U,	// BICv8i16
    16U,	// BICv8i8
    16U,	// BIFv16i8
    16U,	// BIFv8i8
    32U,	// BITv16i8
    32U,	// BITv8i8
    0U,	// BL
    0U,	// BLR
    0U,	// BLRAA
    0U,	// BLRAAZ
    0U,	// BLRAB
    0U,	// BLRABZ
    0U,	// BR
    0U,	// BRAA
    0U,	// BRAAZ
    0U,	// BRAB
    0U,	// BRABZ
    0U,	// BRK
    32U,	// BSLv16i8
    32U,	// BSLv8i8
    0U,	// Bcc
    1665U,	// CASAB
    1665U,	// CASAH
    1665U,	// CASALB
    1665U,	// CASALH
    1665U,	// CASALW
    1665U,	// CASALX
    1665U,	// CASAW
    1665U,	// CASAX
    1665U,	// CASB
    1665U,	// CASH
    1665U,	// CASLB
    1665U,	// CASLH
    1665U,	// CASLW
    1665U,	// CASLX
    0U,	// CASPALW
    0U,	// CASPALX
    0U,	// CASPAW
    0U,	// CASPAX
    0U,	// CASPLW
    0U,	// CASPLX
    0U,	// CASPW
    0U,	// CASPX
    1665U,	// CASW
    1665U,	// CASX
    0U,	// CBNZW
    0U,	// CBNZX
    0U,	// CBZW
    0U,	// CBZX
    9216U,	// CCMNWi
    9216U,	// CCMNWr
    9216U,	// CCMNXi
    9216U,	// CCMNXr
    9216U,	// CCMPWi
    9216U,	// CCMPWr
    9216U,	// CCMPXi
    9216U,	// CCMPXr
    0U,	// CLREX
    0U,	// CLSWr
    0U,	// CLSXr
    0U,	// CLSv16i8
    0U,	// CLSv2i32
    0U,	// CLSv4i16
    0U,	// CLSv4i32
    0U,	// CLSv8i16
    0U,	// CLSv8i8
    0U,	// CLZWr
    0U,	// CLZXr
    0U,	// CLZv16i8
    0U,	// CLZv2i32
    0U,	// CLZv4i16
    0U,	// CLZv4i32
    0U,	// CLZv8i16
    0U,	// CLZv8i8
    16U,	// CMEQv16i8
    1U,	// CMEQv16i8rz
    0U,	// CMEQv1i64
    1U,	// CMEQv1i64rz
    16U,	// CMEQv2i32
    1U,	// CMEQv2i32rz
    16U,	// CMEQv2i64
    1U,	// CMEQv2i64rz
    16U,	// CMEQv4i16
    1U,	// CMEQv4i16rz
    16U,	// CMEQv4i32
    1U,	// CMEQv4i32rz
    16U,	// CMEQv8i16
    1U,	// CMEQv8i16rz
    16U,	// CMEQv8i8
    1U,	// CMEQv8i8rz
    16U,	// CMGEv16i8
    1U,	// CMGEv16i8rz
    0U,	// CMGEv1i64
    1U,	// CMGEv1i64rz
    16U,	// CMGEv2i32
    1U,	// CMGEv2i32rz
    16U,	// CMGEv2i64
    1U,	// CMGEv2i64rz
    16U,	// CMGEv4i16
    1U,	// CMGEv4i16rz
    16U,	// CMGEv4i32
    1U,	// CMGEv4i32rz
    16U,	// CMGEv8i16
    1U,	// CMGEv8i16rz
    16U,	// CMGEv8i8
    1U,	// CMGEv8i8rz
    16U,	// CMGTv16i8
    1U,	// CMGTv16i8rz
    0U,	// CMGTv1i64
    1U,	// CMGTv1i64rz
    16U,	// CMGTv2i32
    1U,	// CMGTv2i32rz
    16U,	// CMGTv2i64
    1U,	// CMGTv2i64rz
    16U,	// CMGTv4i16
    1U,	// CMGTv4i16rz
    16U,	// CMGTv4i32
    1U,	// CMGTv4i32rz
    16U,	// CMGTv8i16
    1U,	// CMGTv8i16rz
    16U,	// CMGTv8i8
    1U,	// CMGTv8i8rz
    16U,	// CMHIv16i8
    0U,	// CMHIv1i64
    16U,	// CMHIv2i32
    16U,	// CMHIv2i64
    16U,	// CMHIv4i16
    16U,	// CMHIv4i32
    16U,	// CMHIv8i16
    16U,	// CMHIv8i8
    16U,	// CMHSv16i8
    0U,	// CMHSv1i64
    16U,	// CMHSv2i32
    16U,	// CMHSv2i64
    16U,	// CMHSv4i16
    16U,	// CMHSv4i32
    16U,	// CMHSv8i16
    16U,	// CMHSv8i8
    1U,	// CMLEv16i8rz
    1U,	// CMLEv1i64rz
    1U,	// CMLEv2i32rz
    1U,	// CMLEv2i64rz
    1U,	// CMLEv4i16rz
    1U,	// CMLEv4i32rz
    1U,	// CMLEv8i16rz
    1U,	// CMLEv8i8rz
    1U,	// CMLTv16i8rz
    1U,	// CMLTv1i64rz
    1U,	// CMLTv2i32rz
    1U,	// CMLTv2i64rz
    1U,	// CMLTv4i16rz
    1U,	// CMLTv4i32rz
    1U,	// CMLTv8i16rz
    1U,	// CMLTv8i8rz
    0U,	// CMP_SWAP_128
    0U,	// CMP_SWAP_16
    0U,	// CMP_SWAP_32
    0U,	// CMP_SWAP_64
    0U,	// CMP_SWAP_8
    16U,	// CMTSTv16i8
    0U,	// CMTSTv1i64
    16U,	// CMTSTv2i32
    16U,	// CMTSTv2i64
    16U,	// CMTSTv4i16
    16U,	// CMTSTv4i32
    16U,	// CMTSTv8i16
    16U,	// CMTSTv8i8
    0U,	// CNTv16i8
    0U,	// CNTv8i8
    2U,	// CPYi16
    2U,	// CPYi32
    2U,	// CPYi64
    2U,	// CPYi8
    0U,	// CRC32Brr
    0U,	// CRC32CBrr
    0U,	// CRC32CHrr
    0U,	// CRC32CWrr
    0U,	// CRC32CXrr
    0U,	// CRC32Hrr
    0U,	// CRC32Wrr
    0U,	// CRC32Xrr
    9216U,	// CSELWr
    9216U,	// CSELXr
    9216U,	// CSINCWr
    9216U,	// CSINCXr
    9216U,	// CSINVWr
    9216U,	// CSINVXr
    9216U,	// CSNEGWr
    9216U,	// CSNEGXr
    0U,	// CompilerBarrier
    0U,	// DCPS1
    0U,	// DCPS2
    0U,	// DCPS3
    0U,	// DMB
    0U,	// DRPS
    0U,	// DSB
    0U,	// DUPv16i8gpr
    2U,	// DUPv16i8lane
    0U,	// DUPv2i32gpr
    2U,	// DUPv2i32lane
    0U,	// DUPv2i64gpr
    2U,	// DUPv2i64lane
    0U,	// DUPv4i16gpr
    2U,	// DUPv4i16lane
    0U,	// DUPv4i32gpr
    2U,	// DUPv4i32lane
    0U,	// DUPv8i16gpr
    2U,	// DUPv8i16lane
    0U,	// DUPv8i8gpr
    2U,	// DUPv8i8lane
    0U,	// EONWrr
    64U,	// EONWrs
    0U,	// EONXrr
    64U,	// EONXrs
    96U,	// EORWri
    0U,	// EORWrr
    64U,	// EORWrs
    112U,	// EORXri
    0U,	// EORXrr
    64U,	// EORXrs
    16U,	// EORv16i8
    16U,	// EORv8i8
    0U,	// ERET
    0U,	// ERETAA
    0U,	// ERETAB
    17408U,	// EXTRWrri
    17408U,	// EXTRXrri
    17424U,	// EXTv16i8
    17424U,	// EXTv8i8
    0U,	// F128CSEL
    0U,	// FABD16
    0U,	// FABD32
    0U,	// FABD64
    16U,	// FABDv2f32
    16U,	// FABDv2f64
    16U,	// FABDv4f16
    16U,	// FABDv4f32
    16U,	// FABDv8f16
    0U,	// FABSDr
    0U,	// FABSHr
    0U,	// FABSSr
    0U,	// FABSv2f32
    0U,	// FABSv2f64
    0U,	// FABSv4f16
    0U,	// FABSv4f32
    0U,	// FABSv8f16
    0U,	// FACGE16
    0U,	// FACGE32
    0U,	// FACGE64
    16U,	// FACGEv2f32
    16U,	// FACGEv2f64
    16U,	// FACGEv4f16
    16U,	// FACGEv4f32
    16U,	// FACGEv8f16
    0U,	// FACGT16
    0U,	// FACGT32
    0U,	// FACGT64
    16U,	// FACGTv2f32
    16U,	// FACGTv2f64
    16U,	// FACGTv4f16
    16U,	// FACGTv4f32
    16U,	// FACGTv8f16
    0U,	// FADDDrr
    0U,	// FADDHrr
    16U,	// FADDPv2f32
    16U,	// FADDPv2f64
    0U,	// FADDPv2i16p
    0U,	// FADDPv2i32p
    0U,	// FADDPv2i64p
    16U,	// FADDPv4f16
    16U,	// FADDPv4f32
    16U,	// FADDPv8f16
    0U,	// FADDSrr
    16U,	// FADDv2f32
    16U,	// FADDv2f64
    16U,	// FADDv4f16
    16U,	// FADDv4f32
    16U,	// FADDv8f16
    9216U,	// FCCMPDrr
    9216U,	// FCCMPEDrr
    9216U,	// FCCMPEHrr
    9216U,	// FCCMPESrr
    9216U,	// FCCMPHrr
    9216U,	// FCCMPSrr
    0U,	// FCMEQ16
    0U,	// FCMEQ32
    0U,	// FCMEQ64
    2U,	// FCMEQv1i16rz
    2U,	// FCMEQv1i32rz
    2U,	// FCMEQv1i64rz
    16U,	// FCMEQv2f32
    16U,	// FCMEQv2f64
    2U,	// FCMEQv2i32rz
    2U,	// FCMEQv2i64rz
    16U,	// FCMEQv4f16
    16U,	// FCMEQv4f32
    2U,	// FCMEQv4i16rz
    2U,	// FCMEQv4i32rz
    16U,	// FCMEQv8f16
    2U,	// FCMEQv8i16rz
    0U,	// FCMGE16
    0U,	// FCMGE32
    0U,	// FCMGE64
    2U,	// FCMGEv1i16rz
    2U,	// FCMGEv1i32rz
    2U,	// FCMGEv1i64rz
    16U,	// FCMGEv2f32
    16U,	// FCMGEv2f64
    2U,	// FCMGEv2i32rz
    2U,	// FCMGEv2i64rz
    16U,	// FCMGEv4f16
    16U,	// FCMGEv4f32
    2U,	// FCMGEv4i16rz
    2U,	// FCMGEv4i32rz
    16U,	// FCMGEv8f16
    2U,	// FCMGEv8i16rz
    0U,	// FCMGT16
    0U,	// FCMGT32
    0U,	// FCMGT64
    2U,	// FCMGTv1i16rz
    2U,	// FCMGTv1i32rz
    2U,	// FCMGTv1i64rz
    16U,	// FCMGTv2f32
    16U,	// FCMGTv2f64
    2U,	// FCMGTv2i32rz
    2U,	// FCMGTv2i64rz
    16U,	// FCMGTv4f16
    16U,	// FCMGTv4f32
    2U,	// FCMGTv4i16rz
    2U,	// FCMGTv4i32rz
    16U,	// FCMGTv8f16
    2U,	// FCMGTv8i16rz
    2U,	// FCMLEv1i16rz
    2U,	// FCMLEv1i32rz
    2U,	// FCMLEv1i64rz
    2U,	// FCMLEv2i32rz
    2U,	// FCMLEv2i64rz
    2U,	// FCMLEv4i16rz
    2U,	// FCMLEv4i32rz
    2U,	// FCMLEv8i16rz
    2U,	// FCMLTv1i16rz
    2U,	// FCMLTv1i32rz
    2U,	// FCMLTv1i64rz
    2U,	// FCMLTv2i32rz
    2U,	// FCMLTv2i64rz
    2U,	// FCMLTv4i16rz
    2U,	// FCMLTv4i32rz
    2U,	// FCMLTv8i16rz
    0U,	// FCMPDri
    0U,	// FCMPDrr
    0U,	// FCMPEDri
    0U,	// FCMPEDrr
    0U,	// FCMPEHri
    0U,	// FCMPEHrr
    0U,	// FCMPESri
    0U,	// FCMPESrr
    0U,	// FCMPHri
    0U,	// FCMPHrr
    0U,	// FCMPSri
    0U,	// FCMPSrr
    9216U,	// FCSELDrrr
    9216U,	// FCSELHrrr
    9216U,	// FCSELSrrr
    0U,	// FCVTASUWDr
    0U,	// FCVTASUWHr
    0U,	// FCVTASUWSr
    0U,	// FCVTASUXDr
    0U,	// FCVTASUXHr
    0U,	// FCVTASUXSr
    0U,	// FCVTASv1f16
    0U,	// FCVTASv1i32
    0U,	// FCVTASv1i64
    0U,	// FCVTASv2f32
    0U,	// FCVTASv2f64
    0U,	// FCVTASv4f16
    0U,	// FCVTASv4f32
    0U,	// FCVTASv8f16
    0U,	// FCVTAUUWDr
    0U,	// FCVTAUUWHr
    0U,	// FCVTAUUWSr
    0U,	// FCVTAUUXDr
    0U,	// FCVTAUUXHr
    0U,	// FCVTAUUXSr
    0U,	// FCVTAUv1f16
    0U,	// FCVTAUv1i32
    0U,	// FCVTAUv1i64
    0U,	// FCVTAUv2f32
    0U,	// FCVTAUv2f64
    0U,	// FCVTAUv4f16
    0U,	// FCVTAUv4f32
    0U,	// FCVTAUv8f16
    0U,	// FCVTDHr
    0U,	// FCVTDSr
    0U,	// FCVTHDr
    0U,	// FCVTHSr
    0U,	// FCVTLv2i32
    3U,	// FCVTLv4i16
    0U,	// FCVTLv4i32
    3U,	// FCVTLv8i16
    0U,	// FCVTMSUWDr
    0U,	// FCVTMSUWHr
    0U,	// FCVTMSUWSr
    0U,	// FCVTMSUXDr
    0U,	// FCVTMSUXHr
    0U,	// FCVTMSUXSr
    0U,	// FCVTMSv1f16
    0U,	// FCVTMSv1i32
    0U,	// FCVTMSv1i64
    0U,	// FCVTMSv2f32
    0U,	// FCVTMSv2f64
    0U,	// FCVTMSv4f16
    0U,	// FCVTMSv4f32
    0U,	// FCVTMSv8f16
    0U,	// FCVTMUUWDr
    0U,	// FCVTMUUWHr
    0U,	// FCVTMUUWSr
    0U,	// FCVTMUUXDr
    0U,	// FCVTMUUXHr
    0U,	// FCVTMUUXSr
    0U,	// FCVTMUv1f16
    0U,	// FCVTMUv1i32
    0U,	// FCVTMUv1i64
    0U,	// FCVTMUv2f32
    0U,	// FCVTMUv2f64
    0U,	// FCVTMUv4f16
    0U,	// FCVTMUv4f32
    0U,	// FCVTMUv8f16
    0U,	// FCVTNSUWDr
    0U,	// FCVTNSUWHr
    0U,	// FCVTNSUWSr
    0U,	// FCVTNSUXDr
    0U,	// FCVTNSUXHr
    0U,	// FCVTNSUXSr
    0U,	// FCVTNSv1f16
    0U,	// FCVTNSv1i32
    0U,	// FCVTNSv1i64
    0U,	// FCVTNSv2f32
    0U,	// FCVTNSv2f64
    0U,	// FCVTNSv4f16
    0U,	// FCVTNSv4f32
    0U,	// FCVTNSv8f16
    0U,	// FCVTNUUWDr
    0U,	// FCVTNUUWHr
    0U,	// FCVTNUUWSr
    0U,	// FCVTNUUXDr
    0U,	// FCVTNUUXHr
    0U,	// FCVTNUUXSr
    0U,	// FCVTNUv1f16
    0U,	// FCVTNUv1i32
    0U,	// FCVTNUv1i64
    0U,	// FCVTNUv2f32
    0U,	// FCVTNUv2f64
    0U,	// FCVTNUv4f16
    0U,	// FCVTNUv4f32
    0U,	// FCVTNUv8f16
    0U,	// FCVTNv2i32
    0U,	// FCVTNv4i16
    4U,	// FCVTNv4i32
    0U,	// FCVTNv8i16
    0U,	// FCVTPSUWDr
    0U,	// FCVTPSUWHr
    0U,	// FCVTPSUWSr
    0U,	// FCVTPSUXDr
    0U,	// FCVTPSUXHr
    0U,	// FCVTPSUXSr
    0U,	// FCVTPSv1f16
    0U,	// FCVTPSv1i32
    0U,	// FCVTPSv1i64
    0U,	// FCVTPSv2f32
    0U,	// FCVTPSv2f64
    0U,	// FCVTPSv4f16
    0U,	// FCVTPSv4f32
    0U,	// FCVTPSv8f16
    0U,	// FCVTPUUWDr
    0U,	// FCVTPUUWHr
    0U,	// FCVTPUUWSr
    0U,	// FCVTPUUXDr
    0U,	// FCVTPUUXHr
    0U,	// FCVTPUUXSr
    0U,	// FCVTPUv1f16
    0U,	// FCVTPUv1i32
    0U,	// FCVTPUv1i64
    0U,	// FCVTPUv2f32
    0U,	// FCVTPUv2f64
    0U,	// FCVTPUv4f16
    0U,	// FCVTPUv4f32
    0U,	// FCVTPUv8f16
    0U,	// FCVTSDr
    0U,	// FCVTSHr
    0U,	// FCVTXNv1i64
    0U,	// FCVTXNv2f32
    4U,	// FCVTXNv4f32
    0U,	// FCVTZSSWDri
    0U,	// FCVTZSSWHri
    0U,	// FCVTZSSWSri
    0U,	// FCVTZSSXDri
    0U,	// FCVTZSSXHri
    0U,	// FCVTZSSXSri
    0U,	// FCVTZSUWDr
    0U,	// FCVTZSUWHr
    0U,	// FCVTZSUWSr
    0U,	// FCVTZSUXDr
    0U,	// FCVTZSUXHr
    0U,	// FCVTZSUXSr
    0U,	// FCVTZSd
    0U,	// FCVTZSh
    0U,	// FCVTZSs
    0U,	// FCVTZSv1f16
    0U,	// FCVTZSv1i32
    0U,	// FCVTZSv1i64
    0U,	// FCVTZSv2f32
    0U,	// FCVTZSv2f64
    0U,	// FCVTZSv2i32_shift
    0U,	// FCVTZSv2i64_shift
    0U,	// FCVTZSv4f16
    0U,	// FCVTZSv4f32
    0U,	// FCVTZSv4i16_shift
    0U,	// FCVTZSv4i32_shift
    0U,	// FCVTZSv8f16
    0U,	// FCVTZSv8i16_shift
    0U,	// FCVTZUSWDri
    0U,	// FCVTZUSWHri
    0U,	// FCVTZUSWSri
    0U,	// FCVTZUSXDri
    0U,	// FCVTZUSXHri
    0U,	// FCVTZUSXSri
    0U,	// FCVTZUUWDr
    0U,	// FCVTZUUWHr
    0U,	// FCVTZUUWSr
    0U,	// FCVTZUUXDr
    0U,	// FCVTZUUXHr
    0U,	// FCVTZUUXSr
    0U,	// FCVTZUd
    0U,	// FCVTZUh
    0U,	// FCVTZUs
    0U,	// FCVTZUv1f16
    0U,	// FCVTZUv1i32
    0U,	// FCVTZUv1i64
    0U,	// FCVTZUv2f32
    0U,	// FCVTZUv2f64
    0U,	// FCVTZUv2i32_shift
    0U,	// FCVTZUv2i64_shift
    0U,	// FCVTZUv4f16
    0U,	// FCVTZUv4f32
    0U,	// FCVTZUv4i16_shift
    0U,	// FCVTZUv4i32_shift
    0U,	// FCVTZUv8f16
    0U,	// FCVTZUv8i16_shift
    0U,	// FDIVDrr
    0U,	// FDIVHrr
    0U,	// FDIVSrr
    16U,	// FDIVv2f32
    16U,	// FDIVv2f64
    16U,	// FDIVv4f16
    16U,	// FDIVv4f32
    16U,	// FDIVv8f16
    17408U,	// FMADDDrrr
    17408U,	// FMADDHrrr
    17408U,	// FMADDSrrr
    0U,	// FMAXDrr
    0U,	// FMAXHrr
    0U,	// FMAXNMDrr
    0U,	// FMAXNMHrr
    16U,	// FMAXNMPv2f32
    16U,	// FMAXNMPv2f64
    0U,	// FMAXNMPv2i16p
    0U,	// FMAXNMPv2i32p
    0U,	// FMAXNMPv2i64p
    16U,	// FMAXNMPv4f16
    16U,	// FMAXNMPv4f32
    16U,	// FMAXNMPv8f16
    0U,	// FMAXNMSrr
    0U,	// FMAXNMVv4i16v
    0U,	// FMAXNMVv4i32v
    0U,	// FMAXNMVv8i16v
    16U,	// FMAXNMv2f32
    16U,	// FMAXNMv2f64
    16U,	// FMAXNMv4f16
    16U,	// FMAXNMv4f32
    16U,	// FMAXNMv8f16
    16U,	// FMAXPv2f32
    16U,	// FMAXPv2f64
    0U,	// FMAXPv2i16p
    0U,	// FMAXPv2i32p
    0U,	// FMAXPv2i64p
    16U,	// FMAXPv4f16
    16U,	// FMAXPv4f32
    16U,	// FMAXPv8f16
    0U,	// FMAXSrr
    0U,	// FMAXVv4i16v
    0U,	// FMAXVv4i32v
    0U,	// FMAXVv8i16v
    16U,	// FMAXv2f32
    16U,	// FMAXv2f64
    16U,	// FMAXv4f16
    16U,	// FMAXv4f32
    16U,	// FMAXv8f16
    0U,	// FMINDrr
    0U,	// FMINHrr
    0U,	// FMINNMDrr
    0U,	// FMINNMHrr
    16U,	// FMINNMPv2f32
    16U,	// FMINNMPv2f64
    0U,	// FMINNMPv2i16p
    0U,	// FMINNMPv2i32p
    0U,	// FMINNMPv2i64p
    16U,	// FMINNMPv4f16
    16U,	// FMINNMPv4f32
    16U,	// FMINNMPv8f16
    0U,	// FMINNMSrr
    0U,	// FMINNMVv4i16v
    0U,	// FMINNMVv4i32v
    0U,	// FMINNMVv8i16v
    16U,	// FMINNMv2f32
    16U,	// FMINNMv2f64
    16U,	// FMINNMv4f16
    16U,	// FMINNMv4f32
    16U,	// FMINNMv8f16
    16U,	// FMINPv2f32
    16U,	// FMINPv2f64
    0U,	// FMINPv2i16p
    0U,	// FMINPv2i32p
    0U,	// FMINPv2i64p
    16U,	// FMINPv4f16
    16U,	// FMINPv4f32
    16U,	// FMINPv8f16
    0U,	// FMINSrr
    0U,	// FMINVv4i16v
    0U,	// FMINVv4i32v
    0U,	// FMINVv8i16v
    16U,	// FMINv2f32
    16U,	// FMINv2f64
    16U,	// FMINv4f16
    16U,	// FMINv4f32
    16U,	// FMINv8f16
    2080U,	// FMLAv1i16_indexed
    2080U,	// FMLAv1i32_indexed
    2080U,	// FMLAv1i64_indexed
    32U,	// FMLAv2f32
    32U,	// FMLAv2f64
    2080U,	// FMLAv2i32_indexed
    2080U,	// FMLAv2i64_indexed
    32U,	// FMLAv4f16
    32U,	// FMLAv4f32
    2080U,	// FMLAv4i16_indexed
    2080U,	// FMLAv4i32_indexed
    32U,	// FMLAv8f16
    2080U,	// FMLAv8i16_indexed
    2080U,	// FMLSv1i16_indexed
    2080U,	// FMLSv1i32_indexed
    2080U,	// FMLSv1i64_indexed
    32U,	// FMLSv2f32
    32U,	// FMLSv2f64
    2080U,	// FMLSv2i32_indexed
    2080U,	// FMLSv2i64_indexed
    32U,	// FMLSv4f16
    32U,	// FMLSv4f32
    2080U,	// FMLSv4i16_indexed
    2080U,	// FMLSv4i32_indexed
    32U,	// FMLSv8f16
    2080U,	// FMLSv8i16_indexed
    0U,	// FMOVD0
    2U,	// FMOVDXHighr
    0U,	// FMOVDXr
    0U,	// FMOVDi
    0U,	// FMOVDr
    0U,	// FMOVHWr
    0U,	// FMOVHXr
    0U,	// FMOVHi
    0U,	// FMOVHr
    0U,	// FMOVS0
    0U,	// FMOVSWr
    0U,	// FMOVSi
    0U,	// FMOVSr
    0U,	// FMOVWHr
    0U,	// FMOVWSr
    0U,	// FMOVXDHighr
    0U,	// FMOVXDr
    0U,	// FMOVXHr
    0U,	// FMOVv2f32_ns
    0U,	// FMOVv2f64_ns
    0U,	// FMOVv4f16_ns
    0U,	// FMOVv4f32_ns
    0U,	// FMOVv8f16_ns
    17408U,	// FMSUBDrrr
    17408U,	// FMSUBHrrr
    17408U,	// FMSUBSrrr
    0U,	// FMULDrr
    0U,	// FMULHrr
    0U,	// FMULSrr
    0U,	// FMULX16
    0U,	// FMULX32
    0U,	// FMULX64
    2576U,	// FMULXv1i16_indexed
    2576U,	// FMULXv1i32_indexed
    2576U,	// FMULXv1i64_indexed
    16U,	// FMULXv2f32
    16U,	// FMULXv2f64
    2576U,	// FMULXv2i32_indexed
    2576U,	// FMULXv2i64_indexed
    16U,	// FMULXv4f16
    16U,	// FMULXv4f32
    2576U,	// FMULXv4i16_indexed
    2576U,	// FMULXv4i32_indexed
    16U,	// FMULXv8f16
    2576U,	// FMULXv8i16_indexed
    2576U,	// FMULv1i16_indexed
    2576U,	// FMULv1i32_indexed
    2576U,	// FMULv1i64_indexed
    16U,	// FMULv2f32
    16U,	// FMULv2f64
    2576U,	// FMULv2i32_indexed
    2576U,	// FMULv2i64_indexed
    16U,	// FMULv4f16
    16U,	// FMULv4f32
    2576U,	// FMULv4i16_indexed
    2576U,	// FMULv4i32_indexed
    16U,	// FMULv8f16
    2576U,	// FMULv8i16_indexed
    0U,	// FNEGDr
    0U,	// FNEGHr
    0U,	// FNEGSr
    0U,	// FNEGv2f32
    0U,	// FNEGv2f64
    0U,	// FNEGv4f16
    0U,	// FNEGv4f32
    0U,	// FNEGv8f16
    17408U,	// FNMADDDrrr
    17408U,	// FNMADDHrrr
    17408U,	// FNMADDSrrr
    17408U,	// FNMSUBDrrr
    17408U,	// FNMSUBHrrr
    17408U,	// FNMSUBSrrr
    0U,	// FNMULDrr
    0U,	// FNMULHrr
    0U,	// FNMULSrr
    0U,	// FRECPEv1f16
    0U,	// FRECPEv1i32
    0U,	// FRECPEv1i64
    0U,	// FRECPEv2f32
    0U,	// FRECPEv2f64
    0U,	// FRECPEv4f16
    0U,	// FRECPEv4f32
    0U,	// FRECPEv8f16
    0U,	// FRECPS16
    0U,	// FRECPS32
    0U,	// FRECPS64
    16U,	// FRECPSv2f32
    16U,	// FRECPSv2f64
    16U,	// FRECPSv4f16
    16U,	// FRECPSv4f32
    16U,	// FRECPSv8f16
    0U,	// FRECPXv1f16
    0U,	// FRECPXv1i32
    0U,	// FRECPXv1i64
    0U,	// FRINTADr
    0U,	// FRINTAHr
    0U,	// FRINTASr
    0U,	// FRINTAv2f32
    0U,	// FRINTAv2f64
    0U,	// FRINTAv4f16
    0U,	// FRINTAv4f32
    0U,	// FRINTAv8f16
    0U,	// FRINTIDr
    0U,	// FRINTIHr
    0U,	// FRINTISr
    0U,	// FRINTIv2f32
    0U,	// FRINTIv2f64
    0U,	// FRINTIv4f16
    0U,	// FRINTIv4f32
    0U,	// FRINTIv8f16
    0U,	// FRINTMDr
    0U,	// FRINTMHr
    0U,	// FRINTMSr
    0U,	// FRINTMv2f32
    0U,	// FRINTMv2f64
    0U,	// FRINTMv4f16
    0U,	// FRINTMv4f32
    0U,	// FRINTMv8f16
    0U,	// FRINTNDr
    0U,	// FRINTNHr
    0U,	// FRINTNSr
    0U,	// FRINTNv2f32
    0U,	// FRINTNv2f64
    0U,	// FRINTNv4f16
    0U,	// FRINTNv4f32
    0U,	// FRINTNv8f16
    0U,	// FRINTPDr
    0U,	// FRINTPHr
    0U,	// FRINTPSr
    0U,	// FRINTPv2f32
    0U,	// FRINTPv2f64
    0U,	// FRINTPv4f16
    0U,	// FRINTPv4f32
    0U,	// FRINTPv8f16
    0U,	// FRINTXDr
    0U,	// FRINTXHr
    0U,	// FRINTXSr
    0U,	// FRINTXv2f32
    0U,	// FRINTXv2f64
    0U,	// FRINTXv4f16
    0U,	// FRINTXv4f32
    0U,	// FRINTXv8f16
    0U,	// FRINTZDr
    0U,	// FRINTZHr
    0U,	// FRINTZSr
    0U,	// FRINTZv2f32
    0U,	// FRINTZv2f64
    0U,	// FRINTZv4f16
    0U,	// FRINTZv4f32
    0U,	// FRINTZv8f16
    0U,	// FRSQRTEv1f16
    0U,	// FRSQRTEv1i32
    0U,	// FRSQRTEv1i64
    0U,	// FRSQRTEv2f32
    0U,	// FRSQRTEv2f64
    0U,	// FRSQRTEv4f16
    0U,	// FRSQRTEv4f32
    0U,	// FRSQRTEv8f16
    0U,	// FRSQRTS16
    0U,	// FRSQRTS32
    0U,	// FRSQRTS64
    16U,	// FRSQRTSv2f32
    16U,	// FRSQRTSv2f64
    16U,	// FRSQRTSv4f16
    16U,	// FRSQRTSv4f32
    16U,	// FRSQRTSv8f16
    0U,	// FSQRTDr
    0U,	// FSQRTHr
    0U,	// FSQRTSr
    0U,	// FSQRTv2f32
    0U,	// FSQRTv2f64
    0U,	// FSQRTv4f16
    0U,	// FSQRTv4f32
    0U,	// FSQRTv8f16
    0U,	// FSUBDrr
    0U,	// FSUBHrr
    0U,	// FSUBSrr
    16U,	// FSUBv2f32
    16U,	// FSUBv2f64
    16U,	// FSUBv4f16
    16U,	// FSUBv4f32
    16U,	// FSUBv8f16
    0U,	// HINT
    0U,	// HLT
    0U,	// HVC
    0U,	// INSvi16gpr
    0U,	// INSvi16lane
    0U,	// INSvi32gpr
    0U,	// INSvi32lane
    0U,	// INSvi64gpr
    0U,	// INSvi64lane
    0U,	// INSvi8gpr
    0U,	// INSvi8lane
    0U,	// ISB
    0U,	// LD1Fourv16b
    0U,	// LD1Fourv16b_POST
    0U,	// LD1Fourv1d
    0U,	// LD1Fourv1d_POST
    0U,	// LD1Fourv2d
    0U,	// LD1Fourv2d_POST
    0U,	// LD1Fourv2s
    0U,	// LD1Fourv2s_POST
    0U,	// LD1Fourv4h
    0U,	// LD1Fourv4h_POST
    0U,	// LD1Fourv4s
    0U,	// LD1Fourv4s_POST
    0U,	// LD1Fourv8b
    0U,	// LD1Fourv8b_POST
    0U,	// LD1Fourv8h
    0U,	// LD1Fourv8h_POST
    0U,	// LD1Onev16b
    0U,	// LD1Onev16b_POST
    0U,	// LD1Onev1d
    0U,	// LD1Onev1d_POST
    0U,	// LD1Onev2d
    0U,	// LD1Onev2d_POST
    0U,	// LD1Onev2s
    0U,	// LD1Onev2s_POST
    0U,	// LD1Onev4h
    0U,	// LD1Onev4h_POST
    0U,	// LD1Onev4s
    0U,	// LD1Onev4s_POST
    0U,	// LD1Onev8b
    0U,	// LD1Onev8b_POST
    0U,	// LD1Onev8h
    0U,	// LD1Onev8h_POST
    0U,	// LD1Rv16b
    0U,	// LD1Rv16b_POST
    0U,	// LD1Rv1d
    0U,	// LD1Rv1d_POST
    0U,	// LD1Rv2d
    0U,	// LD1Rv2d_POST
    0U,	// LD1Rv2s
    0U,	// LD1Rv2s_POST
    0U,	// LD1Rv4h
    0U,	// LD1Rv4h_POST
    0U,	// LD1Rv4s
    0U,	// LD1Rv4s_POST
    0U,	// LD1Rv8b
    0U,	// LD1Rv8b_POST
    0U,	// LD1Rv8h
    0U,	// LD1Rv8h_POST
    0U,	// LD1Threev16b
    0U,	// LD1Threev16b_POST
    0U,	// LD1Threev1d
    0U,	// LD1Threev1d_POST
    0U,	// LD1Threev2d
    0U,	// LD1Threev2d_POST
    0U,	// LD1Threev2s
    0U,	// LD1Threev2s_POST
    0U,	// LD1Threev4h
    0U,	// LD1Threev4h_POST
    0U,	// LD1Threev4s
    0U,	// LD1Threev4s_POST
    0U,	// LD1Threev8b
    0U,	// LD1Threev8b_POST
    0U,	// LD1Threev8h
    0U,	// LD1Threev8h_POST
    0U,	// LD1Twov16b
    0U,	// LD1Twov16b_POST
    0U,	// LD1Twov1d
    0U,	// LD1Twov1d_POST
    0U,	// LD1Twov2d
    0U,	// LD1Twov2d_POST
    0U,	// LD1Twov2s
    0U,	// LD1Twov2s_POST
    0U,	// LD1Twov4h
    0U,	// LD1Twov4h_POST
    0U,	// LD1Twov4s
    0U,	// LD1Twov4s_POST
    0U,	// LD1Twov8b
    0U,	// LD1Twov8b_POST
    0U,	// LD1Twov8h
    0U,	// LD1Twov8h_POST
    0U,	// LD1i16
    0U,	// LD1i16_POST
    0U,	// LD1i32
    0U,	// LD1i32_POST
    0U,	// LD1i64
    0U,	// LD1i64_POST
    0U,	// LD1i8
    0U,	// LD1i8_POST
    0U,	// LD2Rv16b
    0U,	// LD2Rv16b_POST
    0U,	// LD2Rv1d
    0U,	// LD2Rv1d_POST
    0U,	// LD2Rv2d
    0U,	// LD2Rv2d_POST
    0U,	// LD2Rv2s
    0U,	// LD2Rv2s_POST
    0U,	// LD2Rv4h
    0U,	// LD2Rv4h_POST
    0U,	// LD2Rv4s
    0U,	// LD2Rv4s_POST
    0U,	// LD2Rv8b
    0U,	// LD2Rv8b_POST
    0U,	// LD2Rv8h
    0U,	// LD2Rv8h_POST
    0U,	// LD2Twov16b
    0U,	// LD2Twov16b_POST
    0U,	// LD2Twov2d
    0U,	// LD2Twov2d_POST
    0U,	// LD2Twov2s
    0U,	// LD2Twov2s_POST
    0U,	// LD2Twov4h
    0U,	// LD2Twov4h_POST
    0U,	// LD2Twov4s
    0U,	// LD2Twov4s_POST
    0U,	// LD2Twov8b
    0U,	// LD2Twov8b_POST
    0U,	// LD2Twov8h
    0U,	// LD2Twov8h_POST
    0U,	// LD2i16
    0U,	// LD2i16_POST
    0U,	// LD2i32
    0U,	// LD2i32_POST
    0U,	// LD2i64
    0U,	// LD2i64_POST
    0U,	// LD2i8
    0U,	// LD2i8_POST
    0U,	// LD3Rv16b
    0U,	// LD3Rv16b_POST
    0U,	// LD3Rv1d
    0U,	// LD3Rv1d_POST
    0U,	// LD3Rv2d
    0U,	// LD3Rv2d_POST
    0U,	// LD3Rv2s
    0U,	// LD3Rv2s_POST
    0U,	// LD3Rv4h
    0U,	// LD3Rv4h_POST
    0U,	// LD3Rv4s
    0U,	// LD3Rv4s_POST
    0U,	// LD3Rv8b
    0U,	// LD3Rv8b_POST
    0U,	// LD3Rv8h
    0U,	// LD3Rv8h_POST
    0U,	// LD3Threev16b
    0U,	// LD3Threev16b_POST
    0U,	// LD3Threev2d
    0U,	// LD3Threev2d_POST
    0U,	// LD3Threev2s
    0U,	// LD3Threev2s_POST
    0U,	// LD3Threev4h
    0U,	// LD3Threev4h_POST
    0U,	// LD3Threev4s
    0U,	// LD3Threev4s_POST
    0U,	// LD3Threev8b
    0U,	// LD3Threev8b_POST
    0U,	// LD3Threev8h
    0U,	// LD3Threev8h_POST
    0U,	// LD3i16
    0U,	// LD3i16_POST
    0U,	// LD3i32
    0U,	// LD3i32_POST
    0U,	// LD3i64
    0U,	// LD3i64_POST
    0U,	// LD3i8
    0U,	// LD3i8_POST
    0U,	// LD4Fourv16b
    0U,	// LD4Fourv16b_POST
    0U,	// LD4Fourv2d
    0U,	// LD4Fourv2d_POST
    0U,	// LD4Fourv2s
    0U,	// LD4Fourv2s_POST
    0U,	// LD4Fourv4h
    0U,	// LD4Fourv4h_POST
    0U,	// LD4Fourv4s
    0U,	// LD4Fourv4s_POST
    0U,	// LD4Fourv8b
    0U,	// LD4Fourv8b_POST
    0U,	// LD4Fourv8h
    0U,	// LD4Fourv8h_POST
    0U,	// LD4Rv16b
    0U,	// LD4Rv16b_POST
    0U,	// LD4Rv1d
    0U,	// LD4Rv1d_POST
    0U,	// LD4Rv2d
    0U,	// LD4Rv2d_POST
    0U,	// LD4Rv2s
    0U,	// LD4Rv2s_POST
    0U,	// LD4Rv4h
    0U,	// LD4Rv4h_POST
    0U,	// LD4Rv4s
    0U,	// LD4Rv4s_POST
    0U,	// LD4Rv8b
    0U,	// LD4Rv8b_POST
    0U,	// LD4Rv8h
    0U,	// LD4Rv8h_POST
    0U,	// LD4i16
    0U,	// LD4i16_POST
    0U,	// LD4i32
    0U,	// LD4i32_POST
    0U,	// LD4i64
    0U,	// LD4i64_POST
    0U,	// LD4i8
    0U,	// LD4i8_POST
    0U,	// LDADDAB
    0U,	// LDADDAH
    0U,	// LDADDALB
    0U,	// LDADDALH
    0U,	// LDADDALW
    0U,	// LDADDALX
    0U,	// LDADDAW
    0U,	// LDADDAX
    0U,	// LDADDB
    0U,	// LDADDH
    0U,	// LDADDLB
    0U,	// LDADDLH
    0U,	// LDADDLW
    0U,	// LDADDLX
    0U,	// LDADDW
    0U,	// LDADDX
    4U,	// LDAPRB
    4U,	// LDAPRH
    4U,	// LDAPRW
    4U,	// LDAPRX
    4U,	// LDARB
    4U,	// LDARH
    4U,	// LDARW
    4U,	// LDARX
    1537U,	// LDAXPW
    1537U,	// LDAXPX
    4U,	// LDAXRB
    4U,	// LDAXRH
    4U,	// LDAXRW
    4U,	// LDAXRX
    0U,	// LDCLRAB
    0U,	// LDCLRAH
    0U,	// LDCLRALB
    0U,	// LDCLRALH
    0U,	// LDCLRALW
    0U,	// LDCLRALX
    0U,	// LDCLRAW
    0U,	// LDCLRAX
    0U,	// LDCLRB
    0U,	// LDCLRH
    0U,	// LDCLRLB
    0U,	// LDCLRLH
    0U,	// LDCLRLW
    0U,	// LDCLRLX
    0U,	// LDCLRW
    0U,	// LDCLRX
    0U,	// LDEORAB
    0U,	// LDEORAH
    0U,	// LDEORALB
    0U,	// LDEORALH
    0U,	// LDEORALW
    0U,	// LDEORALX
    0U,	// LDEORAW
    0U,	// LDEORAX
    0U,	// LDEORB
    0U,	// LDEORH
    0U,	// LDEORLB
    0U,	// LDEORLH
    0U,	// LDEORLW
    0U,	// LDEORLX
    0U,	// LDEORW
    0U,	// LDEORX
    4U,	// LDLARB
    4U,	// LDLARH
    4U,	// LDLARW
    4U,	// LDLARX
    25601U,	// LDNPDi
    33793U,	// LDNPQi
    41985U,	// LDNPSi
    41985U,	// LDNPWi
    25601U,	// LDNPXi
    25601U,	// LDPDi
    52353U,	// LDPDpost
    50305U,	// LDPDpre
    33793U,	// LDPQi
    60545U,	// LDPQpost
    58497U,	// LDPQpre
    41985U,	// LDPSWi
    3201U,	// LDPSWpost
    1153U,	// LDPSWpre
    41985U,	// LDPSi
    3201U,	// LDPSpost
    1153U,	// LDPSpre
    41985U,	// LDPWi
    3201U,	// LDPWpost
    1153U,	// LDPWpre
    25601U,	// LDPXi
    52353U,	// LDPXpost
    50305U,	// LDPXpre
    144U,	// LDRAAindexed
    160U,	// LDRAAwriteback
    144U,	// LDRABindexed
    160U,	// LDRABwriteback
    5U,	// LDRBBpost
    3712U,	// LDRBBpre
    9216U,	// LDRBBroW
    17408U,	// LDRBBroX
    176U,	// LDRBBui
    5U,	// LDRBpost
    3712U,	// LDRBpre
    9216U,	// LDRBroW
    17408U,	// LDRBroX
    176U,	// LDRBui
    0U,	// LDRDl
    5U,	// LDRDpost
    3712U,	// LDRDpre
    25600U,	// LDRDroW
    33792U,	// LDRDroX
    192U,	// LDRDui
    5U,	// LDRHHpost
    3712U,	// LDRHHpre
    41984U,	// LDRHHroW
    50176U,	// LDRHHroX
    208U,	// LDRHHui
    5U,	// LDRHpost
    3712U,	// LDRHpre
    41984U,	// LDRHroW
    50176U,	// LDRHroX
    208U,	// LDRHui
    0U,	// LDRQl
    5U,	// LDRQpost
    3712U,	// LDRQpre
    58368U,	// LDRQroW
    1024U,	// LDRQroX
    224U,	// LDRQui
    5U,	// LDRSBWpost
    3712U,	// LDRSBWpre
    9216U,	// LDRSBWroW
    17408U,	// LDRSBWroX
    176U,	// LDRSBWui
    5U,	// LDRSBXpost
    3712U,	// LDRSBXpre
    9216U,	// LDRSBXroW
    17408U,	// LDRSBXroX
    176U,	// LDRSBXui
    5U,	// LDRSHWpost
    3712U,	// LDRSHWpre
    41984U,	// LDRSHWroW
    50176U,	// LDRSHWroX
    208U,	// LDRSHWui
    5U,	// LDRSHXpost
    3712U,	// LDRSHXpre
    41984U,	// LDRSHXroW
    50176U,	// LDRSHXroX
    208U,	// LDRSHXui
    0U,	// LDRSWl
    5U,	// LDRSWpost
    3712U,	// LDRSWpre
    9216U,	// LDRSWroW
    17408U,	// LDRSWroX
    240U,	// LDRSWui
    0U,	// LDRSl
    5U,	// LDRSpost
    3712U,	// LDRSpre
    9216U,	// LDRSroW
    17408U,	// LDRSroX
    240U,	// LDRSui
    0U,	// LDRWl
    5U,	// LDRWpost
    3712U,	// LDRWpre
    9216U,	// LDRWroW
    17408U,	// LDRWroX
    240U,	// LDRWui
    0U,	// LDRXl
    5U,	// LDRXpost
    3712U,	// LDRXpre
    25600U,	// LDRXroW
    33792U,	// LDRXroX
    192U,	// LDRXui
    0U,	// LDSETAB
    0U,	// LDSETAH
    0U,	// LDSETALB
    0U,	// LDSETALH
    0U,	// LDSETALW
    0U,	// LDSETALX
    0U,	// LDSETAW
    0U,	// LDSETAX
    0U,	// LDSETB
    0U,	// LDSETH
    0U,	// LDSETLB
    0U,	// LDSETLH
    0U,	// LDSETLW
    0U,	// LDSETLX
    0U,	// LDSETW
    0U,	// LDSETX
    0U,	// LDSMAXAB
    0U,	// LDSMAXAH
    0U,	// LDSMAXALB
    0U,	// LDSMAXALH
    0U,	// LDSMAXALW
    0U,	// LDSMAXALX
    0U,	// LDSMAXAW
    0U,	// LDSMAXAX
    0U,	// LDSMAXB
    0U,	// LDSMAXH
    0U,	// LDSMAXLB
    0U,	// LDSMAXLH
    0U,	// LDSMAXLW
    0U,	// LDSMAXLX
    0U,	// LDSMAXW
    0U,	// LDSMAXX
    0U,	// LDSMINAB
    0U,	// LDSMINAH
    0U,	// LDSMINALB
    0U,	// LDSMINALH
    0U,	// LDSMINALW
    0U,	// LDSMINALX
    0U,	// LDSMINAW
    0U,	// LDSMINAX
    0U,	// LDSMINB
    0U,	// LDSMINH
    0U,	// LDSMINLB
    0U,	// LDSMINLH
    0U,	// LDSMINLW
    0U,	// LDSMINLX
    0U,	// LDSMINW
    0U,	// LDSMINX
    1536U,	// LDTRBi
    1536U,	// LDTRHi
    1536U,	// LDTRSBWi
    1536U,	// LDTRSBXi
    1536U,	// LDTRSHWi
    1536U,	// LDTRSHXi
    1536U,	// LDTRSWi
    1536U,	// LDTRWi
    1536U,	// LDTRXi
    0U,	// LDUMAXAB
    0U,	// LDUMAXAH
    0U,	// LDUMAXALB
    0U,	// LDUMAXALH
    0U,	// LDUMAXALW
    0U,	// LDUMAXALX
    0U,	// LDUMAXAW
    0U,	// LDUMAXAX
    0U,	// LDUMAXB
    0U,	// LDUMAXH
    0U,	// LDUMAXLB
    0U,	// LDUMAXLH
    0U,	// LDUMAXLW
    0U,	// LDUMAXLX
    0U,	// LDUMAXW
    0U,	// LDUMAXX
    0U,	// LDUMINAB
    0U,	// LDUMINAH
    0U,	// LDUMINALB
    0U,	// LDUMINALH
    0U,	// LDUMINALW
    0U,	// LDUMINALX
    0U,	// LDUMINAW
    0U,	// LDUMINAX
    0U,	// LDUMINB
    0U,	// LDUMINH
    0U,	// LDUMINLB
    0U,	// LDUMINLH
    0U,	// LDUMINLW
    0U,	// LDUMINLX
    0U,	// LDUMINW
    0U,	// LDUMINX
    1536U,	// LDURBBi
    1536U,	// LDURBi
    1536U,	// LDURDi
    1536U,	// LDURHHi
    1536U,	// LDURHi
    1536U,	// LDURQi
    1536U,	// LDURSBWi
    1536U,	// LDURSBXi
    1536U,	// LDURSHWi
    1536U,	// LDURSHXi
    1536U,	// LDURSWi
    1536U,	// LDURSi
    1536U,	// LDURWi
    1536U,	// LDURXi
    1537U,	// LDXPW
    1537U,	// LDXPX
    4U,	// LDXRB
    4U,	// LDXRH
    4U,	// LDXRW
    4U,	// LDXRX
    0U,	// LOADgot
    0U,	// LSLVWr
    0U,	// LSLVXr
    0U,	// LSRVWr
    0U,	// LSRVXr
    17408U,	// MADDWrrr
    17408U,	// MADDXrrr
    32U,	// MLAv16i8
    32U,	// MLAv2i32
    2080U,	// MLAv2i32_indexed
    32U,	// MLAv4i16
    2080U,	// MLAv4i16_indexed
    32U,	// MLAv4i32
    2080U,	// MLAv4i32_indexed
    32U,	// MLAv8i16
    2080U,	// MLAv8i16_indexed
    32U,	// MLAv8i8
    32U,	// MLSv16i8
    32U,	// MLSv2i32
    2080U,	// MLSv2i32_indexed
    32U,	// MLSv4i16
    2080U,	// MLSv4i16_indexed
    32U,	// MLSv4i32
    2080U,	// MLSv4i32_indexed
    32U,	// MLSv8i16
    2080U,	// MLSv8i16_indexed
    32U,	// MLSv8i8
    0U,	// MOVID
    0U,	// MOVIv16b_ns
    0U,	// MOVIv2d_ns
    5U,	// MOVIv2i32
    5U,	// MOVIv2s_msl
    5U,	// MOVIv4i16
    5U,	// MOVIv4i32
    5U,	// MOVIv4s_msl
    0U,	// MOVIv8b_ns
    5U,	// MOVIv8i16
    0U,	// MOVKWi
    0U,	// MOVKXi
    5U,	// MOVNWi
    5U,	// MOVNXi
    5U,	// MOVZWi
    5U,	// MOVZXi
    0U,	// MOVaddr
    0U,	// MOVaddrBA
    0U,	// MOVaddrCP
    0U,	// MOVaddrEXT
    0U,	// MOVaddrJT
    0U,	// MOVaddrTLS
    0U,	// MOVbaseTLS
    0U,	// MOVi32imm
    0U,	// MOVi64imm
    0U,	// MRS
    0U,	// MSR
    0U,	// MSRpstateImm1
    0U,	// MSRpstateImm4
    17408U,	// MSUBWrrr
    17408U,	// MSUBXrrr
    16U,	// MULv16i8
    16U,	// MULv2i32
    2576U,	// MULv2i32_indexed
    16U,	// MULv4i16
    2576U,	// MULv4i16_indexed
    16U,	// MULv4i32
    2576U,	// MULv4i32_indexed
    16U,	// MULv8i16
    2576U,	// MULv8i16_indexed
    16U,	// MULv8i8
    5U,	// MVNIv2i32
    5U,	// MVNIv2s_msl
    5U,	// MVNIv4i16
    5U,	// MVNIv4i32
    5U,	// MVNIv4s_msl
    5U,	// MVNIv8i16
    0U,	// NEGv16i8
    0U,	// NEGv1i64
    0U,	// NEGv2i32
    0U,	// NEGv2i64
    0U,	// NEGv4i16
    0U,	// NEGv4i32
    0U,	// NEGv8i16
    0U,	// NEGv8i8
    0U,	// NOTv16i8
    0U,	// NOTv8i8
    0U,	// ORNWrr
    64U,	// ORNWrs
    0U,	// ORNXrr
    64U,	// ORNXrs
    16U,	// ORNv16i8
    16U,	// ORNv8i8
    96U,	// ORRWri
    0U,	// ORRWrr
    64U,	// ORRWrs
    112U,	// ORRXri
    0U,	// ORRXrr
    64U,	// ORRXrs
    16U,	// ORRv16i8
    0U,	// ORRv2i32
    0U,	// ORRv4i16
    0U,	// ORRv4i32
    0U,	// ORRv8i16
    16U,	// ORRv8i8
    0U,	// PACDA
    0U,	// PACDB
    0U,	// PACDZA
    0U,	// PACDZB
    0U,	// PACGA
    0U,	// PACIA
    0U,	// PACIA1716
    0U,	// PACIASP
    0U,	// PACIAZ
    0U,	// PACIB
    0U,	// PACIB1716
    0U,	// PACIBSP
    0U,	// PACIBZ
    0U,	// PACIZA
    0U,	// PACIZB
    16U,	// PMULLv16i8
    16U,	// PMULLv1i64
    16U,	// PMULLv2i64
    16U,	// PMULLv8i8
    16U,	// PMULv16i8
    16U,	// PMULv8i8
    0U,	// PRFMl
    25600U,	// PRFMroW
    33792U,	// PRFMroX
    192U,	// PRFMui
    1536U,	// PRFUMi
    16U,	// RADDHNv2i64_v2i32
    32U,	// RADDHNv2i64_v4i32
    16U,	// RADDHNv4i32_v4i16
    32U,	// RADDHNv4i32_v8i16
    32U,	// RADDHNv8i16_v16i8
    16U,	// RADDHNv8i16_v8i8
    0U,	// RBITWr
    0U,	// RBITXr
    0U,	// RBITv16i8
    0U,	// RBITv8i8
    0U,	// RET
    0U,	// RETAA
    0U,	// RETAB
    0U,	// RET_ReallyLR
    0U,	// REV16Wr
    0U,	// REV16Xr
    0U,	// REV16v16i8
    0U,	// REV16v8i8
    0U,	// REV32Xr
    0U,	// REV32v16i8
    0U,	// REV32v4i16
    0U,	// REV32v8i16
    0U,	// REV32v8i8
    0U,	// REV64v16i8
    0U,	// REV64v2i32
    0U,	// REV64v4i16
    0U,	// REV64v4i32
    0U,	// REV64v8i16
    0U,	// REV64v8i8
    0U,	// REVWr
    0U,	// REVXr
    0U,	// RORVWr
    0U,	// RORVXr
    128U,	// RSHRNv16i8_shift
    0U,	// RSHRNv2i32_shift
    0U,	// RSHRNv4i16_shift
    128U,	// RSHRNv4i32_shift
    128U,	// RSHRNv8i16_shift
    0U,	// RSHRNv8i8_shift
    16U,	// RSUBHNv2i64_v2i32
    32U,	// RSUBHNv2i64_v4i32
    16U,	// RSUBHNv4i32_v4i16
    32U,	// RSUBHNv4i32_v8i16
    32U,	// RSUBHNv8i16_v16i8
    16U,	// RSUBHNv8i16_v8i8
    32U,	// SABALv16i8_v8i16
    32U,	// SABALv2i32_v2i64
    32U,	// SABALv4i16_v4i32
    32U,	// SABALv4i32_v2i64
    32U,	// SABALv8i16_v4i32
    32U,	// SABALv8i8_v8i16
    32U,	// SABAv16i8
    32U,	// SABAv2i32
    32U,	// SABAv4i16
    32U,	// SABAv4i32
    32U,	// SABAv8i16
    32U,	// SABAv8i8
    16U,	// SABDLv16i8_v8i16
    16U,	// SABDLv2i32_v2i64
    16U,	// SABDLv4i16_v4i32
    16U,	// SABDLv4i32_v2i64
    16U,	// SABDLv8i16_v4i32
    16U,	// SABDLv8i8_v8i16
    16U,	// SABDv16i8
    16U,	// SABDv2i32
    16U,	// SABDv4i16
    16U,	// SABDv4i32
    16U,	// SABDv8i16
    16U,	// SABDv8i8
    0U,	// SADALPv16i8_v8i16
    0U,	// SADALPv2i32_v1i64
    0U,	// SADALPv4i16_v2i32
    0U,	// SADALPv4i32_v2i64
    0U,	// SADALPv8i16_v4i32
    0U,	// SADALPv8i8_v4i16
    0U,	// SADDLPv16i8_v8i16
    0U,	// SADDLPv2i32_v1i64
    0U,	// SADDLPv4i16_v2i32
    0U,	// SADDLPv4i32_v2i64
    0U,	// SADDLPv8i16_v4i32
    0U,	// SADDLPv8i8_v4i16
    0U,	// SADDLVv16i8v
    0U,	// SADDLVv4i16v
    0U,	// SADDLVv4i32v
    0U,	// SADDLVv8i16v
    0U,	// SADDLVv8i8v
    16U,	// SADDLv16i8_v8i16
    16U,	// SADDLv2i32_v2i64
    16U,	// SADDLv4i16_v4i32
    16U,	// SADDLv4i32_v2i64
    16U,	// SADDLv8i16_v4i32
    16U,	// SADDLv8i8_v8i16
    16U,	// SADDWv16i8_v8i16
    16U,	// SADDWv2i32_v2i64
    16U,	// SADDWv4i16_v4i32
    16U,	// SADDWv4i32_v2i64
    16U,	// SADDWv8i16_v4i32
    16U,	// SADDWv8i8_v8i16
    0U,	// SBCSWr
    0U,	// SBCSXr
    0U,	// SBCWr
    0U,	// SBCXr
    17408U,	// SBFMWri
    17408U,	// SBFMXri
    0U,	// SCVTFSWDri
    0U,	// SCVTFSWHri
    0U,	// SCVTFSWSri
    0U,	// SCVTFSXDri
    0U,	// SCVTFSXHri
    0U,	// SCVTFSXSri
    0U,	// SCVTFUWDri
    0U,	// SCVTFUWHri
    0U,	// SCVTFUWSri
    0U,	// SCVTFUXDri
    0U,	// SCVTFUXHri
    0U,	// SCVTFUXSri
    0U,	// SCVTFd
    0U,	// SCVTFh
    0U,	// SCVTFs
    0U,	// SCVTFv1i16
    0U,	// SCVTFv1i32
    0U,	// SCVTFv1i64
    0U,	// SCVTFv2f32
    0U,	// SCVTFv2f64
    0U,	// SCVTFv2i32_shift
    0U,	// SCVTFv2i64_shift
    0U,	// SCVTFv4f16
    0U,	// SCVTFv4f32
    0U,	// SCVTFv4i16_shift
    0U,	// SCVTFv4i32_shift
    0U,	// SCVTFv8f16
    0U,	// SCVTFv8i16_shift
    0U,	// SDIVWr
    0U,	// SDIVXr
    0U,	// SDOT2S
    0U,	// SDOT4S
    2080U,	// SDOTIDX2S
    2080U,	// SDOTIDX4S
    32U,	// SHA1Crrr
    0U,	// SHA1Hrr
    32U,	// SHA1Mrrr
    32U,	// SHA1Prrr
    32U,	// SHA1SU0rrr
    0U,	// SHA1SU1rr
    32U,	// SHA256H2rrr
    32U,	// SHA256Hrrr
    0U,	// SHA256SU0rr
    32U,	// SHA256SU1rrr
    16U,	// SHADDv16i8
    16U,	// SHADDv2i32
    16U,	// SHADDv4i16
    16U,	// SHADDv4i32
    16U,	// SHADDv8i16
    16U,	// SHADDv8i8
    6U,	// SHLLv16i8
    6U,	// SHLLv2i32
    7U,	// SHLLv4i16
    6U,	// SHLLv4i32
    7U,	// SHLLv8i16
    6U,	// SHLLv8i8
    0U,	// SHLd
    0U,	// SHLv16i8_shift
    0U,	// SHLv2i32_shift
    0U,	// SHLv2i64_shift
    0U,	// SHLv4i16_shift
    0U,	// SHLv4i32_shift
    0U,	// SHLv8i16_shift
    0U,	// SHLv8i8_shift
    128U,	// SHRNv16i8_shift
    0U,	// SHRNv2i32_shift
    0U,	// SHRNv4i16_shift
    128U,	// SHRNv4i32_shift
    128U,	// SHRNv8i16_shift
    0U,	// SHRNv8i8_shift
    16U,	// SHSUBv16i8
    16U,	// SHSUBv2i32
    16U,	// SHSUBv4i16
    16U,	// SHSUBv4i32
    16U,	// SHSUBv8i16
    16U,	// SHSUBv8i8
    128U,	// SLId
    128U,	// SLIv16i8_shift
    128U,	// SLIv2i32_shift
    128U,	// SLIv2i64_shift
    128U,	// SLIv4i16_shift
    128U,	// SLIv4i32_shift
    128U,	// SLIv8i16_shift
    128U,	// SLIv8i8_shift
    17408U,	// SMADDLrrr
    16U,	// SMAXPv16i8
    16U,	// SMAXPv2i32
    16U,	// SMAXPv4i16
    16U,	// SMAXPv4i32
    16U,	// SMAXPv8i16
    16U,	// SMAXPv8i8
    0U,	// SMAXVv16i8v
    0U,	// SMAXVv4i16v
    0U,	// SMAXVv4i32v
    0U,	// SMAXVv8i16v
    0U,	// SMAXVv8i8v
    16U,	// SMAXv16i8
    16U,	// SMAXv2i32
    16U,	// SMAXv4i16
    16U,	// SMAXv4i32
    16U,	// SMAXv8i16
    16U,	// SMAXv8i8
    0U,	// SMC
    16U,	// SMINPv16i8
    16U,	// SMINPv2i32
    16U,	// SMINPv4i16
    16U,	// SMINPv4i32
    16U,	// SMINPv8i16
    16U,	// SMINPv8i8
    0U,	// SMINVv16i8v
    0U,	// SMINVv4i16v
    0U,	// SMINVv4i32v
    0U,	// SMINVv8i16v
    0U,	// SMINVv8i8v
    16U,	// SMINv16i8
    16U,	// SMINv2i32
    16U,	// SMINv4i16
    16U,	// SMINv4i32
    16U,	// SMINv8i16
    16U,	// SMINv8i8
    32U,	// SMLALv16i8_v8i16
    2080U,	// SMLALv2i32_indexed
    32U,	// SMLALv2i32_v2i64
    2080U,	// SMLALv4i16_indexed
    32U,	// SMLALv4i16_v4i32
    2080U,	// SMLALv4i32_indexed
    32U,	// SMLALv4i32_v2i64
    2080U,	// SMLALv8i16_indexed
    32U,	// SMLALv8i16_v4i32
    32U,	// SMLALv8i8_v8i16
    32U,	// SMLSLv16i8_v8i16
    2080U,	// SMLSLv2i32_indexed
    32U,	// SMLSLv2i32_v2i64
    2080U,	// SMLSLv4i16_indexed
    32U,	// SMLSLv4i16_v4i32
    2080U,	// SMLSLv4i32_indexed
    32U,	// SMLSLv4i32_v2i64
    2080U,	// SMLSLv8i16_indexed
    32U,	// SMLSLv8i16_v4i32
    32U,	// SMLSLv8i8_v8i16
    2U,	// SMOVvi16to32
    2U,	// SMOVvi16to64
    2U,	// SMOVvi32to64
    2U,	// SMOVvi8to32
    2U,	// SMOVvi8to64
    17408U,	// SMSUBLrrr
    0U,	// SMULHrr
    16U,	// SMULLv16i8_v8i16
    2576U,	// SMULLv2i32_indexed
    16U,	// SMULLv2i32_v2i64
    2576U,	// SMULLv4i16_indexed
    16U,	// SMULLv4i16_v4i32
    2576U,	// SMULLv4i32_indexed
    16U,	// SMULLv4i32_v2i64
    2576U,	// SMULLv8i16_indexed
    16U,	// SMULLv8i16_v4i32
    16U,	// SMULLv8i8_v8i16
    0U,	// SQABSv16i8
    0U,	// SQABSv1i16
    0U,	// SQABSv1i32
    0U,	// SQABSv1i64
    0U,	// SQABSv1i8
    0U,	// SQABSv2i32
    0U,	// SQABSv2i64
    0U,	// SQABSv4i16
    0U,	// SQABSv4i32
    0U,	// SQABSv8i16
    0U,	// SQABSv8i8
    16U,	// SQADDv16i8
    0U,	// SQADDv1i16
    0U,	// SQADDv1i32
    0U,	// SQADDv1i64
    0U,	// SQADDv1i8
    16U,	// SQADDv2i32
    16U,	// SQADDv2i64
    16U,	// SQADDv4i16
    16U,	// SQADDv4i32
    16U,	// SQADDv8i16
    16U,	// SQADDv8i8
    128U,	// SQDMLALi16
    128U,	// SQDMLALi32
    2080U,	// SQDMLALv1i32_indexed
    2080U,	// SQDMLALv1i64_indexed
    2080U,	// SQDMLALv2i32_indexed
    32U,	// SQDMLALv2i32_v2i64
    2080U,	// SQDMLALv4i16_indexed
    32U,	// SQDMLALv4i16_v4i32
    2080U,	// SQDMLALv4i32_indexed
    32U,	// SQDMLALv4i32_v2i64
    2080U,	// SQDMLALv8i16_indexed
    32U,	// SQDMLALv8i16_v4i32
    128U,	// SQDMLSLi16
    128U,	// SQDMLSLi32
    2080U,	// SQDMLSLv1i32_indexed
    2080U,	// SQDMLSLv1i64_indexed
    2080U,	// SQDMLSLv2i32_indexed
    32U,	// SQDMLSLv2i32_v2i64
    2080U,	// SQDMLSLv4i16_indexed
    32U,	// SQDMLSLv4i16_v4i32
    2080U,	// SQDMLSLv4i32_indexed
    32U,	// SQDMLSLv4i32_v2i64
    2080U,	// SQDMLSLv8i16_indexed
    32U,	// SQDMLSLv8i16_v4i32
    0U,	// SQDMULHv1i16
    2576U,	// SQDMULHv1i16_indexed
    0U,	// SQDMULHv1i32
    2576U,	// SQDMULHv1i32_indexed
    16U,	// SQDMULHv2i32
    2576U,	// SQDMULHv2i32_indexed
    16U,	// SQDMULHv4i16
    2576U,	// SQDMULHv4i16_indexed
    16U,	// SQDMULHv4i32
    2576U,	// SQDMULHv4i32_indexed
    16U,	// SQDMULHv8i16
    2576U,	// SQDMULHv8i16_indexed
    0U,	// SQDMULLi16
    0U,	// SQDMULLi32
    2576U,	// SQDMULLv1i32_indexed
    2576U,	// SQDMULLv1i64_indexed
    2576U,	// SQDMULLv2i32_indexed
    16U,	// SQDMULLv2i32_v2i64
    2576U,	// SQDMULLv4i16_indexed
    16U,	// SQDMULLv4i16_v4i32
    2576U,	// SQDMULLv4i32_indexed
    16U,	// SQDMULLv4i32_v2i64
    2576U,	// SQDMULLv8i16_indexed
    16U,	// SQDMULLv8i16_v4i32
    0U,	// SQNEGv16i8
    0U,	// SQNEGv1i16
    0U,	// SQNEGv1i32
    0U,	// SQNEGv1i64
    0U,	// SQNEGv1i8
    0U,	// SQNEGv2i32
    0U,	// SQNEGv2i64
    0U,	// SQNEGv4i16
    0U,	// SQNEGv4i32
    0U,	// SQNEGv8i16
    0U,	// SQNEGv8i8
    2080U,	// SQRDMLAHi16_indexed
    2080U,	// SQRDMLAHi32_indexed
    128U,	// SQRDMLAHv1i16
    128U,	// SQRDMLAHv1i32
    32U,	// SQRDMLAHv2i32
    2080U,	// SQRDMLAHv2i32_indexed
    32U,	// SQRDMLAHv4i16
    2080U,	// SQRDMLAHv4i16_indexed
    32U,	// SQRDMLAHv4i32
    2080U,	// SQRDMLAHv4i32_indexed
    32U,	// SQRDMLAHv8i16
    2080U,	// SQRDMLAHv8i16_indexed
    2080U,	// SQRDMLSHi16_indexed
    2080U,	// SQRDMLSHi32_indexed
    128U,	// SQRDMLSHv1i16
    128U,	// SQRDMLSHv1i32
    32U,	// SQRDMLSHv2i32
    2080U,	// SQRDMLSHv2i32_indexed
    32U,	// SQRDMLSHv4i16
    2080U,	// SQRDMLSHv4i16_indexed
    32U,	// SQRDMLSHv4i32
    2080U,	// SQRDMLSHv4i32_indexed
    32U,	// SQRDMLSHv8i16
    2080U,	// SQRDMLSHv8i16_indexed
    0U,	// SQRDMULHv1i16
    2576U,	// SQRDMULHv1i16_indexed
    0U,	// SQRDMULHv1i32
    2576U,	// SQRDMULHv1i32_indexed
    16U,	// SQRDMULHv2i32
    2576U,	// SQRDMULHv2i32_indexed
    16U,	// SQRDMULHv4i16
    2576U,	// SQRDMULHv4i16_indexed
    16U,	// SQRDMULHv4i32
    2576U,	// SQRDMULHv4i32_indexed
    16U,	// SQRDMULHv8i16
    2576U,	// SQRDMULHv8i16_indexed
    16U,	// SQRSHLv16i8
    0U,	// SQRSHLv1i16
    0U,	// SQRSHLv1i32
    0U,	// SQRSHLv1i64
    0U,	// SQRSHLv1i8
    16U,	// SQRSHLv2i32
    16U,	// SQRSHLv2i64
    16U,	// SQRSHLv4i16
    16U,	// SQRSHLv4i32
    16U,	// SQRSHLv8i16
    16U,	// SQRSHLv8i8
    0U,	// SQRSHRNb
    0U,	// SQRSHRNh
    0U,	// SQRSHRNs
    128U,	// SQRSHRNv16i8_shift
    0U,	// SQRSHRNv2i32_shift
    0U,	// SQRSHRNv4i16_shift
    128U,	// SQRSHRNv4i32_shift
    128U,	// SQRSHRNv8i16_shift
    0U,	// SQRSHRNv8i8_shift
    0U,	// SQRSHRUNb
    0U,	// SQRSHRUNh
    0U,	// SQRSHRUNs
    128U,	// SQRSHRUNv16i8_shift
    0U,	// SQRSHRUNv2i32_shift
    0U,	// SQRSHRUNv4i16_shift
    128U,	// SQRSHRUNv4i32_shift
    128U,	// SQRSHRUNv8i16_shift
    0U,	// SQRSHRUNv8i8_shift
    0U,	// SQSHLUb
    0U,	// SQSHLUd
    0U,	// SQSHLUh
    0U,	// SQSHLUs
    0U,	// SQSHLUv16i8_shift
    0U,	// SQSHLUv2i32_shift
    0U,	// SQSHLUv2i64_shift
    0U,	// SQSHLUv4i16_shift
    0U,	// SQSHLUv4i32_shift
    0U,	// SQSHLUv8i16_shift
    0U,	// SQSHLUv8i8_shift
    0U,	// SQSHLb
    0U,	// SQSHLd
    0U,	// SQSHLh
    0U,	// SQSHLs
    16U,	// SQSHLv16i8
    0U,	// SQSHLv16i8_shift
    0U,	// SQSHLv1i16
    0U,	// SQSHLv1i32
    0U,	// SQSHLv1i64
    0U,	// SQSHLv1i8
    16U,	// SQSHLv2i32
    0U,	// SQSHLv2i32_shift
    16U,	// SQSHLv2i64
    0U,	// SQSHLv2i64_shift
    16U,	// SQSHLv4i16
    0U,	// SQSHLv4i16_shift
    16U,	// SQSHLv4i32
    0U,	// SQSHLv4i32_shift
    16U,	// SQSHLv8i16
    0U,	// SQSHLv8i16_shift
    16U,	// SQSHLv8i8
    0U,	// SQSHLv8i8_shift
    0U,	// SQSHRNb
    0U,	// SQSHRNh
    0U,	// SQSHRNs
    128U,	// SQSHRNv16i8_shift
    0U,	// SQSHRNv2i32_shift
    0U,	// SQSHRNv4i16_shift
    128U,	// SQSHRNv4i32_shift
    128U,	// SQSHRNv8i16_shift
    0U,	// SQSHRNv8i8_shift
    0U,	// SQSHRUNb
    0U,	// SQSHRUNh
    0U,	// SQSHRUNs
    128U,	// SQSHRUNv16i8_shift
    0U,	// SQSHRUNv2i32_shift
    0U,	// SQSHRUNv4i16_shift
    128U,	// SQSHRUNv4i32_shift
    128U,	// SQSHRUNv8i16_shift
    0U,	// SQSHRUNv8i8_shift
    16U,	// SQSUBv16i8
    0U,	// SQSUBv1i16
    0U,	// SQSUBv1i32
    0U,	// SQSUBv1i64
    0U,	// SQSUBv1i8
    16U,	// SQSUBv2i32
    16U,	// SQSUBv2i64
    16U,	// SQSUBv4i16
    16U,	// SQSUBv4i32
    16U,	// SQSUBv8i16
    16U,	// SQSUBv8i8
    0U,	// SQXTNv16i8
    0U,	// SQXTNv1i16
    0U,	// SQXTNv1i32
    0U,	// SQXTNv1i8
    0U,	// SQXTNv2i32
    0U,	// SQXTNv4i16
    0U,	// SQXTNv4i32
    0U,	// SQXTNv8i16
    0U,	// SQXTNv8i8
    0U,	// SQXTUNv16i8
    0U,	// SQXTUNv1i16
    0U,	// SQXTUNv1i32
    0U,	// SQXTUNv1i8
    0U,	// SQXTUNv2i32
    0U,	// SQXTUNv4i16
    0U,	// SQXTUNv4i32
    0U,	// SQXTUNv8i16
    0U,	// SQXTUNv8i8
    16U,	// SRHADDv16i8
    16U,	// SRHADDv2i32
    16U,	// SRHADDv4i16
    16U,	// SRHADDv4i32
    16U,	// SRHADDv8i16
    16U,	// SRHADDv8i8
    128U,	// SRId
    128U,	// SRIv16i8_shift
    128U,	// SRIv2i32_shift
    128U,	// SRIv2i64_shift
    128U,	// SRIv4i16_shift
    128U,	// SRIv4i32_shift
    128U,	// SRIv8i16_shift
    128U,	// SRIv8i8_shift
    16U,	// SRSHLv16i8
    0U,	// SRSHLv1i64
    16U,	// SRSHLv2i32
    16U,	// SRSHLv2i64
    16U,	// SRSHLv4i16
    16U,	// SRSHLv4i32
    16U,	// SRSHLv8i16
    16U,	// SRSHLv8i8
    0U,	// SRSHRd
    0U,	// SRSHRv16i8_shift
    0U,	// SRSHRv2i32_shift
    0U,	// SRSHRv2i64_shift
    0U,	// SRSHRv4i16_shift
    0U,	// SRSHRv4i32_shift
    0U,	// SRSHRv8i16_shift
    0U,	// SRSHRv8i8_shift
    128U,	// SRSRAd
    128U,	// SRSRAv16i8_shift
    128U,	// SRSRAv2i32_shift
    128U,	// SRSRAv2i64_shift
    128U,	// SRSRAv4i16_shift
    128U,	// SRSRAv4i32_shift
    128U,	// SRSRAv8i16_shift
    128U,	// SRSRAv8i8_shift
    0U,	// SSHLLv16i8_shift
    0U,	// SSHLLv2i32_shift
    0U,	// SSHLLv4i16_shift
    0U,	// SSHLLv4i32_shift
    0U,	// SSHLLv8i16_shift
    0U,	// SSHLLv8i8_shift
    16U,	// SSHLv16i8
    0U,	// SSHLv1i64
    16U,	// SSHLv2i32
    16U,	// SSHLv2i64
    16U,	// SSHLv4i16
    16U,	// SSHLv4i32
    16U,	// SSHLv8i16
    16U,	// SSHLv8i8
    0U,	// SSHRd
    0U,	// SSHRv16i8_shift
    0U,	// SSHRv2i32_shift
    0U,	// SSHRv2i64_shift
    0U,	// SSHRv4i16_shift
    0U,	// SSHRv4i32_shift
    0U,	// SSHRv8i16_shift
    0U,	// SSHRv8i8_shift
    128U,	// SSRAd
    128U,	// SSRAv16i8_shift
    128U,	// SSRAv2i32_shift
    128U,	// SSRAv2i64_shift
    128U,	// SSRAv4i16_shift
    128U,	// SSRAv4i32_shift
    128U,	// SSRAv8i16_shift
    128U,	// SSRAv8i8_shift
    16U,	// SSUBLv16i8_v8i16
    16U,	// SSUBLv2i32_v2i64
    16U,	// SSUBLv4i16_v4i32
    16U,	// SSUBLv4i32_v2i64
    16U,	// SSUBLv8i16_v4i32
    16U,	// SSUBLv8i8_v8i16
    16U,	// SSUBWv16i8_v8i16
    16U,	// SSUBWv2i32_v2i64
    16U,	// SSUBWv4i16_v4i32
    16U,	// SSUBWv4i32_v2i64
    16U,	// SSUBWv8i16_v4i32
    16U,	// SSUBWv8i8_v8i16
    0U,	// ST1Fourv16b
    0U,	// ST1Fourv16b_POST
    0U,	// ST1Fourv1d
    0U,	// ST1Fourv1d_POST
    0U,	// ST1Fourv2d
    0U,	// ST1Fourv2d_POST
    0U,	// ST1Fourv2s
    0U,	// ST1Fourv2s_POST
    0U,	// ST1Fourv4h
    0U,	// ST1Fourv4h_POST
    0U,	// ST1Fourv4s
    0U,	// ST1Fourv4s_POST
    0U,	// ST1Fourv8b
    0U,	// ST1Fourv8b_POST
    0U,	// ST1Fourv8h
    0U,	// ST1Fourv8h_POST
    0U,	// ST1Onev16b
    0U,	// ST1Onev16b_POST
    0U,	// ST1Onev1d
    0U,	// ST1Onev1d_POST
    0U,	// ST1Onev2d
    0U,	// ST1Onev2d_POST
    0U,	// ST1Onev2s
    0U,	// ST1Onev2s_POST
    0U,	// ST1Onev4h
    0U,	// ST1Onev4h_POST
    0U,	// ST1Onev4s
    0U,	// ST1Onev4s_POST
    0U,	// ST1Onev8b
    0U,	// ST1Onev8b_POST
    0U,	// ST1Onev8h
    0U,	// ST1Onev8h_POST
    0U,	// ST1Threev16b
    0U,	// ST1Threev16b_POST
    0U,	// ST1Threev1d
    0U,	// ST1Threev1d_POST
    0U,	// ST1Threev2d
    0U,	// ST1Threev2d_POST
    0U,	// ST1Threev2s
    0U,	// ST1Threev2s_POST
    0U,	// ST1Threev4h
    0U,	// ST1Threev4h_POST
    0U,	// ST1Threev4s
    0U,	// ST1Threev4s_POST
    0U,	// ST1Threev8b
    0U,	// ST1Threev8b_POST
    0U,	// ST1Threev8h
    0U,	// ST1Threev8h_POST
    0U,	// ST1Twov16b
    0U,	// ST1Twov16b_POST
    0U,	// ST1Twov1d
    0U,	// ST1Twov1d_POST
    0U,	// ST1Twov2d
    0U,	// ST1Twov2d_POST
    0U,	// ST1Twov2s
    0U,	// ST1Twov2s_POST
    0U,	// ST1Twov4h
    0U,	// ST1Twov4h_POST
    0U,	// ST1Twov4s
    0U,	// ST1Twov4s_POST
    0U,	// ST1Twov8b
    0U,	// ST1Twov8b_POST
    0U,	// ST1Twov8h
    0U,	// ST1Twov8h_POST
    0U,	// ST1i16
    0U,	// ST1i16_POST
    0U,	// ST1i32
    0U,	// ST1i32_POST
    0U,	// ST1i64
    0U,	// ST1i64_POST
    0U,	// ST1i8
    0U,	// ST1i8_POST
    0U,	// ST2Twov16b
    0U,	// ST2Twov16b_POST
    0U,	// ST2Twov2d
    0U,	// ST2Twov2d_POST
    0U,	// ST2Twov2s
    0U,	// ST2Twov2s_POST
    0U,	// ST2Twov4h
    0U,	// ST2Twov4h_POST
    0U,	// ST2Twov4s
    0U,	// ST2Twov4s_POST
    0U,	// ST2Twov8b
    0U,	// ST2Twov8b_POST
    0U,	// ST2Twov8h
    0U,	// ST2Twov8h_POST
    0U,	// ST2i16
    0U,	// ST2i16_POST
    0U,	// ST2i32
    0U,	// ST2i32_POST
    0U,	// ST2i64
    0U,	// ST2i64_POST
    0U,	// ST2i8
    0U,	// ST2i8_POST
    0U,	// ST3Threev16b
    0U,	// ST3Threev16b_POST
    0U,	// ST3Threev2d
    0U,	// ST3Threev2d_POST
    0U,	// ST3Threev2s
    0U,	// ST3Threev2s_POST
    0U,	// ST3Threev4h
    0U,	// ST3Threev4h_POST
    0U,	// ST3Threev4s
    0U,	// ST3Threev4s_POST
    0U,	// ST3Threev8b
    0U,	// ST3Threev8b_POST
    0U,	// ST3Threev8h
    0U,	// ST3Threev8h_POST
    0U,	// ST3i16
    0U,	// ST3i16_POST
    0U,	// ST3i32
    0U,	// ST3i32_POST
    0U,	// ST3i64
    0U,	// ST3i64_POST
    0U,	// ST3i8
    0U,	// ST3i8_POST
    0U,	// ST4Fourv16b
    0U,	// ST4Fourv16b_POST
    0U,	// ST4Fourv2d
    0U,	// ST4Fourv2d_POST
    0U,	// ST4Fourv2s
    0U,	// ST4Fourv2s_POST
    0U,	// ST4Fourv4h
    0U,	// ST4Fourv4h_POST
    0U,	// ST4Fourv4s
    0U,	// ST4Fourv4s_POST
    0U,	// ST4Fourv8b
    0U,	// ST4Fourv8b_POST
    0U,	// ST4Fourv8h
    0U,	// ST4Fourv8h_POST
    0U,	// ST4i16
    0U,	// ST4i16_POST
    0U,	// ST4i32
    0U,	// ST4i32_POST
    0U,	// ST4i64
    0U,	// ST4i64_POST
    0U,	// ST4i8
    0U,	// ST4i8_POST
    4U,	// STLLRB
    4U,	// STLLRH
    4U,	// STLLRW
    4U,	// STLLRX
    4U,	// STLRB
    4U,	// STLRH
    4U,	// STLRW
    4U,	// STLRX
    4096U,	// STLXPW
    4096U,	// STLXPX
    1537U,	// STLXRB
    1537U,	// STLXRH
    1537U,	// STLXRW
    1537U,	// STLXRX
    25601U,	// STNPDi
    33793U,	// STNPQi
    41985U,	// STNPSi
    41985U,	// STNPWi
    25601U,	// STNPXi
    25601U,	// STPDi
    52353U,	// STPDpost
    50305U,	// STPDpre
    33793U,	// STPQi
    60545U,	// STPQpost
    58497U,	// STPQpre
    41985U,	// STPSi
    3201U,	// STPSpost
    1153U,	// STPSpre
    41985U,	// STPWi
    3201U,	// STPWpost
    1153U,	// STPWpre
    25601U,	// STPXi
    52353U,	// STPXpost
    50305U,	// STPXpre
    5U,	// STRBBpost
    3712U,	// STRBBpre
    9216U,	// STRBBroW
    17408U,	// STRBBroX
    176U,	// STRBBui
    5U,	// STRBpost
    3712U,	// STRBpre
    9216U,	// STRBroW
    17408U,	// STRBroX
    176U,	// STRBui
    5U,	// STRDpost
    3712U,	// STRDpre
    25600U,	// STRDroW
    33792U,	// STRDroX
    192U,	// STRDui
    5U,	// STRHHpost
    3712U,	// STRHHpre
    41984U,	// STRHHroW
    50176U,	// STRHHroX
    208U,	// STRHHui
    5U,	// STRHpost
    3712U,	// STRHpre
    41984U,	// STRHroW
    50176U,	// STRHroX
    208U,	// STRHui
    5U,	// STRQpost
    3712U,	// STRQpre
    58368U,	// STRQroW
    1024U,	// STRQroX
    224U,	// STRQui
    5U,	// STRSpost
    3712U,	// STRSpre
    9216U,	// STRSroW
    17408U,	// STRSroX
    240U,	// STRSui
    5U,	// STRWpost
    3712U,	// STRWpre
    9216U,	// STRWroW
    17408U,	// STRWroX
    240U,	// STRWui
    5U,	// STRXpost
    3712U,	// STRXpre
    25600U,	// STRXroW
    33792U,	// STRXroX
    192U,	// STRXui
    1536U,	// STTRBi
    1536U,	// STTRHi
    1536U,	// STTRWi
    1536U,	// STTRXi
    1536U,	// STURBBi
    1536U,	// STURBi
    1536U,	// STURDi
    1536U,	// STURHHi
    1536U,	// STURHi
    1536U,	// STURQi
    1536U,	// STURSi
    1536U,	// STURWi
    1536U,	// STURXi
    4096U,	// STXPW
    4096U,	// STXPX
    1537U,	// STXRB
    1537U,	// STXRH
    1537U,	// STXRW
    1537U,	// STXRX
    16U,	// SUBHNv2i64_v2i32
    32U,	// SUBHNv2i64_v4i32
    16U,	// SUBHNv4i32_v4i16
    32U,	// SUBHNv4i32_v8i16
    32U,	// SUBHNv8i16_v16i8
    16U,	// SUBHNv8i16_v8i8
    48U,	// SUBSWri
    0U,	// SUBSWrr
    64U,	// SUBSWrs
    80U,	// SUBSWrx
    48U,	// SUBSXri
    0U,	// SUBSXrr
    64U,	// SUBSXrs
    80U,	// SUBSXrx
    512U,	// SUBSXrx64
    48U,	// SUBWri
    0U,	// SUBWrr
    64U,	// SUBWrs
    80U,	// SUBWrx
    48U,	// SUBXri
    0U,	// SUBXrr
    64U,	// SUBXrs
    80U,	// SUBXrx
    512U,	// SUBXrx64
    16U,	// SUBv16i8
    0U,	// SUBv1i64
    16U,	// SUBv2i32
    16U,	// SUBv2i64
    16U,	// SUBv4i16
    16U,	// SUBv4i32
    16U,	// SUBv8i16
    16U,	// SUBv8i8
    0U,	// SUQADDv16i8
    0U,	// SUQADDv1i16
    0U,	// SUQADDv1i32
    0U,	// SUQADDv1i64
    0U,	// SUQADDv1i8
    0U,	// SUQADDv2i32
    0U,	// SUQADDv2i64
    0U,	// SUQADDv4i16
    0U,	// SUQADDv4i32
    0U,	// SUQADDv8i16
    0U,	// SUQADDv8i8
    0U,	// SVC
    0U,	// SWPAB
    0U,	// SWPAH
    0U,	// SWPALB
    0U,	// SWPALH
    0U,	// SWPALW
    0U,	// SWPALX
    0U,	// SWPAW
    0U,	// SWPAX
    0U,	// SWPB
    0U,	// SWPH
    0U,	// SWPLB
    0U,	// SWPLH
    0U,	// SWPLW
    0U,	// SWPLX
    0U,	// SWPW
    0U,	// SWPX
    256U,	// SYSLxt
    0U,	// SYSxt
    7U,	// TBLv16i8Four
    7U,	// TBLv16i8One
    7U,	// TBLv16i8Three
    7U,	// TBLv16i8Two
    8U,	// TBLv8i8Four
    8U,	// TBLv8i8One
    8U,	// TBLv8i8Three
    8U,	// TBLv8i8Two
    272U,	// TBNZW
    272U,	// TBNZX
    7U,	// TBXv16i8Four
    7U,	// TBXv16i8One
    7U,	// TBXv16i8Three
    7U,	// TBXv16i8Two
    8U,	// TBXv8i8Four
    8U,	// TBXv8i8One
    8U,	// TBXv8i8Three
    8U,	// TBXv8i8Two
    272U,	// TBZW
    272U,	// TBZX
    0U,	// TCRETURNdi
    0U,	// TCRETURNri
    0U,	// TLSDESCCALL
    0U,	// TLSDESC_CALLSEQ
    16U,	// TRN1v16i8
    16U,	// TRN1v2i32
    16U,	// TRN1v2i64
    16U,	// TRN1v4i16
    16U,	// TRN1v4i32
    16U,	// TRN1v8i16
    16U,	// TRN1v8i8
    16U,	// TRN2v16i8
    16U,	// TRN2v2i32
    16U,	// TRN2v2i64
    16U,	// TRN2v4i16
    16U,	// TRN2v4i32
    16U,	// TRN2v8i16
    16U,	// TRN2v8i8
    32U,	// UABALv16i8_v8i16
    32U,	// UABALv2i32_v2i64
    32U,	// UABALv4i16_v4i32
    32U,	// UABALv4i32_v2i64
    32U,	// UABALv8i16_v4i32
    32U,	// UABALv8i8_v8i16
    32U,	// UABAv16i8
    32U,	// UABAv2i32
    32U,	// UABAv4i16
    32U,	// UABAv4i32
    32U,	// UABAv8i16
    32U,	// UABAv8i8
    16U,	// UABDLv16i8_v8i16
    16U,	// UABDLv2i32_v2i64
    16U,	// UABDLv4i16_v4i32
    16U,	// UABDLv4i32_v2i64
    16U,	// UABDLv8i16_v4i32
    16U,	// UABDLv8i8_v8i16
    16U,	// UABDv16i8
    16U,	// UABDv2i32
    16U,	// UABDv4i16
    16U,	// UABDv4i32
    16U,	// UABDv8i16
    16U,	// UABDv8i8
    0U,	// UADALPv16i8_v8i16
    0U,	// UADALPv2i32_v1i64
    0U,	// UADALPv4i16_v2i32
    0U,	// UADALPv4i32_v2i64
    0U,	// UADALPv8i16_v4i32
    0U,	// UADALPv8i8_v4i16
    0U,	// UADDLPv16i8_v8i16
    0U,	// UADDLPv2i32_v1i64
    0U,	// UADDLPv4i16_v2i32
    0U,	// UADDLPv4i32_v2i64
    0U,	// UADDLPv8i16_v4i32
    0U,	// UADDLPv8i8_v4i16
    0U,	// UADDLVv16i8v
    0U,	// UADDLVv4i16v
    0U,	// UADDLVv4i32v
    0U,	// UADDLVv8i16v
    0U,	// UADDLVv8i8v
    16U,	// UADDLv16i8_v8i16
    16U,	// UADDLv2i32_v2i64
    16U,	// UADDLv4i16_v4i32
    16U,	// UADDLv4i32_v2i64
    16U,	// UADDLv8i16_v4i32
    16U,	// UADDLv8i8_v8i16
    16U,	// UADDWv16i8_v8i16
    16U,	// UADDWv2i32_v2i64
    16U,	// UADDWv4i16_v4i32
    16U,	// UADDWv4i32_v2i64
    16U,	// UADDWv8i16_v4i32
    16U,	// UADDWv8i8_v8i16
    17408U,	// UBFMWri
    17408U,	// UBFMXri
    0U,	// UCVTFSWDri
    0U,	// UCVTFSWHri
    0U,	// UCVTFSWSri
    0U,	// UCVTFSXDri
    0U,	// UCVTFSXHri
    0U,	// UCVTFSXSri
    0U,	// UCVTFUWDri
    0U,	// UCVTFUWHri
    0U,	// UCVTFUWSri
    0U,	// UCVTFUXDri
    0U,	// UCVTFUXHri
    0U,	// UCVTFUXSri
    0U,	// UCVTFd
    0U,	// UCVTFh
    0U,	// UCVTFs
    0U,	// UCVTFv1i16
    0U,	// UCVTFv1i32
    0U,	// UCVTFv1i64
    0U,	// UCVTFv2f32
    0U,	// UCVTFv2f64
    0U,	// UCVTFv2i32_shift
    0U,	// UCVTFv2i64_shift
    0U,	// UCVTFv4f16
    0U,	// UCVTFv4f32
    0U,	// UCVTFv4i16_shift
    0U,	// UCVTFv4i32_shift
    0U,	// UCVTFv8f16
    0U,	// UCVTFv8i16_shift
    0U,	// UDIVWr
    0U,	// UDIVXr
    0U,	// UDOT2S
    0U,	// UDOT4S
    2080U,	// UDOTIDX2S
    2080U,	// UDOTIDX4S
    16U,	// UHADDv16i8
    16U,	// UHADDv2i32
    16U,	// UHADDv4i16
    16U,	// UHADDv4i32
    16U,	// UHADDv8i16
    16U,	// UHADDv8i8
    16U,	// UHSUBv16i8
    16U,	// UHSUBv2i32
    16U,	// UHSUBv4i16
    16U,	// UHSUBv4i32
    16U,	// UHSUBv8i16
    16U,	// UHSUBv8i8
    17408U,	// UMADDLrrr
    16U,	// UMAXPv16i8
    16U,	// UMAXPv2i32
    16U,	// UMAXPv4i16
    16U,	// UMAXPv4i32
    16U,	// UMAXPv8i16
    16U,	// UMAXPv8i8
    0U,	// UMAXVv16i8v
    0U,	// UMAXVv4i16v
    0U,	// UMAXVv4i32v
    0U,	// UMAXVv8i16v
    0U,	// UMAXVv8i8v
    16U,	// UMAXv16i8
    16U,	// UMAXv2i32
    16U,	// UMAXv4i16
    16U,	// UMAXv4i32
    16U,	// UMAXv8i16
    16U,	// UMAXv8i8
    16U,	// UMINPv16i8
    16U,	// UMINPv2i32
    16U,	// UMINPv4i16
    16U,	// UMINPv4i32
    16U,	// UMINPv8i16
    16U,	// UMINPv8i8
    0U,	// UMINVv16i8v
    0U,	// UMINVv4i16v
    0U,	// UMINVv4i32v
    0U,	// UMINVv8i16v
    0U,	// UMINVv8i8v
    16U,	// UMINv16i8
    16U,	// UMINv2i32
    16U,	// UMINv4i16
    16U,	// UMINv4i32
    16U,	// UMINv8i16
    16U,	// UMINv8i8
    32U,	// UMLALv16i8_v8i16
    2080U,	// UMLALv2i32_indexed
    32U,	// UMLALv2i32_v2i64
    2080U,	// UMLALv4i16_indexed
    32U,	// UMLALv4i16_v4i32
    2080U,	// UMLALv4i32_indexed
    32U,	// UMLALv4i32_v2i64
    2080U,	// UMLALv8i16_indexed
    32U,	// UMLALv8i16_v4i32
    32U,	// UMLALv8i8_v8i16
    32U,	// UMLSLv16i8_v8i16
    2080U,	// UMLSLv2i32_indexed
    32U,	// UMLSLv2i32_v2i64
    2080U,	// UMLSLv4i16_indexed
    32U,	// UMLSLv4i16_v4i32
    2080U,	// UMLSLv4i32_indexed
    32U,	// UMLSLv4i32_v2i64
    2080U,	// UMLSLv8i16_indexed
    32U,	// UMLSLv8i16_v4i32
    32U,	// UMLSLv8i8_v8i16
    2U,	// UMOVvi16
    2U,	// UMOVvi32
    2U,	// UMOVvi64
    2U,	// UMOVvi8
    17408U,	// UMSUBLrrr
    0U,	// UMULHrr
    16U,	// UMULLv16i8_v8i16
    2576U,	// UMULLv2i32_indexed
    16U,	// UMULLv2i32_v2i64
    2576U,	// UMULLv4i16_indexed
    16U,	// UMULLv4i16_v4i32
    2576U,	// UMULLv4i32_indexed
    16U,	// UMULLv4i32_v2i64
    2576U,	// UMULLv8i16_indexed
    16U,	// UMULLv8i16_v4i32
    16U,	// UMULLv8i8_v8i16
    16U,	// UQADDv16i8
    0U,	// UQADDv1i16
    0U,	// UQADDv1i32
    0U,	// UQADDv1i64
    0U,	// UQADDv1i8
    16U,	// UQADDv2i32
    16U,	// UQADDv2i64
    16U,	// UQADDv4i16
    16U,	// UQADDv4i32
    16U,	// UQADDv8i16
    16U,	// UQADDv8i8
    16U,	// UQRSHLv16i8
    0U,	// UQRSHLv1i16
    0U,	// UQRSHLv1i32
    0U,	// UQRSHLv1i64
    0U,	// UQRSHLv1i8
    16U,	// UQRSHLv2i32
    16U,	// UQRSHLv2i64
    16U,	// UQRSHLv4i16
    16U,	// UQRSHLv4i32
    16U,	// UQRSHLv8i16
    16U,	// UQRSHLv8i8
    0U,	// UQRSHRNb
    0U,	// UQRSHRNh
    0U,	// UQRSHRNs
    128U,	// UQRSHRNv16i8_shift
    0U,	// UQRSHRNv2i32_shift
    0U,	// UQRSHRNv4i16_shift
    128U,	// UQRSHRNv4i32_shift
    128U,	// UQRSHRNv8i16_shift
    0U,	// UQRSHRNv8i8_shift
    0U,	// UQSHLb
    0U,	// UQSHLd
    0U,	// UQSHLh
    0U,	// UQSHLs
    16U,	// UQSHLv16i8
    0U,	// UQSHLv16i8_shift
    0U,	// UQSHLv1i16
    0U,	// UQSHLv1i32
    0U,	// UQSHLv1i64
    0U,	// UQSHLv1i8
    16U,	// UQSHLv2i32
    0U,	// UQSHLv2i32_shift
    16U,	// UQSHLv2i64
    0U,	// UQSHLv2i64_shift
    16U,	// UQSHLv4i16
    0U,	// UQSHLv4i16_shift
    16U,	// UQSHLv4i32
    0U,	// UQSHLv4i32_shift
    16U,	// UQSHLv8i16
    0U,	// UQSHLv8i16_shift
    16U,	// UQSHLv8i8
    0U,	// UQSHLv8i8_shift
    0U,	// UQSHRNb
    0U,	// UQSHRNh
    0U,	// UQSHRNs
    128U,	// UQSHRNv16i8_shift
    0U,	// UQSHRNv2i32_shift
    0U,	// UQSHRNv4i16_shift
    128U,	// UQSHRNv4i32_shift
    128U,	// UQSHRNv8i16_shift
    0U,	// UQSHRNv8i8_shift
    16U,	// UQSUBv16i8
    0U,	// UQSUBv1i16
    0U,	// UQSUBv1i32
    0U,	// UQSUBv1i64
    0U,	// UQSUBv1i8
    16U,	// UQSUBv2i32
    16U,	// UQSUBv2i64
    16U,	// UQSUBv4i16
    16U,	// UQSUBv4i32
    16U,	// UQSUBv8i16
    16U,	// UQSUBv8i8
    0U,	// UQXTNv16i8
    0U,	// UQXTNv1i16
    0U,	// UQXTNv1i32
    0U,	// UQXTNv1i8
    0U,	// UQXTNv2i32
    0U,	// UQXTNv4i16
    0U,	// UQXTNv4i32
    0U,	// UQXTNv8i16
    0U,	// UQXTNv8i8
    0U,	// URECPEv2i32
    0U,	// URECPEv4i32
    16U,	// URHADDv16i8
    16U,	// URHADDv2i32
    16U,	// URHADDv4i16
    16U,	// URHADDv4i32
    16U,	// URHADDv8i16
    16U,	// URHADDv8i8
    16U,	// URSHLv16i8
    0U,	// URSHLv1i64
    16U,	// URSHLv2i32
    16U,	// URSHLv2i64
    16U,	// URSHLv4i16
    16U,	// URSHLv4i32
    16U,	// URSHLv8i16
    16U,	// URSHLv8i8
    0U,	// URSHRd
    0U,	// URSHRv16i8_shift
    0U,	// URSHRv2i32_shift
    0U,	// URSHRv2i64_shift
    0U,	// URSHRv4i16_shift
    0U,	// URSHRv4i32_shift
    0U,	// URSHRv8i16_shift
    0U,	// URSHRv8i8_shift
    0U,	// URSQRTEv2i32
    0U,	// URSQRTEv4i32
    128U,	// URSRAd
    128U,	// URSRAv16i8_shift
    128U,	// URSRAv2i32_shift
    128U,	// URSRAv2i64_shift
    128U,	// URSRAv4i16_shift
    128U,	// URSRAv4i32_shift
    128U,	// URSRAv8i16_shift
    128U,	// URSRAv8i8_shift
    0U,	// USHLLv16i8_shift
    0U,	// USHLLv2i32_shift
    0U,	// USHLLv4i16_shift
    0U,	// USHLLv4i32_shift
    0U,	// USHLLv8i16_shift
    0U,	// USHLLv8i8_shift
    16U,	// USHLv16i8
    0U,	// USHLv1i64
    16U,	// USHLv2i32
    16U,	// USHLv2i64
    16U,	// USHLv4i16
    16U,	// USHLv4i32
    16U,	// USHLv8i16
    16U,	// USHLv8i8
    0U,	// USHRd
    0U,	// USHRv16i8_shift
    0U,	// USHRv2i32_shift
    0U,	// USHRv2i64_shift
    0U,	// USHRv4i16_shift
    0U,	// USHRv4i32_shift
    0U,	// USHRv8i16_shift
    0U,	// USHRv8i8_shift
    0U,	// USQADDv16i8
    0U,	// USQADDv1i16
    0U,	// USQADDv1i32
    0U,	// USQADDv1i64
    0U,	// USQADDv1i8
    0U,	// USQADDv2i32
    0U,	// USQADDv2i64
    0U,	// USQADDv4i16
    0U,	// USQADDv4i32
    0U,	// USQADDv8i16
    0U,	// USQADDv8i8
    128U,	// USRAd
    128U,	// USRAv16i8_shift
    128U,	// USRAv2i32_shift
    128U,	// USRAv2i64_shift
    128U,	// USRAv4i16_shift
    128U,	// USRAv4i32_shift
    128U,	// USRAv8i16_shift
    128U,	// USRAv8i8_shift
    16U,	// USUBLv16i8_v8i16
    16U,	// USUBLv2i32_v2i64
    16U,	// USUBLv4i16_v4i32
    16U,	// USUBLv4i32_v2i64
    16U,	// USUBLv8i16_v4i32
    16U,	// USUBLv8i8_v8i16
    16U,	// USUBWv16i8_v8i16
    16U,	// USUBWv2i32_v2i64
    16U,	// USUBWv4i16_v4i32
    16U,	// USUBWv4i32_v2i64
    16U,	// USUBWv8i16_v4i32
    16U,	// USUBWv8i8_v8i16
    16U,	// UZP1v16i8
    16U,	// UZP1v2i32
    16U,	// UZP1v2i64
    16U,	// UZP1v4i16
    16U,	// UZP1v4i32
    16U,	// UZP1v8i16
    16U,	// UZP1v8i8
    16U,	// UZP2v16i8
    16U,	// UZP2v2i32
    16U,	// UZP2v2i64
    16U,	// UZP2v4i16
    16U,	// UZP2v4i32
    16U,	// UZP2v8i16
    16U,	// UZP2v8i8
    0U,	// XPACD
    0U,	// XPACI
    0U,	// XPACLRI
    0U,	// XTNv16i8
    0U,	// XTNv2i32
    0U,	// XTNv4i16
    0U,	// XTNv4i32
    0U,	// XTNv8i16
    0U,	// XTNv8i8
    16U,	// ZIP1v16i8
    16U,	// ZIP1v2i32
    16U,	// ZIP1v2i64
    16U,	// ZIP1v4i16
    16U,	// ZIP1v4i32
    16U,	// ZIP1v8i16
    16U,	// ZIP1v8i8
    16U,	// ZIP2v16i8
    16U,	// ZIP2v2i32
    16U,	// ZIP2v2i64
    16U,	// ZIP2v4i16
    16U,	// ZIP2v4i32
    16U,	// ZIP2v8i16
    16U,	// ZIP2v8i8
  };

  static const uint8_t OpInfo2[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// CFI_INSTRUCTION
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    0U,	// DBG_VALUE
    0U,	// REG_SEQUENCE
    0U,	// COPY
    0U,	// BUNDLE
    0U,	// LIFETIME_START
    0U,	// LIFETIME_END
    0U,	// STACKMAP
    0U,	// FENTRY_CALL
    0U,	// PATCHPOINT
    0U,	// LOAD_STACK_GUARD
    0U,	// STATEPOINT
    0U,	// LOCAL_ESCAPE
    0U,	// FAULTING_OP
    0U,	// PATCHABLE_OP
    0U,	// PATCHABLE_FUNCTION_ENTER
    0U,	// PATCHABLE_RET
    0U,	// PATCHABLE_FUNCTION_EXIT
    0U,	// PATCHABLE_TAIL_CALL
    0U,	// PATCHABLE_EVENT_CALL
    0U,	// G_ADD
    0U,	// G_SUB
    0U,	// G_MUL
    0U,	// G_SDIV
    0U,	// G_UDIV
    0U,	// G_SREM
    0U,	// G_UREM
    0U,	// G_AND
    0U,	// G_OR
    0U,	// G_XOR
    0U,	// G_IMPLICIT_DEF
    0U,	// G_FRAME_INDEX
    0U,	// G_GLOBAL_VALUE
    0U,	// G_EXTRACT
    0U,	// G_UNMERGE_VALUES
    0U,	// G_INSERT
    0U,	// G_MERGE_VALUES
    0U,	// G_PTRTOINT
    0U,	// G_INTTOPTR
    0U,	// G_BITCAST
    0U,	// G_LOAD
    0U,	// G_STORE
    0U,	// G_BRCOND
    0U,	// G_BRINDIRECT
    0U,	// G_INTRINSIC
    0U,	// G_INTRINSIC_W_SIDE_EFFECTS
    0U,	// G_ANYEXT
    0U,	// G_TRUNC
    0U,	// G_CONSTANT
    0U,	// G_FCONSTANT
    0U,	// G_VASTART
    0U,	// G_VAARG
    0U,	// G_SEXT
    0U,	// G_ZEXT
    0U,	// G_SHL
    0U,	// G_LSHR
    0U,	// G_ASHR
    0U,	// G_ICMP
    0U,	// G_FCMP
    0U,	// G_SELECT
    0U,	// G_UADDE
    0U,	// G_USUBE
    0U,	// G_SADDO
    0U,	// G_SSUBO
    0U,	// G_UMULO
    0U,	// G_SMULO
    0U,	// G_UMULH
    0U,	// G_SMULH
    0U,	// G_FADD
    0U,	// G_FSUB
    0U,	// G_FMUL
    0U,	// G_FMA
    0U,	// G_FDIV
    0U,	// G_FREM
    0U,	// G_FPOW
    0U,	// G_FEXP
    0U,	// G_FEXP2
    0U,	// G_FLOG
    0U,	// G_FLOG2
    0U,	// G_FNEG
    0U,	// G_FPEXT
    0U,	// G_FPTRUNC
    0U,	// G_FPTOSI
    0U,	// G_FPTOUI
    0U,	// G_SITOFP
    0U,	// G_UITOFP
    0U,	// G_GEP
    0U,	// G_PTR_MASK
    0U,	// G_BR
    0U,	// G_INSERT_VECTOR_ELT
    0U,	// G_EXTRACT_VECTOR_ELT
    0U,	// G_SHUFFLE_VECTOR
    0U,	// ABSv16i8
    0U,	// ABSv1i64
    0U,	// ABSv2i32
    0U,	// ABSv2i64
    0U,	// ABSv4i16
    0U,	// ABSv4i32
    0U,	// ABSv8i16
    0U,	// ABSv8i8
    0U,	// ADCSWr
    0U,	// ADCSXr
    0U,	// ADCWr
    0U,	// ADCXr
    0U,	// ADDHNv2i64_v2i32
    0U,	// ADDHNv2i64_v4i32
    0U,	// ADDHNv4i32_v4i16
    0U,	// ADDHNv4i32_v8i16
    0U,	// ADDHNv8i16_v16i8
    0U,	// ADDHNv8i16_v8i8
    0U,	// ADDPv16i8
    0U,	// ADDPv2i32
    0U,	// ADDPv2i64
    0U,	// ADDPv2i64p
    0U,	// ADDPv4i16
    0U,	// ADDPv4i32
    0U,	// ADDPv8i16
    0U,	// ADDPv8i8
    0U,	// ADDSWri
    0U,	// ADDSWrr
    0U,	// ADDSWrs
    0U,	// ADDSWrx
    0U,	// ADDSXri
    0U,	// ADDSXrr
    0U,	// ADDSXrs
    0U,	// ADDSXrx
    0U,	// ADDSXrx64
    0U,	// ADDVv16i8v
    0U,	// ADDVv4i16v
    0U,	// ADDVv4i32v
    0U,	// ADDVv8i16v
    0U,	// ADDVv8i8v
    0U,	// ADDWri
    0U,	// ADDWrr
    0U,	// ADDWrs
    0U,	// ADDWrx
    0U,	// ADDXri
    0U,	// ADDXrr
    0U,	// ADDXrs
    0U,	// ADDXrx
    0U,	// ADDXrx64
    0U,	// ADDv16i8
    0U,	// ADDv1i64
    0U,	// ADDv2i32
    0U,	// ADDv2i64
    0U,	// ADDv4i16
    0U,	// ADDv4i32
    0U,	// ADDv8i16
    0U,	// ADDv8i8
    0U,	// ADJCALLSTACKDOWN
    0U,	// ADJCALLSTACKUP
    0U,	// ADR
    0U,	// ADRP
    0U,	// AESDrr
    0U,	// AESErr
    0U,	// AESIMCrr
    0U,	// AESIMCrrTied
    0U,	// AESMCrr
    0U,	// AESMCrrTied
    0U,	// ANDSWri
    0U,	// ANDSWrr
    0U,	// ANDSWrs
    0U,	// ANDSXri
    0U,	// ANDSXrr
    0U,	// ANDSXrs
    0U,	// ANDWri
    0U,	// ANDWrr
    0U,	// ANDWrs
    0U,	// ANDXri
    0U,	// ANDXrr
    0U,	// ANDXrs
    0U,	// ANDv16i8
    0U,	// ANDv8i8
    0U,	// ASRVWr
    0U,	// ASRVXr
    0U,	// AUTDA
    0U,	// AUTDB
    0U,	// AUTDZA
    0U,	// AUTDZB
    0U,	// AUTIA
    0U,	// AUTIA1716
    0U,	// AUTIASP
    0U,	// AUTIAZ
    0U,	// AUTIB
    0U,	// AUTIB1716
    0U,	// AUTIBSP
    0U,	// AUTIBZ
    0U,	// AUTIZA
    0U,	// AUTIZB
    0U,	// B
    0U,	// BFMWri
    0U,	// BFMXri
    0U,	// BICSWrr
    0U,	// BICSWrs
    0U,	// BICSXrr
    0U,	// BICSXrs
    0U,	// BICWrr
    0U,	// BICWrs
    0U,	// BICXrr
    0U,	// BICXrs
    0U,	// BICv16i8
    0U,	// BICv2i32
    0U,	// BICv4i16
    0U,	// BICv4i32
    0U,	// BICv8i16
    0U,	// BICv8i8
    0U,	// BIFv16i8
    0U,	// BIFv8i8
    0U,	// BITv16i8
    0U,	// BITv8i8
    0U,	// BL
    0U,	// BLR
    0U,	// BLRAA
    0U,	// BLRAAZ
    0U,	// BLRAB
    0U,	// BLRABZ
    0U,	// BR
    0U,	// BRAA
    0U,	// BRAAZ
    0U,	// BRAB
    0U,	// BRABZ
    0U,	// BRK
    0U,	// BSLv16i8
    0U,	// BSLv8i8
    0U,	// Bcc
    0U,	// CASAB
    0U,	// CASAH
    0U,	// CASALB
    0U,	// CASALH
    0U,	// CASALW
    0U,	// CASALX
    0U,	// CASAW
    0U,	// CASAX
    0U,	// CASB
    0U,	// CASH
    0U,	// CASLB
    0U,	// CASLH
    0U,	// CASLW
    0U,	// CASLX
    0U,	// CASPALW
    0U,	// CASPALX
    0U,	// CASPAW
    0U,	// CASPAX
    0U,	// CASPLW
    0U,	// CASPLX
    0U,	// CASPW
    0U,	// CASPX
    0U,	// CASW
    0U,	// CASX
    0U,	// CBNZW
    0U,	// CBNZX
    0U,	// CBZW
    0U,	// CBZX
    0U,	// CCMNWi
    0U,	// CCMNWr
    0U,	// CCMNXi
    0U,	// CCMNXr
    0U,	// CCMPWi
    0U,	// CCMPWr
    0U,	// CCMPXi
    0U,	// CCMPXr
    0U,	// CLREX
    0U,	// CLSWr
    0U,	// CLSXr
    0U,	// CLSv16i8
    0U,	// CLSv2i32
    0U,	// CLSv4i16
    0U,	// CLSv4i32
    0U,	// CLSv8i16
    0U,	// CLSv8i8
    0U,	// CLZWr
    0U,	// CLZXr
    0U,	// CLZv16i8
    0U,	// CLZv2i32
    0U,	// CLZv4i16
    0U,	// CLZv4i32
    0U,	// CLZv8i16
    0U,	// CLZv8i8
    0U,	// CMEQv16i8
    0U,	// CMEQv16i8rz
    0U,	// CMEQv1i64
    0U,	// CMEQv1i64rz
    0U,	// CMEQv2i32
    0U,	// CMEQv2i32rz
    0U,	// CMEQv2i64
    0U,	// CMEQv2i64rz
    0U,	// CMEQv4i16
    0U,	// CMEQv4i16rz
    0U,	// CMEQv4i32
    0U,	// CMEQv4i32rz
    0U,	// CMEQv8i16
    0U,	// CMEQv8i16rz
    0U,	// CMEQv8i8
    0U,	// CMEQv8i8rz
    0U,	// CMGEv16i8
    0U,	// CMGEv16i8rz
    0U,	// CMGEv1i64
    0U,	// CMGEv1i64rz
    0U,	// CMGEv2i32
    0U,	// CMGEv2i32rz
    0U,	// CMGEv2i64
    0U,	// CMGEv2i64rz
    0U,	// CMGEv4i16
    0U,	// CMGEv4i16rz
    0U,	// CMGEv4i32
    0U,	// CMGEv4i32rz
    0U,	// CMGEv8i16
    0U,	// CMGEv8i16rz
    0U,	// CMGEv8i8
    0U,	// CMGEv8i8rz
    0U,	// CMGTv16i8
    0U,	// CMGTv16i8rz
    0U,	// CMGTv1i64
    0U,	// CMGTv1i64rz
    0U,	// CMGTv2i32
    0U,	// CMGTv2i32rz
    0U,	// CMGTv2i64
    0U,	// CMGTv2i64rz
    0U,	// CMGTv4i16
    0U,	// CMGTv4i16rz
    0U,	// CMGTv4i32
    0U,	// CMGTv4i32rz
    0U,	// CMGTv8i16
    0U,	// CMGTv8i16rz
    0U,	// CMGTv8i8
    0U,	// CMGTv8i8rz
    0U,	// CMHIv16i8
    0U,	// CMHIv1i64
    0U,	// CMHIv2i32
    0U,	// CMHIv2i64
    0U,	// CMHIv4i16
    0U,	// CMHIv4i32
    0U,	// CMHIv8i16
    0U,	// CMHIv8i8
    0U,	// CMHSv16i8
    0U,	// CMHSv1i64
    0U,	// CMHSv2i32
    0U,	// CMHSv2i64
    0U,	// CMHSv4i16
    0U,	// CMHSv4i32
    0U,	// CMHSv8i16
    0U,	// CMHSv8i8
    0U,	// CMLEv16i8rz
    0U,	// CMLEv1i64rz
    0U,	// CMLEv2i32rz
    0U,	// CMLEv2i64rz
    0U,	// CMLEv4i16rz
    0U,	// CMLEv4i32rz
    0U,	// CMLEv8i16rz
    0U,	// CMLEv8i8rz
    0U,	// CMLTv16i8rz
    0U,	// CMLTv1i64rz
    0U,	// CMLTv2i32rz
    0U,	// CMLTv2i64rz
    0U,	// CMLTv4i16rz
    0U,	// CMLTv4i32rz
    0U,	// CMLTv8i16rz
    0U,	// CMLTv8i8rz
    0U,	// CMP_SWAP_128
    0U,	// CMP_SWAP_16
    0U,	// CMP_SWAP_32
    0U,	// CMP_SWAP_64
    0U,	// CMP_SWAP_8
    0U,	// CMTSTv16i8
    0U,	// CMTSTv1i64
    0U,	// CMTSTv2i32
    0U,	// CMTSTv2i64
    0U,	// CMTSTv4i16
    0U,	// CMTSTv4i32
    0U,	// CMTSTv8i16
    0U,	// CMTSTv8i8
    0U,	// CNTv16i8
    0U,	// CNTv8i8
    0U,	// CPYi16
    0U,	// CPYi32
    0U,	// CPYi64
    0U,	// CPYi8
    0U,	// CRC32Brr
    0U,	// CRC32CBrr
    0U,	// CRC32CHrr
    0U,	// CRC32CWrr
    0U,	// CRC32CXrr
    0U,	// CRC32Hrr
    0U,	// CRC32Wrr
    0U,	// CRC32Xrr
    0U,	// CSELWr
    0U,	// CSELXr
    0U,	// CSINCWr
    0U,	// CSINCXr
    0U,	// CSINVWr
    0U,	// CSINVXr
    0U,	// CSNEGWr
    0U,	// CSNEGXr
    0U,	// CompilerBarrier
    0U,	// DCPS1
    0U,	// DCPS2
    0U,	// DCPS3
    0U,	// DMB
    0U,	// DRPS
    0U,	// DSB
    0U,	// DUPv16i8gpr
    0U,	// DUPv16i8lane
    0U,	// DUPv2i32gpr
    0U,	// DUPv2i32lane
    0U,	// DUPv2i64gpr
    0U,	// DUPv2i64lane
    0U,	// DUPv4i16gpr
    0U,	// DUPv4i16lane
    0U,	// DUPv4i32gpr
    0U,	// DUPv4i32lane
    0U,	// DUPv8i16gpr
    0U,	// DUPv8i16lane
    0U,	// DUPv8i8gpr
    0U,	// DUPv8i8lane
    0U,	// EONWrr
    0U,	// EONWrs
    0U,	// EONXrr
    0U,	// EONXrs
    0U,	// EORWri
    0U,	// EORWrr
    0U,	// EORWrs
    0U,	// EORXri
    0U,	// EORXrr
    0U,	// EORXrs
    0U,	// EORv16i8
    0U,	// EORv8i8
    0U,	// ERET
    0U,	// ERETAA
    0U,	// ERETAB
    0U,	// EXTRWrri
    0U,	// EXTRXrri
    0U,	// EXTv16i8
    0U,	// EXTv8i8
    0U,	// F128CSEL
    0U,	// FABD16
    0U,	// FABD32
    0U,	// FABD64
    0U,	// FABDv2f32
    0U,	// FABDv2f64
    0U,	// FABDv4f16
    0U,	// FABDv4f32
    0U,	// FABDv8f16
    0U,	// FABSDr
    0U,	// FABSHr
    0U,	// FABSSr
    0U,	// FABSv2f32
    0U,	// FABSv2f64
    0U,	// FABSv4f16
    0U,	// FABSv4f32
    0U,	// FABSv8f16
    0U,	// FACGE16
    0U,	// FACGE32
    0U,	// FACGE64
    0U,	// FACGEv2f32
    0U,	// FACGEv2f64
    0U,	// FACGEv4f16
    0U,	// FACGEv4f32
    0U,	// FACGEv8f16
    0U,	// FACGT16
    0U,	// FACGT32
    0U,	// FACGT64
    0U,	// FACGTv2f32
    0U,	// FACGTv2f64
    0U,	// FACGTv4f16
    0U,	// FACGTv4f32
    0U,	// FACGTv8f16
    0U,	// FADDDrr
    0U,	// FADDHrr
    0U,	// FADDPv2f32
    0U,	// FADDPv2f64
    0U,	// FADDPv2i16p
    0U,	// FADDPv2i32p
    0U,	// FADDPv2i64p
    0U,	// FADDPv4f16
    0U,	// FADDPv4f32
    0U,	// FADDPv8f16
    0U,	// FADDSrr
    0U,	// FADDv2f32
    0U,	// FADDv2f64
    0U,	// FADDv4f16
    0U,	// FADDv4f32
    0U,	// FADDv8f16
    0U,	// FCCMPDrr
    0U,	// FCCMPEDrr
    0U,	// FCCMPEHrr
    0U,	// FCCMPESrr
    0U,	// FCCMPHrr
    0U,	// FCCMPSrr
    0U,	// FCMEQ16
    0U,	// FCMEQ32
    0U,	// FCMEQ64
    0U,	// FCMEQv1i16rz
    0U,	// FCMEQv1i32rz
    0U,	// FCMEQv1i64rz
    0U,	// FCMEQv2f32
    0U,	// FCMEQv2f64
    0U,	// FCMEQv2i32rz
    0U,	// FCMEQv2i64rz
    0U,	// FCMEQv4f16
    0U,	// FCMEQv4f32
    0U,	// FCMEQv4i16rz
    0U,	// FCMEQv4i32rz
    0U,	// FCMEQv8f16
    0U,	// FCMEQv8i16rz
    0U,	// FCMGE16
    0U,	// FCMGE32
    0U,	// FCMGE64
    0U,	// FCMGEv1i16rz
    0U,	// FCMGEv1i32rz
    0U,	// FCMGEv1i64rz
    0U,	// FCMGEv2f32
    0U,	// FCMGEv2f64
    0U,	// FCMGEv2i32rz
    0U,	// FCMGEv2i64rz
    0U,	// FCMGEv4f16
    0U,	// FCMGEv4f32
    0U,	// FCMGEv4i16rz
    0U,	// FCMGEv4i32rz
    0U,	// FCMGEv8f16
    0U,	// FCMGEv8i16rz
    0U,	// FCMGT16
    0U,	// FCMGT32
    0U,	// FCMGT64
    0U,	// FCMGTv1i16rz
    0U,	// FCMGTv1i32rz
    0U,	// FCMGTv1i64rz
    0U,	// FCMGTv2f32
    0U,	// FCMGTv2f64
    0U,	// FCMGTv2i32rz
    0U,	// FCMGTv2i64rz
    0U,	// FCMGTv4f16
    0U,	// FCMGTv4f32
    0U,	// FCMGTv4i16rz
    0U,	// FCMGTv4i32rz
    0U,	// FCMGTv8f16
    0U,	// FCMGTv8i16rz
    0U,	// FCMLEv1i16rz
    0U,	// FCMLEv1i32rz
    0U,	// FCMLEv1i64rz
    0U,	// FCMLEv2i32rz
    0U,	// FCMLEv2i64rz
    0U,	// FCMLEv4i16rz
    0U,	// FCMLEv4i32rz
    0U,	// FCMLEv8i16rz
    0U,	// FCMLTv1i16rz
    0U,	// FCMLTv1i32rz
    0U,	// FCMLTv1i64rz
    0U,	// FCMLTv2i32rz
    0U,	// FCMLTv2i64rz
    0U,	// FCMLTv4i16rz
    0U,	// FCMLTv4i32rz
    0U,	// FCMLTv8i16rz
    0U,	// FCMPDri
    0U,	// FCMPDrr
    0U,	// FCMPEDri
    0U,	// FCMPEDrr
    0U,	// FCMPEHri
    0U,	// FCMPEHrr
    0U,	// FCMPESri
    0U,	// FCMPESrr
    0U,	// FCMPHri
    0U,	// FCMPHrr
    0U,	// FCMPSri
    0U,	// FCMPSrr
    0U,	// FCSELDrrr
    0U,	// FCSELHrrr
    0U,	// FCSELSrrr
    0U,	// FCVTASUWDr
    0U,	// FCVTASUWHr
    0U,	// FCVTASUWSr
    0U,	// FCVTASUXDr
    0U,	// FCVTASUXHr
    0U,	// FCVTASUXSr
    0U,	// FCVTASv1f16
    0U,	// FCVTASv1i32
    0U,	// FCVTASv1i64
    0U,	// FCVTASv2f32
    0U,	// FCVTASv2f64
    0U,	// FCVTASv4f16
    0U,	// FCVTASv4f32
    0U,	// FCVTASv8f16
    0U,	// FCVTAUUWDr
    0U,	// FCVTAUUWHr
    0U,	// FCVTAUUWSr
    0U,	// FCVTAUUXDr
    0U,	// FCVTAUUXHr
    0U,	// FCVTAUUXSr
    0U,	// FCVTAUv1f16
    0U,	// FCVTAUv1i32
    0U,	// FCVTAUv1i64
    0U,	// FCVTAUv2f32
    0U,	// FCVTAUv2f64
    0U,	// FCVTAUv4f16
    0U,	// FCVTAUv4f32
    0U,	// FCVTAUv8f16
    0U,	// FCVTDHr
    0U,	// FCVTDSr
    0U,	// FCVTHDr
    0U,	// FCVTHSr
    0U,	// FCVTLv2i32
    0U,	// FCVTLv4i16
    0U,	// FCVTLv4i32
    0U,	// FCVTLv8i16
    0U,	// FCVTMSUWDr
    0U,	// FCVTMSUWHr
    0U,	// FCVTMSUWSr
    0U,	// FCVTMSUXDr
    0U,	// FCVTMSUXHr
    0U,	// FCVTMSUXSr
    0U,	// FCVTMSv1f16
    0U,	// FCVTMSv1i32
    0U,	// FCVTMSv1i64
    0U,	// FCVTMSv2f32
    0U,	// FCVTMSv2f64
    0U,	// FCVTMSv4f16
    0U,	// FCVTMSv4f32
    0U,	// FCVTMSv8f16
    0U,	// FCVTMUUWDr
    0U,	// FCVTMUUWHr
    0U,	// FCVTMUUWSr
    0U,	// FCVTMUUXDr
    0U,	// FCVTMUUXHr
    0U,	// FCVTMUUXSr
    0U,	// FCVTMUv1f16
    0U,	// FCVTMUv1i32
    0U,	// FCVTMUv1i64
    0U,	// FCVTMUv2f32
    0U,	// FCVTMUv2f64
    0U,	// FCVTMUv4f16
    0U,	// FCVTMUv4f32
    0U,	// FCVTMUv8f16
    0U,	// FCVTNSUWDr
    0U,	// FCVTNSUWHr
    0U,	// FCVTNSUWSr
    0U,	// FCVTNSUXDr
    0U,	// FCVTNSUXHr
    0U,	// FCVTNSUXSr
    0U,	// FCVTNSv1f16
    0U,	// FCVTNSv1i32
    0U,	// FCVTNSv1i64
    0U,	// FCVTNSv2f32
    0U,	// FCVTNSv2f64
    0U,	// FCVTNSv4f16
    0U,	// FCVTNSv4f32
    0U,	// FCVTNSv8f16
    0U,	// FCVTNUUWDr
    0U,	// FCVTNUUWHr
    0U,	// FCVTNUUWSr
    0U,	// FCVTNUUXDr
    0U,	// FCVTNUUXHr
    0U,	// FCVTNUUXSr
    0U,	// FCVTNUv1f16
    0U,	// FCVTNUv1i32
    0U,	// FCVTNUv1i64
    0U,	// FCVTNUv2f32
    0U,	// FCVTNUv2f64
    0U,	// FCVTNUv4f16
    0U,	// FCVTNUv4f32
    0U,	// FCVTNUv8f16
    0U,	// FCVTNv2i32
    0U,	// FCVTNv4i16
    0U,	// FCVTNv4i32
    0U,	// FCVTNv8i16
    0U,	// FCVTPSUWDr
    0U,	// FCVTPSUWHr
    0U,	// FCVTPSUWSr
    0U,	// FCVTPSUXDr
    0U,	// FCVTPSUXHr
    0U,	// FCVTPSUXSr
    0U,	// FCVTPSv1f16
    0U,	// FCVTPSv1i32
    0U,	// FCVTPSv1i64
    0U,	// FCVTPSv2f32
    0U,	// FCVTPSv2f64
    0U,	// FCVTPSv4f16
    0U,	// FCVTPSv4f32
    0U,	// FCVTPSv8f16
    0U,	// FCVTPUUWDr
    0U,	// FCVTPUUWHr
    0U,	// FCVTPUUWSr
    0U,	// FCVTPUUXDr
    0U,	// FCVTPUUXHr
    0U,	// FCVTPUUXSr
    0U,	// FCVTPUv1f16
    0U,	// FCVTPUv1i32
    0U,	// FCVTPUv1i64
    0U,	// FCVTPUv2f32
    0U,	// FCVTPUv2f64
    0U,	// FCVTPUv4f16
    0U,	// FCVTPUv4f32
    0U,	// FCVTPUv8f16
    0U,	// FCVTSDr
    0U,	// FCVTSHr
    0U,	// FCVTXNv1i64
    0U,	// FCVTXNv2f32
    0U,	// FCVTXNv4f32
    0U,	// FCVTZSSWDri
    0U,	// FCVTZSSWHri
    0U,	// FCVTZSSWSri
    0U,	// FCVTZSSXDri
    0U,	// FCVTZSSXHri
    0U,	// FCVTZSSXSri
    0U,	// FCVTZSUWDr
    0U,	// FCVTZSUWHr
    0U,	// FCVTZSUWSr
    0U,	// FCVTZSUXDr
    0U,	// FCVTZSUXHr
    0U,	// FCVTZSUXSr
    0U,	// FCVTZSd
    0U,	// FCVTZSh
    0U,	// FCVTZSs
    0U,	// FCVTZSv1f16
    0U,	// FCVTZSv1i32
    0U,	// FCVTZSv1i64
    0U,	// FCVTZSv2f32
    0U,	// FCVTZSv2f64
    0U,	// FCVTZSv2i32_shift
    0U,	// FCVTZSv2i64_shift
    0U,	// FCVTZSv4f16
    0U,	// FCVTZSv4f32
    0U,	// FCVTZSv4i16_shift
    0U,	// FCVTZSv4i32_shift
    0U,	// FCVTZSv8f16
    0U,	// FCVTZSv8i16_shift
    0U,	// FCVTZUSWDri
    0U,	// FCVTZUSWHri
    0U,	// FCVTZUSWSri
    0U,	// FCVTZUSXDri
    0U,	// FCVTZUSXHri
    0U,	// FCVTZUSXSri
    0U,	// FCVTZUUWDr
    0U,	// FCVTZUUWHr
    0U,	// FCVTZUUWSr
    0U,	// FCVTZUUXDr
    0U,	// FCVTZUUXHr
    0U,	// FCVTZUUXSr
    0U,	// FCVTZUd
    0U,	// FCVTZUh
    0U,	// FCVTZUs
    0U,	// FCVTZUv1f16
    0U,	// FCVTZUv1i32
    0U,	// FCVTZUv1i64
    0U,	// FCVTZUv2f32
    0U,	// FCVTZUv2f64
    0U,	// FCVTZUv2i32_shift
    0U,	// FCVTZUv2i64_shift
    0U,	// FCVTZUv4f16
    0U,	// FCVTZUv4f32
    0U,	// FCVTZUv4i16_shift
    0U,	// FCVTZUv4i32_shift
    0U,	// FCVTZUv8f16
    0U,	// FCVTZUv8i16_shift
    0U,	// FDIVDrr
    0U,	// FDIVHrr
    0U,	// FDIVSrr
    0U,	// FDIVv2f32
    0U,	// FDIVv2f64
    0U,	// FDIVv4f16
    0U,	// FDIVv4f32
    0U,	// FDIVv8f16
    0U,	// FMADDDrrr
    0U,	// FMADDHrrr
    0U,	// FMADDSrrr
    0U,	// FMAXDrr
    0U,	// FMAXHrr
    0U,	// FMAXNMDrr
    0U,	// FMAXNMHrr
    0U,	// FMAXNMPv2f32
    0U,	// FMAXNMPv2f64
    0U,	// FMAXNMPv2i16p
    0U,	// FMAXNMPv2i32p
    0U,	// FMAXNMPv2i64p
    0U,	// FMAXNMPv4f16
    0U,	// FMAXNMPv4f32
    0U,	// FMAXNMPv8f16
    0U,	// FMAXNMSrr
    0U,	// FMAXNMVv4i16v
    0U,	// FMAXNMVv4i32v
    0U,	// FMAXNMVv8i16v
    0U,	// FMAXNMv2f32
    0U,	// FMAXNMv2f64
    0U,	// FMAXNMv4f16
    0U,	// FMAXNMv4f32
    0U,	// FMAXNMv8f16
    0U,	// FMAXPv2f32
    0U,	// FMAXPv2f64
    0U,	// FMAXPv2i16p
    0U,	// FMAXPv2i32p
    0U,	// FMAXPv2i64p
    0U,	// FMAXPv4f16
    0U,	// FMAXPv4f32
    0U,	// FMAXPv8f16
    0U,	// FMAXSrr
    0U,	// FMAXVv4i16v
    0U,	// FMAXVv4i32v
    0U,	// FMAXVv8i16v
    0U,	// FMAXv2f32
    0U,	// FMAXv2f64
    0U,	// FMAXv4f16
    0U,	// FMAXv4f32
    0U,	// FMAXv8f16
    0U,	// FMINDrr
    0U,	// FMINHrr
    0U,	// FMINNMDrr
    0U,	// FMINNMHrr
    0U,	// FMINNMPv2f32
    0U,	// FMINNMPv2f64
    0U,	// FMINNMPv2i16p
    0U,	// FMINNMPv2i32p
    0U,	// FMINNMPv2i64p
    0U,	// FMINNMPv4f16
    0U,	// FMINNMPv4f32
    0U,	// FMINNMPv8f16
    0U,	// FMINNMSrr
    0U,	// FMINNMVv4i16v
    0U,	// FMINNMVv4i32v
    0U,	// FMINNMVv8i16v
    0U,	// FMINNMv2f32
    0U,	// FMINNMv2f64
    0U,	// FMINNMv4f16
    0U,	// FMINNMv4f32
    0U,	// FMINNMv8f16
    0U,	// FMINPv2f32
    0U,	// FMINPv2f64
    0U,	// FMINPv2i16p
    0U,	// FMINPv2i32p
    0U,	// FMINPv2i64p
    0U,	// FMINPv4f16
    0U,	// FMINPv4f32
    0U,	// FMINPv8f16
    0U,	// FMINSrr
    0U,	// FMINVv4i16v
    0U,	// FMINVv4i32v
    0U,	// FMINVv8i16v
    0U,	// FMINv2f32
    0U,	// FMINv2f64
    0U,	// FMINv4f16
    0U,	// FMINv4f32
    0U,	// FMINv8f16
    0U,	// FMLAv1i16_indexed
    0U,	// FMLAv1i32_indexed
    0U,	// FMLAv1i64_indexed
    0U,	// FMLAv2f32
    0U,	// FMLAv2f64
    0U,	// FMLAv2i32_indexed
    0U,	// FMLAv2i64_indexed
    0U,	// FMLAv4f16
    0U,	// FMLAv4f32
    0U,	// FMLAv4i16_indexed
    0U,	// FMLAv4i32_indexed
    0U,	// FMLAv8f16
    0U,	// FMLAv8i16_indexed
    0U,	// FMLSv1i16_indexed
    0U,	// FMLSv1i32_indexed
    0U,	// FMLSv1i64_indexed
    0U,	// FMLSv2f32
    0U,	// FMLSv2f64
    0U,	// FMLSv2i32_indexed
    0U,	// FMLSv2i64_indexed
    0U,	// FMLSv4f16
    0U,	// FMLSv4f32
    0U,	// FMLSv4i16_indexed
    0U,	// FMLSv4i32_indexed
    0U,	// FMLSv8f16
    0U,	// FMLSv8i16_indexed
    0U,	// FMOVD0
    0U,	// FMOVDXHighr
    0U,	// FMOVDXr
    0U,	// FMOVDi
    0U,	// FMOVDr
    0U,	// FMOVHWr
    0U,	// FMOVHXr
    0U,	// FMOVHi
    0U,	// FMOVHr
    0U,	// FMOVS0
    0U,	// FMOVSWr
    0U,	// FMOVSi
    0U,	// FMOVSr
    0U,	// FMOVWHr
    0U,	// FMOVWSr
    0U,	// FMOVXDHighr
    0U,	// FMOVXDr
    0U,	// FMOVXHr
    0U,	// FMOVv2f32_ns
    0U,	// FMOVv2f64_ns
    0U,	// FMOVv4f16_ns
    0U,	// FMOVv4f32_ns
    0U,	// FMOVv8f16_ns
    0U,	// FMSUBDrrr
    0U,	// FMSUBHrrr
    0U,	// FMSUBSrrr
    0U,	// FMULDrr
    0U,	// FMULHrr
    0U,	// FMULSrr
    0U,	// FMULX16
    0U,	// FMULX32
    0U,	// FMULX64
    0U,	// FMULXv1i16_indexed
    0U,	// FMULXv1i32_indexed
    0U,	// FMULXv1i64_indexed
    0U,	// FMULXv2f32
    0U,	// FMULXv2f64
    0U,	// FMULXv2i32_indexed
    0U,	// FMULXv2i64_indexed
    0U,	// FMULXv4f16
    0U,	// FMULXv4f32
    0U,	// FMULXv4i16_indexed
    0U,	// FMULXv4i32_indexed
    0U,	// FMULXv8f16
    0U,	// FMULXv8i16_indexed
    0U,	// FMULv1i16_indexed
    0U,	// FMULv1i32_indexed
    0U,	// FMULv1i64_indexed
    0U,	// FMULv2f32
    0U,	// FMULv2f64
    0U,	// FMULv2i32_indexed
    0U,	// FMULv2i64_indexed
    0U,	// FMULv4f16
    0U,	// FMULv4f32
    0U,	// FMULv4i16_indexed
    0U,	// FMULv4i32_indexed
    0U,	// FMULv8f16
    0U,	// FMULv8i16_indexed
    0U,	// FNEGDr
    0U,	// FNEGHr
    0U,	// FNEGSr
    0U,	// FNEGv2f32
    0U,	// FNEGv2f64
    0U,	// FNEGv4f16
    0U,	// FNEGv4f32
    0U,	// FNEGv8f16
    0U,	// FNMADDDrrr
    0U,	// FNMADDHrrr
    0U,	// FNMADDSrrr
    0U,	// FNMSUBDrrr
    0U,	// FNMSUBHrrr
    0U,	// FNMSUBSrrr
    0U,	// FNMULDrr
    0U,	// FNMULHrr
    0U,	// FNMULSrr
    0U,	// FRECPEv1f16
    0U,	// FRECPEv1i32
    0U,	// FRECPEv1i64
    0U,	// FRECPEv2f32
    0U,	// FRECPEv2f64
    0U,	// FRECPEv4f16
    0U,	// FRECPEv4f32
    0U,	// FRECPEv8f16
    0U,	// FRECPS16
    0U,	// FRECPS32
    0U,	// FRECPS64
    0U,	// FRECPSv2f32
    0U,	// FRECPSv2f64
    0U,	// FRECPSv4f16
    0U,	// FRECPSv4f32
    0U,	// FRECPSv8f16
    0U,	// FRECPXv1f16
    0U,	// FRECPXv1i32
    0U,	// FRECPXv1i64
    0U,	// FRINTADr
    0U,	// FRINTAHr
    0U,	// FRINTASr
    0U,	// FRINTAv2f32
    0U,	// FRINTAv2f64
    0U,	// FRINTAv4f16
    0U,	// FRINTAv4f32
    0U,	// FRINTAv8f16
    0U,	// FRINTIDr
    0U,	// FRINTIHr
    0U,	// FRINTISr
    0U,	// FRINTIv2f32
    0U,	// FRINTIv2f64
    0U,	// FRINTIv4f16
    0U,	// FRINTIv4f32
    0U,	// FRINTIv8f16
    0U,	// FRINTMDr
    0U,	// FRINTMHr
    0U,	// FRINTMSr
    0U,	// FRINTMv2f32
    0U,	// FRINTMv2f64
    0U,	// FRINTMv4f16
    0U,	// FRINTMv4f32
    0U,	// FRINTMv8f16
    0U,	// FRINTNDr
    0U,	// FRINTNHr
    0U,	// FRINTNSr
    0U,	// FRINTNv2f32
    0U,	// FRINTNv2f64
    0U,	// FRINTNv4f16
    0U,	// FRINTNv4f32
    0U,	// FRINTNv8f16
    0U,	// FRINTPDr
    0U,	// FRINTPHr
    0U,	// FRINTPSr
    0U,	// FRINTPv2f32
    0U,	// FRINTPv2f64
    0U,	// FRINTPv4f16
    0U,	// FRINTPv4f32
    0U,	// FRINTPv8f16
    0U,	// FRINTXDr
    0U,	// FRINTXHr
    0U,	// FRINTXSr
    0U,	// FRINTXv2f32
    0U,	// FRINTXv2f64
    0U,	// FRINTXv4f16
    0U,	// FRINTXv4f32
    0U,	// FRINTXv8f16
    0U,	// FRINTZDr
    0U,	// FRINTZHr
    0U,	// FRINTZSr
    0U,	// FRINTZv2f32
    0U,	// FRINTZv2f64
    0U,	// FRINTZv4f16
    0U,	// FRINTZv4f32
    0U,	// FRINTZv8f16
    0U,	// FRSQRTEv1f16
    0U,	// FRSQRTEv1i32
    0U,	// FRSQRTEv1i64
    0U,	// FRSQRTEv2f32
    0U,	// FRSQRTEv2f64
    0U,	// FRSQRTEv4f16
    0U,	// FRSQRTEv4f32
    0U,	// FRSQRTEv8f16
    0U,	// FRSQRTS16
    0U,	// FRSQRTS32
    0U,	// FRSQRTS64
    0U,	// FRSQRTSv2f32
    0U,	// FRSQRTSv2f64
    0U,	// FRSQRTSv4f16
    0U,	// FRSQRTSv4f32
    0U,	// FRSQRTSv8f16
    0U,	// FSQRTDr
    0U,	// FSQRTHr
    0U,	// FSQRTSr
    0U,	// FSQRTv2f32
    0U,	// FSQRTv2f64
    0U,	// FSQRTv4f16
    0U,	// FSQRTv4f32
    0U,	// FSQRTv8f16
    0U,	// FSUBDrr
    0U,	// FSUBHrr
    0U,	// FSUBSrr
    0U,	// FSUBv2f32
    0U,	// FSUBv2f64
    0U,	// FSUBv4f16
    0U,	// FSUBv4f32
    0U,	// FSUBv8f16
    0U,	// HINT
    0U,	// HLT
    0U,	// HVC
    0U,	// INSvi16gpr
    0U,	// INSvi16lane
    0U,	// INSvi32gpr
    0U,	// INSvi32lane
    0U,	// INSvi64gpr
    0U,	// INSvi64lane
    0U,	// INSvi8gpr
    0U,	// INSvi8lane
    0U,	// ISB
    0U,	// LD1Fourv16b
    0U,	// LD1Fourv16b_POST
    0U,	// LD1Fourv1d
    0U,	// LD1Fourv1d_POST
    0U,	// LD1Fourv2d
    0U,	// LD1Fourv2d_POST
    0U,	// LD1Fourv2s
    0U,	// LD1Fourv2s_POST
    0U,	// LD1Fourv4h
    0U,	// LD1Fourv4h_POST
    0U,	// LD1Fourv4s
    0U,	// LD1Fourv4s_POST
    0U,	// LD1Fourv8b
    0U,	// LD1Fourv8b_POST
    0U,	// LD1Fourv8h
    0U,	// LD1Fourv8h_POST
    0U,	// LD1Onev16b
    0U,	// LD1Onev16b_POST
    0U,	// LD1Onev1d
    0U,	// LD1Onev1d_POST
    0U,	// LD1Onev2d
    0U,	// LD1Onev2d_POST
    0U,	// LD1Onev2s
    0U,	// LD1Onev2s_POST
    0U,	// LD1Onev4h
    0U,	// LD1Onev4h_POST
    0U,	// LD1Onev4s
    0U,	// LD1Onev4s_POST
    0U,	// LD1Onev8b
    0U,	// LD1Onev8b_POST
    0U,	// LD1Onev8h
    0U,	// LD1Onev8h_POST
    0U,	// LD1Rv16b
    0U,	// LD1Rv16b_POST
    0U,	// LD1Rv1d
    0U,	// LD1Rv1d_POST
    0U,	// LD1Rv2d
    0U,	// LD1Rv2d_POST
    0U,	// LD1Rv2s
    0U,	// LD1Rv2s_POST
    0U,	// LD1Rv4h
    0U,	// LD1Rv4h_POST
    0U,	// LD1Rv4s
    0U,	// LD1Rv4s_POST
    0U,	// LD1Rv8b
    0U,	// LD1Rv8b_POST
    0U,	// LD1Rv8h
    0U,	// LD1Rv8h_POST
    0U,	// LD1Threev16b
    0U,	// LD1Threev16b_POST
    0U,	// LD1Threev1d
    0U,	// LD1Threev1d_POST
    0U,	// LD1Threev2d
    0U,	// LD1Threev2d_POST
    0U,	// LD1Threev2s
    0U,	// LD1Threev2s_POST
    0U,	// LD1Threev4h
    0U,	// LD1Threev4h_POST
    0U,	// LD1Threev4s
    0U,	// LD1Threev4s_POST
    0U,	// LD1Threev8b
    0U,	// LD1Threev8b_POST
    0U,	// LD1Threev8h
    0U,	// LD1Threev8h_POST
    0U,	// LD1Twov16b
    0U,	// LD1Twov16b_POST
    0U,	// LD1Twov1d
    0U,	// LD1Twov1d_POST
    0U,	// LD1Twov2d
    0U,	// LD1Twov2d_POST
    0U,	// LD1Twov2s
    0U,	// LD1Twov2s_POST
    0U,	// LD1Twov4h
    0U,	// LD1Twov4h_POST
    0U,	// LD1Twov4s
    0U,	// LD1Twov4s_POST
    0U,	// LD1Twov8b
    0U,	// LD1Twov8b_POST
    0U,	// LD1Twov8h
    0U,	// LD1Twov8h_POST
    0U,	// LD1i16
    0U,	// LD1i16_POST
    0U,	// LD1i32
    0U,	// LD1i32_POST
    0U,	// LD1i64
    0U,	// LD1i64_POST
    0U,	// LD1i8
    0U,	// LD1i8_POST
    0U,	// LD2Rv16b
    0U,	// LD2Rv16b_POST
    0U,	// LD2Rv1d
    0U,	// LD2Rv1d_POST
    0U,	// LD2Rv2d
    0U,	// LD2Rv2d_POST
    0U,	// LD2Rv2s
    0U,	// LD2Rv2s_POST
    0U,	// LD2Rv4h
    0U,	// LD2Rv4h_POST
    0U,	// LD2Rv4s
    0U,	// LD2Rv4s_POST
    0U,	// LD2Rv8b
    0U,	// LD2Rv8b_POST
    0U,	// LD2Rv8h
    0U,	// LD2Rv8h_POST
    0U,	// LD2Twov16b
    0U,	// LD2Twov16b_POST
    0U,	// LD2Twov2d
    0U,	// LD2Twov2d_POST
    0U,	// LD2Twov2s
    0U,	// LD2Twov2s_POST
    0U,	// LD2Twov4h
    0U,	// LD2Twov4h_POST
    0U,	// LD2Twov4s
    0U,	// LD2Twov4s_POST
    0U,	// LD2Twov8b
    0U,	// LD2Twov8b_POST
    0U,	// LD2Twov8h
    0U,	// LD2Twov8h_POST
    0U,	// LD2i16
    0U,	// LD2i16_POST
    0U,	// LD2i32
    0U,	// LD2i32_POST
    0U,	// LD2i64
    0U,	// LD2i64_POST
    0U,	// LD2i8
    0U,	// LD2i8_POST
    0U,	// LD3Rv16b
    0U,	// LD3Rv16b_POST
    0U,	// LD3Rv1d
    0U,	// LD3Rv1d_POST
    0U,	// LD3Rv2d
    0U,	// LD3Rv2d_POST
    0U,	// LD3Rv2s
    0U,	// LD3Rv2s_POST
    0U,	// LD3Rv4h
    0U,	// LD3Rv4h_POST
    0U,	// LD3Rv4s
    0U,	// LD3Rv4s_POST
    0U,	// LD3Rv8b
    0U,	// LD3Rv8b_POST
    0U,	// LD3Rv8h
    0U,	// LD3Rv8h_POST
    0U,	// LD3Threev16b
    0U,	// LD3Threev16b_POST
    0U,	// LD3Threev2d
    0U,	// LD3Threev2d_POST
    0U,	// LD3Threev2s
    0U,	// LD3Threev2s_POST
    0U,	// LD3Threev4h
    0U,	// LD3Threev4h_POST
    0U,	// LD3Threev4s
    0U,	// LD3Threev4s_POST
    0U,	// LD3Threev8b
    0U,	// LD3Threev8b_POST
    0U,	// LD3Threev8h
    0U,	// LD3Threev8h_POST
    0U,	// LD3i16
    0U,	// LD3i16_POST
    0U,	// LD3i32
    0U,	// LD3i32_POST
    0U,	// LD3i64
    0U,	// LD3i64_POST
    0U,	// LD3i8
    0U,	// LD3i8_POST
    0U,	// LD4Fourv16b
    0U,	// LD4Fourv16b_POST
    0U,	// LD4Fourv2d
    0U,	// LD4Fourv2d_POST
    0U,	// LD4Fourv2s
    0U,	// LD4Fourv2s_POST
    0U,	// LD4Fourv4h
    0U,	// LD4Fourv4h_POST
    0U,	// LD4Fourv4s
    0U,	// LD4Fourv4s_POST
    0U,	// LD4Fourv8b
    0U,	// LD4Fourv8b_POST
    0U,	// LD4Fourv8h
    0U,	// LD4Fourv8h_POST
    0U,	// LD4Rv16b
    0U,	// LD4Rv16b_POST
    0U,	// LD4Rv1d
    0U,	// LD4Rv1d_POST
    0U,	// LD4Rv2d
    0U,	// LD4Rv2d_POST
    0U,	// LD4Rv2s
    0U,	// LD4Rv2s_POST
    0U,	// LD4Rv4h
    0U,	// LD4Rv4h_POST
    0U,	// LD4Rv4s
    0U,	// LD4Rv4s_POST
    0U,	// LD4Rv8b
    0U,	// LD4Rv8b_POST
    0U,	// LD4Rv8h
    0U,	// LD4Rv8h_POST
    0U,	// LD4i16
    0U,	// LD4i16_POST
    0U,	// LD4i32
    0U,	// LD4i32_POST
    0U,	// LD4i64
    0U,	// LD4i64_POST
    0U,	// LD4i8
    0U,	// LD4i8_POST
    0U,	// LDADDAB
    0U,	// LDADDAH
    0U,	// LDADDALB
    0U,	// LDADDALH
    0U,	// LDADDALW
    0U,	// LDADDALX
    0U,	// LDADDAW
    0U,	// LDADDAX
    0U,	// LDADDB
    0U,	// LDADDH
    0U,	// LDADDLB
    0U,	// LDADDLH
    0U,	// LDADDLW
    0U,	// LDADDLX
    0U,	// LDADDW
    0U,	// LDADDX
    0U,	// LDAPRB
    0U,	// LDAPRH
    0U,	// LDAPRW
    0U,	// LDAPRX
    0U,	// LDARB
    0U,	// LDARH
    0U,	// LDARW
    0U,	// LDARX
    0U,	// LDAXPW
    0U,	// LDAXPX
    0U,	// LDAXRB
    0U,	// LDAXRH
    0U,	// LDAXRW
    0U,	// LDAXRX
    0U,	// LDCLRAB
    0U,	// LDCLRAH
    0U,	// LDCLRALB
    0U,	// LDCLRALH
    0U,	// LDCLRALW
    0U,	// LDCLRALX
    0U,	// LDCLRAW
    0U,	// LDCLRAX
    0U,	// LDCLRB
    0U,	// LDCLRH
    0U,	// LDCLRLB
    0U,	// LDCLRLH
    0U,	// LDCLRLW
    0U,	// LDCLRLX
    0U,	// LDCLRW
    0U,	// LDCLRX
    0U,	// LDEORAB
    0U,	// LDEORAH
    0U,	// LDEORALB
    0U,	// LDEORALH
    0U,	// LDEORALW
    0U,	// LDEORALX
    0U,	// LDEORAW
    0U,	// LDEORAX
    0U,	// LDEORB
    0U,	// LDEORH
    0U,	// LDEORLB
    0U,	// LDEORLH
    0U,	// LDEORLW
    0U,	// LDEORLX
    0U,	// LDEORW
    0U,	// LDEORX
    0U,	// LDLARB
    0U,	// LDLARH
    0U,	// LDLARW
    0U,	// LDLARX
    0U,	// LDNPDi
    0U,	// LDNPQi
    0U,	// LDNPSi
    0U,	// LDNPWi
    0U,	// LDNPXi
    0U,	// LDPDi
    0U,	// LDPDpost
    4U,	// LDPDpre
    0U,	// LDPQi
    0U,	// LDPQpost
    4U,	// LDPQpre
    0U,	// LDPSWi
    1U,	// LDPSWpost
    5U,	// LDPSWpre
    0U,	// LDPSi
    1U,	// LDPSpost
    5U,	// LDPSpre
    0U,	// LDPWi
    1U,	// LDPWpost
    5U,	// LDPWpre
    0U,	// LDPXi
    0U,	// LDPXpost
    4U,	// LDPXpre
    0U,	// LDRAAindexed
    0U,	// LDRAAwriteback
    0U,	// LDRABindexed
    0U,	// LDRABwriteback
    0U,	// LDRBBpost
    0U,	// LDRBBpre
    1U,	// LDRBBroW
    1U,	// LDRBBroX
    0U,	// LDRBBui
    0U,	// LDRBpost
    0U,	// LDRBpre
    1U,	// LDRBroW
    1U,	// LDRBroX
    0U,	// LDRBui
    0U,	// LDRDl
    0U,	// LDRDpost
    0U,	// LDRDpre
    1U,	// LDRDroW
    1U,	// LDRDroX
    0U,	// LDRDui
    0U,	// LDRHHpost
    0U,	// LDRHHpre
    1U,	// LDRHHroW
    1U,	// LDRHHroX
    0U,	// LDRHHui
    0U,	// LDRHpost
    0U,	// LDRHpre
    1U,	// LDRHroW
    1U,	// LDRHroX
    0U,	// LDRHui
    0U,	// LDRQl
    0U,	// LDRQpost
    0U,	// LDRQpre
    1U,	// LDRQroW
    2U,	// LDRQroX
    0U,	// LDRQui
    0U,	// LDRSBWpost
    0U,	// LDRSBWpre
    1U,	// LDRSBWroW
    1U,	// LDRSBWroX
    0U,	// LDRSBWui
    0U,	// LDRSBXpost
    0U,	// LDRSBXpre
    1U,	// LDRSBXroW
    1U,	// LDRSBXroX
    0U,	// LDRSBXui
    0U,	// LDRSHWpost
    0U,	// LDRSHWpre
    1U,	// LDRSHWroW
    1U,	// LDRSHWroX
    0U,	// LDRSHWui
    0U,	// LDRSHXpost
    0U,	// LDRSHXpre
    1U,	// LDRSHXroW
    1U,	// LDRSHXroX
    0U,	// LDRSHXui
    0U,	// LDRSWl
    0U,	// LDRSWpost
    0U,	// LDRSWpre
    2U,	// LDRSWroW
    2U,	// LDRSWroX
    0U,	// LDRSWui
    0U,	// LDRSl
    0U,	// LDRSpost
    0U,	// LDRSpre
    2U,	// LDRSroW
    2U,	// LDRSroX
    0U,	// LDRSui
    0U,	// LDRWl
    0U,	// LDRWpost
    0U,	// LDRWpre
    2U,	// LDRWroW
    2U,	// LDRWroX
    0U,	// LDRWui
    0U,	// LDRXl
    0U,	// LDRXpost
    0U,	// LDRXpre
    1U,	// LDRXroW
    1U,	// LDRXroX
    0U,	// LDRXui
    0U,	// LDSETAB
    0U,	// LDSETAH
    0U,	// LDSETALB
    0U,	// LDSETALH
    0U,	// LDSETALW
    0U,	// LDSETALX
    0U,	// LDSETAW
    0U,	// LDSETAX
    0U,	// LDSETB
    0U,	// LDSETH
    0U,	// LDSETLB
    0U,	// LDSETLH
    0U,	// LDSETLW
    0U,	// LDSETLX
    0U,	// LDSETW
    0U,	// LDSETX
    0U,	// LDSMAXAB
    0U,	// LDSMAXAH
    0U,	// LDSMAXALB
    0U,	// LDSMAXALH
    0U,	// LDSMAXALW
    0U,	// LDSMAXALX
    0U,	// LDSMAXAW
    0U,	// LDSMAXAX
    0U,	// LDSMAXB
    0U,	// LDSMAXH
    0U,	// LDSMAXLB
    0U,	// LDSMAXLH
    0U,	// LDSMAXLW
    0U,	// LDSMAXLX
    0U,	// LDSMAXW
    0U,	// LDSMAXX
    0U,	// LDSMINAB
    0U,	// LDSMINAH
    0U,	// LDSMINALB
    0U,	// LDSMINALH
    0U,	// LDSMINALW
    0U,	// LDSMINALX
    0U,	// LDSMINAW
    0U,	// LDSMINAX
    0U,	// LDSMINB
    0U,	// LDSMINH
    0U,	// LDSMINLB
    0U,	// LDSMINLH
    0U,	// LDSMINLW
    0U,	// LDSMINLX
    0U,	// LDSMINW
    0U,	// LDSMINX
    0U,	// LDTRBi
    0U,	// LDTRHi
    0U,	// LDTRSBWi
    0U,	// LDTRSBXi
    0U,	// LDTRSHWi
    0U,	// LDTRSHXi
    0U,	// LDTRSWi
    0U,	// LDTRWi
    0U,	// LDTRXi
    0U,	// LDUMAXAB
    0U,	// LDUMAXAH
    0U,	// LDUMAXALB
    0U,	// LDUMAXALH
    0U,	// LDUMAXALW
    0U,	// LDUMAXALX
    0U,	// LDUMAXAW
    0U,	// LDUMAXAX
    0U,	// LDUMAXB
    0U,	// LDUMAXH
    0U,	// LDUMAXLB
    0U,	// LDUMAXLH
    0U,	// LDUMAXLW
    0U,	// LDUMAXLX
    0U,	// LDUMAXW
    0U,	// LDUMAXX
    0U,	// LDUMINAB
    0U,	// LDUMINAH
    0U,	// LDUMINALB
    0U,	// LDUMINALH
    0U,	// LDUMINALW
    0U,	// LDUMINALX
    0U,	// LDUMINAW
    0U,	// LDUMINAX
    0U,	// LDUMINB
    0U,	// LDUMINH
    0U,	// LDUMINLB
    0U,	// LDUMINLH
    0U,	// LDUMINLW
    0U,	// LDUMINLX
    0U,	// LDUMINW
    0U,	// LDUMINX
    0U,	// LDURBBi
    0U,	// LDURBi
    0U,	// LDURDi
    0U,	// LDURHHi
    0U,	// LDURHi
    0U,	// LDURQi
    0U,	// LDURSBWi
    0U,	// LDURSBXi
    0U,	// LDURSHWi
    0U,	// LDURSHXi
    0U,	// LDURSWi
    0U,	// LDURSi
    0U,	// LDURWi
    0U,	// LDURXi
    0U,	// LDXPW
    0U,	// LDXPX
    0U,	// LDXRB
    0U,	// LDXRH
    0U,	// LDXRW
    0U,	// LDXRX
    0U,	// LOADgot
    0U,	// LSLVWr
    0U,	// LSLVXr
    0U,	// LSRVWr
    0U,	// LSRVXr
    0U,	// MADDWrrr
    0U,	// MADDXrrr
    0U,	// MLAv16i8
    0U,	// MLAv2i32
    0U,	// MLAv2i32_indexed
    0U,	// MLAv4i16
    0U,	// MLAv4i16_indexed
    0U,	// MLAv4i32
    0U,	// MLAv4i32_indexed
    0U,	// MLAv8i16
    0U,	// MLAv8i16_indexed
    0U,	// MLAv8i8
    0U,	// MLSv16i8
    0U,	// MLSv2i32
    0U,	// MLSv2i32_indexed
    0U,	// MLSv4i16
    0U,	// MLSv4i16_indexed
    0U,	// MLSv4i32
    0U,	// MLSv4i32_indexed
    0U,	// MLSv8i16
    0U,	// MLSv8i16_indexed
    0U,	// MLSv8i8
    0U,	// MOVID
    0U,	// MOVIv16b_ns
    0U,	// MOVIv2d_ns
    0U,	// MOVIv2i32
    0U,	// MOVIv2s_msl
    0U,	// MOVIv4i16
    0U,	// MOVIv4i32
    0U,	// MOVIv4s_msl
    0U,	// MOVIv8b_ns
    0U,	// MOVIv8i16
    0U,	// MOVKWi
    0U,	// MOVKXi
    0U,	// MOVNWi
    0U,	// MOVNXi
    0U,	// MOVZWi
    0U,	// MOVZXi
    0U,	// MOVaddr
    0U,	// MOVaddrBA
    0U,	// MOVaddrCP
    0U,	// MOVaddrEXT
    0U,	// MOVaddrJT
    0U,	// MOVaddrTLS
    0U,	// MOVbaseTLS
    0U,	// MOVi32imm
    0U,	// MOVi64imm
    0U,	// MRS
    0U,	// MSR
    0U,	// MSRpstateImm1
    0U,	// MSRpstateImm4
    0U,	// MSUBWrrr
    0U,	// MSUBXrrr
    0U,	// MULv16i8
    0U,	// MULv2i32
    0U,	// MULv2i32_indexed
    0U,	// MULv4i16
    0U,	// MULv4i16_indexed
    0U,	// MULv4i32
    0U,	// MULv4i32_indexed
    0U,	// MULv8i16
    0U,	// MULv8i16_indexed
    0U,	// MULv8i8
    0U,	// MVNIv2i32
    0U,	// MVNIv2s_msl
    0U,	// MVNIv4i16
    0U,	// MVNIv4i32
    0U,	// MVNIv4s_msl
    0U,	// MVNIv8i16
    0U,	// NEGv16i8
    0U,	// NEGv1i64
    0U,	// NEGv2i32
    0U,	// NEGv2i64
    0U,	// NEGv4i16
    0U,	// NEGv4i32
    0U,	// NEGv8i16
    0U,	// NEGv8i8
    0U,	// NOTv16i8
    0U,	// NOTv8i8
    0U,	// ORNWrr
    0U,	// ORNWrs
    0U,	// ORNXrr
    0U,	// ORNXrs
    0U,	// ORNv16i8
    0U,	// ORNv8i8
    0U,	// ORRWri
    0U,	// ORRWrr
    0U,	// ORRWrs
    0U,	// ORRXri
    0U,	// ORRXrr
    0U,	// ORRXrs
    0U,	// ORRv16i8
    0U,	// ORRv2i32
    0U,	// ORRv4i16
    0U,	// ORRv4i32
    0U,	// ORRv8i16
    0U,	// ORRv8i8
    0U,	// PACDA
    0U,	// PACDB
    0U,	// PACDZA
    0U,	// PACDZB
    0U,	// PACGA
    0U,	// PACIA
    0U,	// PACIA1716
    0U,	// PACIASP
    0U,	// PACIAZ
    0U,	// PACIB
    0U,	// PACIB1716
    0U,	// PACIBSP
    0U,	// PACIBZ
    0U,	// PACIZA
    0U,	// PACIZB
    0U,	// PMULLv16i8
    0U,	// PMULLv1i64
    0U,	// PMULLv2i64
    0U,	// PMULLv8i8
    0U,	// PMULv16i8
    0U,	// PMULv8i8
    0U,	// PRFMl
    1U,	// PRFMroW
    1U,	// PRFMroX
    0U,	// PRFMui
    0U,	// PRFUMi
    0U,	// RADDHNv2i64_v2i32
    0U,	// RADDHNv2i64_v4i32
    0U,	// RADDHNv4i32_v4i16
    0U,	// RADDHNv4i32_v8i16
    0U,	// RADDHNv8i16_v16i8
    0U,	// RADDHNv8i16_v8i8
    0U,	// RBITWr
    0U,	// RBITXr
    0U,	// RBITv16i8
    0U,	// RBITv8i8
    0U,	// RET
    0U,	// RETAA
    0U,	// RETAB
    0U,	// RET_ReallyLR
    0U,	// REV16Wr
    0U,	// REV16Xr
    0U,	// REV16v16i8
    0U,	// REV16v8i8
    0U,	// REV32Xr
    0U,	// REV32v16i8
    0U,	// REV32v4i16
    0U,	// REV32v8i16
    0U,	// REV32v8i8
    0U,	// REV64v16i8
    0U,	// REV64v2i32
    0U,	// REV64v4i16
    0U,	// REV64v4i32
    0U,	// REV64v8i16
    0U,	// REV64v8i8
    0U,	// REVWr
    0U,	// REVXr
    0U,	// RORVWr
    0U,	// RORVXr
    0U,	// RSHRNv16i8_shift
    0U,	// RSHRNv2i32_shift
    0U,	// RSHRNv4i16_shift
    0U,	// RSHRNv4i32_shift
    0U,	// RSHRNv8i16_shift
    0U,	// RSHRNv8i8_shift
    0U,	// RSUBHNv2i64_v2i32
    0U,	// RSUBHNv2i64_v4i32
    0U,	// RSUBHNv4i32_v4i16
    0U,	// RSUBHNv4i32_v8i16
    0U,	// RSUBHNv8i16_v16i8
    0U,	// RSUBHNv8i16_v8i8
    0U,	// SABALv16i8_v8i16
    0U,	// SABALv2i32_v2i64
    0U,	// SABALv4i16_v4i32
    0U,	// SABALv4i32_v2i64
    0U,	// SABALv8i16_v4i32
    0U,	// SABALv8i8_v8i16
    0U,	// SABAv16i8
    0U,	// SABAv2i32
    0U,	// SABAv4i16
    0U,	// SABAv4i32
    0U,	// SABAv8i16
    0U,	// SABAv8i8
    0U,	// SABDLv16i8_v8i16
    0U,	// SABDLv2i32_v2i64
    0U,	// SABDLv4i16_v4i32
    0U,	// SABDLv4i32_v2i64
    0U,	// SABDLv8i16_v4i32
    0U,	// SABDLv8i8_v8i16
    0U,	// SABDv16i8
    0U,	// SABDv2i32
    0U,	// SABDv4i16
    0U,	// SABDv4i32
    0U,	// SABDv8i16
    0U,	// SABDv8i8
    0U,	// SADALPv16i8_v8i16
    0U,	// SADALPv2i32_v1i64
    0U,	// SADALPv4i16_v2i32
    0U,	// SADALPv4i32_v2i64
    0U,	// SADALPv8i16_v4i32
    0U,	// SADALPv8i8_v4i16
    0U,	// SADDLPv16i8_v8i16
    0U,	// SADDLPv2i32_v1i64
    0U,	// SADDLPv4i16_v2i32
    0U,	// SADDLPv4i32_v2i64
    0U,	// SADDLPv8i16_v4i32
    0U,	// SADDLPv8i8_v4i16
    0U,	// SADDLVv16i8v
    0U,	// SADDLVv4i16v
    0U,	// SADDLVv4i32v
    0U,	// SADDLVv8i16v
    0U,	// SADDLVv8i8v
    0U,	// SADDLv16i8_v8i16
    0U,	// SADDLv2i32_v2i64
    0U,	// SADDLv4i16_v4i32
    0U,	// SADDLv4i32_v2i64
    0U,	// SADDLv8i16_v4i32
    0U,	// SADDLv8i8_v8i16
    0U,	// SADDWv16i8_v8i16
    0U,	// SADDWv2i32_v2i64
    0U,	// SADDWv4i16_v4i32
    0U,	// SADDWv4i32_v2i64
    0U,	// SADDWv8i16_v4i32
    0U,	// SADDWv8i8_v8i16
    0U,	// SBCSWr
    0U,	// SBCSXr
    0U,	// SBCWr
    0U,	// SBCXr
    0U,	// SBFMWri
    0U,	// SBFMXri
    0U,	// SCVTFSWDri
    0U,	// SCVTFSWHri
    0U,	// SCVTFSWSri
    0U,	// SCVTFSXDri
    0U,	// SCVTFSXHri
    0U,	// SCVTFSXSri
    0U,	// SCVTFUWDri
    0U,	// SCVTFUWHri
    0U,	// SCVTFUWSri
    0U,	// SCVTFUXDri
    0U,	// SCVTFUXHri
    0U,	// SCVTFUXSri
    0U,	// SCVTFd
    0U,	// SCVTFh
    0U,	// SCVTFs
    0U,	// SCVTFv1i16
    0U,	// SCVTFv1i32
    0U,	// SCVTFv1i64
    0U,	// SCVTFv2f32
    0U,	// SCVTFv2f64
    0U,	// SCVTFv2i32_shift
    0U,	// SCVTFv2i64_shift
    0U,	// SCVTFv4f16
    0U,	// SCVTFv4f32
    0U,	// SCVTFv4i16_shift
    0U,	// SCVTFv4i32_shift
    0U,	// SCVTFv8f16
    0U,	// SCVTFv8i16_shift
    0U,	// SDIVWr
    0U,	// SDIVXr
    0U,	// SDOT2S
    0U,	// SDOT4S
    0U,	// SDOTIDX2S
    0U,	// SDOTIDX4S
    0U,	// SHA1Crrr
    0U,	// SHA1Hrr
    0U,	// SHA1Mrrr
    0U,	// SHA1Prrr
    0U,	// SHA1SU0rrr
    0U,	// SHA1SU1rr
    0U,	// SHA256H2rrr
    0U,	// SHA256Hrrr
    0U,	// SHA256SU0rr
    0U,	// SHA256SU1rrr
    0U,	// SHADDv16i8
    0U,	// SHADDv2i32
    0U,	// SHADDv4i16
    0U,	// SHADDv4i32
    0U,	// SHADDv8i16
    0U,	// SHADDv8i8
    0U,	// SHLLv16i8
    0U,	// SHLLv2i32
    0U,	// SHLLv4i16
    0U,	// SHLLv4i32
    0U,	// SHLLv8i16
    0U,	// SHLLv8i8
    0U,	// SHLd
    0U,	// SHLv16i8_shift
    0U,	// SHLv2i32_shift
    0U,	// SHLv2i64_shift
    0U,	// SHLv4i16_shift
    0U,	// SHLv4i32_shift
    0U,	// SHLv8i16_shift
    0U,	// SHLv8i8_shift
    0U,	// SHRNv16i8_shift
    0U,	// SHRNv2i32_shift
    0U,	// SHRNv4i16_shift
    0U,	// SHRNv4i32_shift
    0U,	// SHRNv8i16_shift
    0U,	// SHRNv8i8_shift
    0U,	// SHSUBv16i8
    0U,	// SHSUBv2i32
    0U,	// SHSUBv4i16
    0U,	// SHSUBv4i32
    0U,	// SHSUBv8i16
    0U,	// SHSUBv8i8
    0U,	// SLId
    0U,	// SLIv16i8_shift
    0U,	// SLIv2i32_shift
    0U,	// SLIv2i64_shift
    0U,	// SLIv4i16_shift
    0U,	// SLIv4i32_shift
    0U,	// SLIv8i16_shift
    0U,	// SLIv8i8_shift
    0U,	// SMADDLrrr
    0U,	// SMAXPv16i8
    0U,	// SMAXPv2i32
    0U,	// SMAXPv4i16
    0U,	// SMAXPv4i32
    0U,	// SMAXPv8i16
    0U,	// SMAXPv8i8
    0U,	// SMAXVv16i8v
    0U,	// SMAXVv4i16v
    0U,	// SMAXVv4i32v
    0U,	// SMAXVv8i16v
    0U,	// SMAXVv8i8v
    0U,	// SMAXv16i8
    0U,	// SMAXv2i32
    0U,	// SMAXv4i16
    0U,	// SMAXv4i32
    0U,	// SMAXv8i16
    0U,	// SMAXv8i8
    0U,	// SMC
    0U,	// SMINPv16i8
    0U,	// SMINPv2i32
    0U,	// SMINPv4i16
    0U,	// SMINPv4i32
    0U,	// SMINPv8i16
    0U,	// SMINPv8i8
    0U,	// SMINVv16i8v
    0U,	// SMINVv4i16v
    0U,	// SMINVv4i32v
    0U,	// SMINVv8i16v
    0U,	// SMINVv8i8v
    0U,	// SMINv16i8
    0U,	// SMINv2i32
    0U,	// SMINv4i16
    0U,	// SMINv4i32
    0U,	// SMINv8i16
    0U,	// SMINv8i8
    0U,	// SMLALv16i8_v8i16
    0U,	// SMLALv2i32_indexed
    0U,	// SMLALv2i32_v2i64
    0U,	// SMLALv4i16_indexed
    0U,	// SMLALv4i16_v4i32
    0U,	// SMLALv4i32_indexed
    0U,	// SMLALv4i32_v2i64
    0U,	// SMLALv8i16_indexed
    0U,	// SMLALv8i16_v4i32
    0U,	// SMLALv8i8_v8i16
    0U,	// SMLSLv16i8_v8i16
    0U,	// SMLSLv2i32_indexed
    0U,	// SMLSLv2i32_v2i64
    0U,	// SMLSLv4i16_indexed
    0U,	// SMLSLv4i16_v4i32
    0U,	// SMLSLv4i32_indexed
    0U,	// SMLSLv4i32_v2i64
    0U,	// SMLSLv8i16_indexed
    0U,	// SMLSLv8i16_v4i32
    0U,	// SMLSLv8i8_v8i16
    0U,	// SMOVvi16to32
    0U,	// SMOVvi16to64
    0U,	// SMOVvi32to64
    0U,	// SMOVvi8to32
    0U,	// SMOVvi8to64
    0U,	// SMSUBLrrr
    0U,	// SMULHrr
    0U,	// SMULLv16i8_v8i16
    0U,	// SMULLv2i32_indexed
    0U,	// SMULLv2i32_v2i64
    0U,	// SMULLv4i16_indexed
    0U,	// SMULLv4i16_v4i32
    0U,	// SMULLv4i32_indexed
    0U,	// SMULLv4i32_v2i64
    0U,	// SMULLv8i16_indexed
    0U,	// SMULLv8i16_v4i32
    0U,	// SMULLv8i8_v8i16
    0U,	// SQABSv16i8
    0U,	// SQABSv1i16
    0U,	// SQABSv1i32
    0U,	// SQABSv1i64
    0U,	// SQABSv1i8
    0U,	// SQABSv2i32
    0U,	// SQABSv2i64
    0U,	// SQABSv4i16
    0U,	// SQABSv4i32
    0U,	// SQABSv8i16
    0U,	// SQABSv8i8
    0U,	// SQADDv16i8
    0U,	// SQADDv1i16
    0U,	// SQADDv1i32
    0U,	// SQADDv1i64
    0U,	// SQADDv1i8
    0U,	// SQADDv2i32
    0U,	// SQADDv2i64
    0U,	// SQADDv4i16
    0U,	// SQADDv4i32
    0U,	// SQADDv8i16
    0U,	// SQADDv8i8
    0U,	// SQDMLALi16
    0U,	// SQDMLALi32
    0U,	// SQDMLALv1i32_indexed
    0U,	// SQDMLALv1i64_indexed
    0U,	// SQDMLALv2i32_indexed
    0U,	// SQDMLALv2i32_v2i64
    0U,	// SQDMLALv4i16_indexed
    0U,	// SQDMLALv4i16_v4i32
    0U,	// SQDMLALv4i32_indexed
    0U,	// SQDMLALv4i32_v2i64
    0U,	// SQDMLALv8i16_indexed
    0U,	// SQDMLALv8i16_v4i32
    0U,	// SQDMLSLi16
    0U,	// SQDMLSLi32
    0U,	// SQDMLSLv1i32_indexed
    0U,	// SQDMLSLv1i64_indexed
    0U,	// SQDMLSLv2i32_indexed
    0U,	// SQDMLSLv2i32_v2i64
    0U,	// SQDMLSLv4i16_indexed
    0U,	// SQDMLSLv4i16_v4i32
    0U,	// SQDMLSLv4i32_indexed
    0U,	// SQDMLSLv4i32_v2i64
    0U,	// SQDMLSLv8i16_indexed
    0U,	// SQDMLSLv8i16_v4i32
    0U,	// SQDMULHv1i16
    0U,	// SQDMULHv1i16_indexed
    0U,	// SQDMULHv1i32
    0U,	// SQDMULHv1i32_indexed
    0U,	// SQDMULHv2i32
    0U,	// SQDMULHv2i32_indexed
    0U,	// SQDMULHv4i16
    0U,	// SQDMULHv4i16_indexed
    0U,	// SQDMULHv4i32
    0U,	// SQDMULHv4i32_indexed
    0U,	// SQDMULHv8i16
    0U,	// SQDMULHv8i16_indexed
    0U,	// SQDMULLi16
    0U,	// SQDMULLi32
    0U,	// SQDMULLv1i32_indexed
    0U,	// SQDMULLv1i64_indexed
    0U,	// SQDMULLv2i32_indexed
    0U,	// SQDMULLv2i32_v2i64
    0U,	// SQDMULLv4i16_indexed
    0U,	// SQDMULLv4i16_v4i32
    0U,	// SQDMULLv4i32_indexed
    0U,	// SQDMULLv4i32_v2i64
    0U,	// SQDMULLv8i16_indexed
    0U,	// SQDMULLv8i16_v4i32
    0U,	// SQNEGv16i8
    0U,	// SQNEGv1i16
    0U,	// SQNEGv1i32
    0U,	// SQNEGv1i64
    0U,	// SQNEGv1i8
    0U,	// SQNEGv2i32
    0U,	// SQNEGv2i64
    0U,	// SQNEGv4i16
    0U,	// SQNEGv4i32
    0U,	// SQNEGv8i16
    0U,	// SQNEGv8i8
    0U,	// SQRDMLAHi16_indexed
    0U,	// SQRDMLAHi32_indexed
    0U,	// SQRDMLAHv1i16
    0U,	// SQRDMLAHv1i32
    0U,	// SQRDMLAHv2i32
    0U,	// SQRDMLAHv2i32_indexed
    0U,	// SQRDMLAHv4i16
    0U,	// SQRDMLAHv4i16_indexed
    0U,	// SQRDMLAHv4i32
    0U,	// SQRDMLAHv4i32_indexed
    0U,	// SQRDMLAHv8i16
    0U,	// SQRDMLAHv8i16_indexed
    0U,	// SQRDMLSHi16_indexed
    0U,	// SQRDMLSHi32_indexed
    0U,	// SQRDMLSHv1i16
    0U,	// SQRDMLSHv1i32
    0U,	// SQRDMLSHv2i32
    0U,	// SQRDMLSHv2i32_indexed
    0U,	// SQRDMLSHv4i16
    0U,	// SQRDMLSHv4i16_indexed
    0U,	// SQRDMLSHv4i32
    0U,	// SQRDMLSHv4i32_indexed
    0U,	// SQRDMLSHv8i16
    0U,	// SQRDMLSHv8i16_indexed
    0U,	// SQRDMULHv1i16
    0U,	// SQRDMULHv1i16_indexed
    0U,	// SQRDMULHv1i32
    0U,	// SQRDMULHv1i32_indexed
    0U,	// SQRDMULHv2i32
    0U,	// SQRDMULHv2i32_indexed
    0U,	// SQRDMULHv4i16
    0U,	// SQRDMULHv4i16_indexed
    0U,	// SQRDMULHv4i32
    0U,	// SQRDMULHv4i32_indexed
    0U,	// SQRDMULHv8i16
    0U,	// SQRDMULHv8i16_indexed
    0U,	// SQRSHLv16i8
    0U,	// SQRSHLv1i16
    0U,	// SQRSHLv1i32
    0U,	// SQRSHLv1i64
    0U,	// SQRSHLv1i8
    0U,	// SQRSHLv2i32
    0U,	// SQRSHLv2i64
    0U,	// SQRSHLv4i16
    0U,	// SQRSHLv4i32
    0U,	// SQRSHLv8i16
    0U,	// SQRSHLv8i8
    0U,	// SQRSHRNb
    0U,	// SQRSHRNh
    0U,	// SQRSHRNs
    0U,	// SQRSHRNv16i8_shift
    0U,	// SQRSHRNv2i32_shift
    0U,	// SQRSHRNv4i16_shift
    0U,	// SQRSHRNv4i32_shift
    0U,	// SQRSHRNv8i16_shift
    0U,	// SQRSHRNv8i8_shift
    0U,	// SQRSHRUNb
    0U,	// SQRSHRUNh
    0U,	// SQRSHRUNs
    0U,	// SQRSHRUNv16i8_shift
    0U,	// SQRSHRUNv2i32_shift
    0U,	// SQRSHRUNv4i16_shift
    0U,	// SQRSHRUNv4i32_shift
    0U,	// SQRSHRUNv8i16_shift
    0U,	// SQRSHRUNv8i8_shift
    0U,	// SQSHLUb
    0U,	// SQSHLUd
    0U,	// SQSHLUh
    0U,	// SQSHLUs
    0U,	// SQSHLUv16i8_shift
    0U,	// SQSHLUv2i32_shift
    0U,	// SQSHLUv2i64_shift
    0U,	// SQSHLUv4i16_shift
    0U,	// SQSHLUv4i32_shift
    0U,	// SQSHLUv8i16_shift
    0U,	// SQSHLUv8i8_shift
    0U,	// SQSHLb
    0U,	// SQSHLd
    0U,	// SQSHLh
    0U,	// SQSHLs
    0U,	// SQSHLv16i8
    0U,	// SQSHLv16i8_shift
    0U,	// SQSHLv1i16
    0U,	// SQSHLv1i32
    0U,	// SQSHLv1i64
    0U,	// SQSHLv1i8
    0U,	// SQSHLv2i32
    0U,	// SQSHLv2i32_shift
    0U,	// SQSHLv2i64
    0U,	// SQSHLv2i64_shift
    0U,	// SQSHLv4i16
    0U,	// SQSHLv4i16_shift
    0U,	// SQSHLv4i32
    0U,	// SQSHLv4i32_shift
    0U,	// SQSHLv8i16
    0U,	// SQSHLv8i16_shift
    0U,	// SQSHLv8i8
    0U,	// SQSHLv8i8_shift
    0U,	// SQSHRNb
    0U,	// SQSHRNh
    0U,	// SQSHRNs
    0U,	// SQSHRNv16i8_shift
    0U,	// SQSHRNv2i32_shift
    0U,	// SQSHRNv4i16_shift
    0U,	// SQSHRNv4i32_shift
    0U,	// SQSHRNv8i16_shift
    0U,	// SQSHRNv8i8_shift
    0U,	// SQSHRUNb
    0U,	// SQSHRUNh
    0U,	// SQSHRUNs
    0U,	// SQSHRUNv16i8_shift
    0U,	// SQSHRUNv2i32_shift
    0U,	// SQSHRUNv4i16_shift
    0U,	// SQSHRUNv4i32_shift
    0U,	// SQSHRUNv8i16_shift
    0U,	// SQSHRUNv8i8_shift
    0U,	// SQSUBv16i8
    0U,	// SQSUBv1i16
    0U,	// SQSUBv1i32
    0U,	// SQSUBv1i64
    0U,	// SQSUBv1i8
    0U,	// SQSUBv2i32
    0U,	// SQSUBv2i64
    0U,	// SQSUBv4i16
    0U,	// SQSUBv4i32
    0U,	// SQSUBv8i16
    0U,	// SQSUBv8i8
    0U,	// SQXTNv16i8
    0U,	// SQXTNv1i16
    0U,	// SQXTNv1i32
    0U,	// SQXTNv1i8
    0U,	// SQXTNv2i32
    0U,	// SQXTNv4i16
    0U,	// SQXTNv4i32
    0U,	// SQXTNv8i16
    0U,	// SQXTNv8i8
    0U,	// SQXTUNv16i8
    0U,	// SQXTUNv1i16
    0U,	// SQXTUNv1i32
    0U,	// SQXTUNv1i8
    0U,	// SQXTUNv2i32
    0U,	// SQXTUNv4i16
    0U,	// SQXTUNv4i32
    0U,	// SQXTUNv8i16
    0U,	// SQXTUNv8i8
    0U,	// SRHADDv16i8
    0U,	// SRHADDv2i32
    0U,	// SRHADDv4i16
    0U,	// SRHADDv4i32
    0U,	// SRHADDv8i16
    0U,	// SRHADDv8i8
    0U,	// SRId
    0U,	// SRIv16i8_shift
    0U,	// SRIv2i32_shift
    0U,	// SRIv2i64_shift
    0U,	// SRIv4i16_shift
    0U,	// SRIv4i32_shift
    0U,	// SRIv8i16_shift
    0U,	// SRIv8i8_shift
    0U,	// SRSHLv16i8
    0U,	// SRSHLv1i64
    0U,	// SRSHLv2i32
    0U,	// SRSHLv2i64
    0U,	// SRSHLv4i16
    0U,	// SRSHLv4i32
    0U,	// SRSHLv8i16
    0U,	// SRSHLv8i8
    0U,	// SRSHRd
    0U,	// SRSHRv16i8_shift
    0U,	// SRSHRv2i32_shift
    0U,	// SRSHRv2i64_shift
    0U,	// SRSHRv4i16_shift
    0U,	// SRSHRv4i32_shift
    0U,	// SRSHRv8i16_shift
    0U,	// SRSHRv8i8_shift
    0U,	// SRSRAd
    0U,	// SRSRAv16i8_shift
    0U,	// SRSRAv2i32_shift
    0U,	// SRSRAv2i64_shift
    0U,	// SRSRAv4i16_shift
    0U,	// SRSRAv4i32_shift
    0U,	// SRSRAv8i16_shift
    0U,	// SRSRAv8i8_shift
    0U,	// SSHLLv16i8_shift
    0U,	// SSHLLv2i32_shift
    0U,	// SSHLLv4i16_shift
    0U,	// SSHLLv4i32_shift
    0U,	// SSHLLv8i16_shift
    0U,	// SSHLLv8i8_shift
    0U,	// SSHLv16i8
    0U,	// SSHLv1i64
    0U,	// SSHLv2i32
    0U,	// SSHLv2i64
    0U,	// SSHLv4i16
    0U,	// SSHLv4i32
    0U,	// SSHLv8i16
    0U,	// SSHLv8i8
    0U,	// SSHRd
    0U,	// SSHRv16i8_shift
    0U,	// SSHRv2i32_shift
    0U,	// SSHRv2i64_shift
    0U,	// SSHRv4i16_shift
    0U,	// SSHRv4i32_shift
    0U,	// SSHRv8i16_shift
    0U,	// SSHRv8i8_shift
    0U,	// SSRAd
    0U,	// SSRAv16i8_shift
    0U,	// SSRAv2i32_shift
    0U,	// SSRAv2i64_shift
    0U,	// SSRAv4i16_shift
    0U,	// SSRAv4i32_shift
    0U,	// SSRAv8i16_shift
    0U,	// SSRAv8i8_shift
    0U,	// SSUBLv16i8_v8i16
    0U,	// SSUBLv2i32_v2i64
    0U,	// SSUBLv4i16_v4i32
    0U,	// SSUBLv4i32_v2i64
    0U,	// SSUBLv8i16_v4i32
    0U,	// SSUBLv8i8_v8i16
    0U,	// SSUBWv16i8_v8i16
    0U,	// SSUBWv2i32_v2i64
    0U,	// SSUBWv4i16_v4i32
    0U,	// SSUBWv4i32_v2i64
    0U,	// SSUBWv8i16_v4i32
    0U,	// SSUBWv8i8_v8i16
    0U,	// ST1Fourv16b
    0U,	// ST1Fourv16b_POST
    0U,	// ST1Fourv1d
    0U,	// ST1Fourv1d_POST
    0U,	// ST1Fourv2d
    0U,	// ST1Fourv2d_POST
    0U,	// ST1Fourv2s
    0U,	// ST1Fourv2s_POST
    0U,	// ST1Fourv4h
    0U,	// ST1Fourv4h_POST
    0U,	// ST1Fourv4s
    0U,	// ST1Fourv4s_POST
    0U,	// ST1Fourv8b
    0U,	// ST1Fourv8b_POST
    0U,	// ST1Fourv8h
    0U,	// ST1Fourv8h_POST
    0U,	// ST1Onev16b
    0U,	// ST1Onev16b_POST
    0U,	// ST1Onev1d
    0U,	// ST1Onev1d_POST
    0U,	// ST1Onev2d
    0U,	// ST1Onev2d_POST
    0U,	// ST1Onev2s
    0U,	// ST1Onev2s_POST
    0U,	// ST1Onev4h
    0U,	// ST1Onev4h_POST
    0U,	// ST1Onev4s
    0U,	// ST1Onev4s_POST
    0U,	// ST1Onev8b
    0U,	// ST1Onev8b_POST
    0U,	// ST1Onev8h
    0U,	// ST1Onev8h_POST
    0U,	// ST1Threev16b
    0U,	// ST1Threev16b_POST
    0U,	// ST1Threev1d
    0U,	// ST1Threev1d_POST
    0U,	// ST1Threev2d
    0U,	// ST1Threev2d_POST
    0U,	// ST1Threev2s
    0U,	// ST1Threev2s_POST
    0U,	// ST1Threev4h
    0U,	// ST1Threev4h_POST
    0U,	// ST1Threev4s
    0U,	// ST1Threev4s_POST
    0U,	// ST1Threev8b
    0U,	// ST1Threev8b_POST
    0U,	// ST1Threev8h
    0U,	// ST1Threev8h_POST
    0U,	// ST1Twov16b
    0U,	// ST1Twov16b_POST
    0U,	// ST1Twov1d
    0U,	// ST1Twov1d_POST
    0U,	// ST1Twov2d
    0U,	// ST1Twov2d_POST
    0U,	// ST1Twov2s
    0U,	// ST1Twov2s_POST
    0U,	// ST1Twov4h
    0U,	// ST1Twov4h_POST
    0U,	// ST1Twov4s
    0U,	// ST1Twov4s_POST
    0U,	// ST1Twov8b
    0U,	// ST1Twov8b_POST
    0U,	// ST1Twov8h
    0U,	// ST1Twov8h_POST
    0U,	// ST1i16
    0U,	// ST1i16_POST
    0U,	// ST1i32
    0U,	// ST1i32_POST
    0U,	// ST1i64
    0U,	// ST1i64_POST
    0U,	// ST1i8
    0U,	// ST1i8_POST
    0U,	// ST2Twov16b
    0U,	// ST2Twov16b_POST
    0U,	// ST2Twov2d
    0U,	// ST2Twov2d_POST
    0U,	// ST2Twov2s
    0U,	// ST2Twov2s_POST
    0U,	// ST2Twov4h
    0U,	// ST2Twov4h_POST
    0U,	// ST2Twov4s
    0U,	// ST2Twov4s_POST
    0U,	// ST2Twov8b
    0U,	// ST2Twov8b_POST
    0U,	// ST2Twov8h
    0U,	// ST2Twov8h_POST
    0U,	// ST2i16
    0U,	// ST2i16_POST
    0U,	// ST2i32
    0U,	// ST2i32_POST
    0U,	// ST2i64
    0U,	// ST2i64_POST
    0U,	// ST2i8
    0U,	// ST2i8_POST
    0U,	// ST3Threev16b
    0U,	// ST3Threev16b_POST
    0U,	// ST3Threev2d
    0U,	// ST3Threev2d_POST
    0U,	// ST3Threev2s
    0U,	// ST3Threev2s_POST
    0U,	// ST3Threev4h
    0U,	// ST3Threev4h_POST
    0U,	// ST3Threev4s
    0U,	// ST3Threev4s_POST
    0U,	// ST3Threev8b
    0U,	// ST3Threev8b_POST
    0U,	// ST3Threev8h
    0U,	// ST3Threev8h_POST
    0U,	// ST3i16
    0U,	// ST3i16_POST
    0U,	// ST3i32
    0U,	// ST3i32_POST
    0U,	// ST3i64
    0U,	// ST3i64_POST
    0U,	// ST3i8
    0U,	// ST3i8_POST
    0U,	// ST4Fourv16b
    0U,	// ST4Fourv16b_POST
    0U,	// ST4Fourv2d
    0U,	// ST4Fourv2d_POST
    0U,	// ST4Fourv2s
    0U,	// ST4Fourv2s_POST
    0U,	// ST4Fourv4h
    0U,	// ST4Fourv4h_POST
    0U,	// ST4Fourv4s
    0U,	// ST4Fourv4s_POST
    0U,	// ST4Fourv8b
    0U,	// ST4Fourv8b_POST
    0U,	// ST4Fourv8h
    0U,	// ST4Fourv8h_POST
    0U,	// ST4i16
    0U,	// ST4i16_POST
    0U,	// ST4i32
    0U,	// ST4i32_POST
    0U,	// ST4i64
    0U,	// ST4i64_POST
    0U,	// ST4i8
    0U,	// ST4i8_POST
    0U,	// STLLRB
    0U,	// STLLRH
    0U,	// STLLRW
    0U,	// STLLRX
    0U,	// STLRB
    0U,	// STLRH
    0U,	// STLRW
    0U,	// STLRX
    0U,	// STLXPW
    0U,	// STLXPX
    0U,	// STLXRB
    0U,	// STLXRH
    0U,	// STLXRW
    0U,	// STLXRX
    0U,	// STNPDi
    0U,	// STNPQi
    0U,	// STNPSi
    0U,	// STNPWi
    0U,	// STNPXi
    0U,	// STPDi
    0U,	// STPDpost
    4U,	// STPDpre
    0U,	// STPQi
    0U,	// STPQpost
    4U,	// STPQpre
    0U,	// STPSi
    1U,	// STPSpost
    5U,	// STPSpre
    0U,	// STPWi
    1U,	// STPWpost
    5U,	// STPWpre
    0U,	// STPXi
    0U,	// STPXpost
    4U,	// STPXpre
    0U,	// STRBBpost
    0U,	// STRBBpre
    1U,	// STRBBroW
    1U,	// STRBBroX
    0U,	// STRBBui
    0U,	// STRBpost
    0U,	// STRBpre
    1U,	// STRBroW
    1U,	// STRBroX
    0U,	// STRBui
    0U,	// STRDpost
    0U,	// STRDpre
    1U,	// STRDroW
    1U,	// STRDroX
    0U,	// STRDui
    0U,	// STRHHpost
    0U,	// STRHHpre
    1U,	// STRHHroW
    1U,	// STRHHroX
    0U,	// STRHHui
    0U,	// STRHpost
    0U,	// STRHpre
    1U,	// STRHroW
    1U,	// STRHroX
    0U,	// STRHui
    0U,	// STRQpost
    0U,	// STRQpre
    1U,	// STRQroW
    2U,	// STRQroX
    0U,	// STRQui
    0U,	// STRSpost
    0U,	// STRSpre
    2U,	// STRSroW
    2U,	// STRSroX
    0U,	// STRSui
    0U,	// STRWpost
    0U,	// STRWpre
    2U,	// STRWroW
    2U,	// STRWroX
    0U,	// STRWui
    0U,	// STRXpost
    0U,	// STRXpre
    1U,	// STRXroW
    1U,	// STRXroX
    0U,	// STRXui
    0U,	// STTRBi
    0U,	// STTRHi
    0U,	// STTRWi
    0U,	// STTRXi
    0U,	// STURBBi
    0U,	// STURBi
    0U,	// STURDi
    0U,	// STURHHi
    0U,	// STURHi
    0U,	// STURQi
    0U,	// STURSi
    0U,	// STURWi
    0U,	// STURXi
    0U,	// STXPW
    0U,	// STXPX
    0U,	// STXRB
    0U,	// STXRH
    0U,	// STXRW
    0U,	// STXRX
    0U,	// SUBHNv2i64_v2i32
    0U,	// SUBHNv2i64_v4i32
    0U,	// SUBHNv4i32_v4i16
    0U,	// SUBHNv4i32_v8i16
    0U,	// SUBHNv8i16_v16i8
    0U,	// SUBHNv8i16_v8i8
    0U,	// SUBSWri
    0U,	// SUBSWrr
    0U,	// SUBSWrs
    0U,	// SUBSWrx
    0U,	// SUBSXri
    0U,	// SUBSXrr
    0U,	// SUBSXrs
    0U,	// SUBSXrx
    0U,	// SUBSXrx64
    0U,	// SUBWri
    0U,	// SUBWrr
    0U,	// SUBWrs
    0U,	// SUBWrx
    0U,	// SUBXri
    0U,	// SUBXrr
    0U,	// SUBXrs
    0U,	// SUBXrx
    0U,	// SUBXrx64
    0U,	// SUBv16i8
    0U,	// SUBv1i64
    0U,	// SUBv2i32
    0U,	// SUBv2i64
    0U,	// SUBv4i16
    0U,	// SUBv4i32
    0U,	// SUBv8i16
    0U,	// SUBv8i8
    0U,	// SUQADDv16i8
    0U,	// SUQADDv1i16
    0U,	// SUQADDv1i32
    0U,	// SUQADDv1i64
    0U,	// SUQADDv1i8
    0U,	// SUQADDv2i32
    0U,	// SUQADDv2i64
    0U,	// SUQADDv4i16
    0U,	// SUQADDv4i32
    0U,	// SUQADDv8i16
    0U,	// SUQADDv8i8
    0U,	// SVC
    0U,	// SWPAB
    0U,	// SWPAH
    0U,	// SWPALB
    0U,	// SWPALH
    0U,	// SWPALW
    0U,	// SWPALX
    0U,	// SWPAW
    0U,	// SWPAX
    0U,	// SWPB
    0U,	// SWPH
    0U,	// SWPLB
    0U,	// SWPLH
    0U,	// SWPLW
    0U,	// SWPLX
    0U,	// SWPW
    0U,	// SWPX
    0U,	// SYSLxt
    0U,	// SYSxt
    0U,	// TBLv16i8Four
    0U,	// TBLv16i8One
    0U,	// TBLv16i8Three
    0U,	// TBLv16i8Two
    0U,	// TBLv8i8Four
    0U,	// TBLv8i8One
    0U,	// TBLv8i8Three
    0U,	// TBLv8i8Two
    0U,	// TBNZW
    0U,	// TBNZX
    0U,	// TBXv16i8Four
    0U,	// TBXv16i8One
    0U,	// TBXv16i8Three
    0U,	// TBXv16i8Two
    0U,	// TBXv8i8Four
    0U,	// TBXv8i8One
    0U,	// TBXv8i8Three
    0U,	// TBXv8i8Two
    0U,	// TBZW
    0U,	// TBZX
    0U,	// TCRETURNdi
    0U,	// TCRETURNri
    0U,	// TLSDESCCALL
    0U,	// TLSDESC_CALLSEQ
    0U,	// TRN1v16i8
    0U,	// TRN1v2i32
    0U,	// TRN1v2i64
    0U,	// TRN1v4i16
    0U,	// TRN1v4i32
    0U,	// TRN1v8i16
    0U,	// TRN1v8i8
    0U,	// TRN2v16i8
    0U,	// TRN2v2i32
    0U,	// TRN2v2i64
    0U,	// TRN2v4i16
    0U,	// TRN2v4i32
    0U,	// TRN2v8i16
    0U,	// TRN2v8i8
    0U,	// UABALv16i8_v8i16
    0U,	// UABALv2i32_v2i64
    0U,	// UABALv4i16_v4i32
    0U,	// UABALv4i32_v2i64
    0U,	// UABALv8i16_v4i32
    0U,	// UABALv8i8_v8i16
    0U,	// UABAv16i8
    0U,	// UABAv2i32
    0U,	// UABAv4i16
    0U,	// UABAv4i32
    0U,	// UABAv8i16
    0U,	// UABAv8i8
    0U,	// UABDLv16i8_v8i16
    0U,	// UABDLv2i32_v2i64
    0U,	// UABDLv4i16_v4i32
    0U,	// UABDLv4i32_v2i64
    0U,	// UABDLv8i16_v4i32
    0U,	// UABDLv8i8_v8i16
    0U,	// UABDv16i8
    0U,	// UABDv2i32
    0U,	// UABDv4i16
    0U,	// UABDv4i32
    0U,	// UABDv8i16
    0U,	// UABDv8i8
    0U,	// UADALPv16i8_v8i16
    0U,	// UADALPv2i32_v1i64
    0U,	// UADALPv4i16_v2i32
    0U,	// UADALPv4i32_v2i64
    0U,	// UADALPv8i16_v4i32
    0U,	// UADALPv8i8_v4i16
    0U,	// UADDLPv16i8_v8i16
    0U,	// UADDLPv2i32_v1i64
    0U,	// UADDLPv4i16_v2i32
    0U,	// UADDLPv4i32_v2i64
    0U,	// UADDLPv8i16_v4i32
    0U,	// UADDLPv8i8_v4i16
    0U,	// UADDLVv16i8v
    0U,	// UADDLVv4i16v
    0U,	// UADDLVv4i32v
    0U,	// UADDLVv8i16v
    0U,	// UADDLVv8i8v
    0U,	// UADDLv16i8_v8i16
    0U,	// UADDLv2i32_v2i64
    0U,	// UADDLv4i16_v4i32
    0U,	// UADDLv4i32_v2i64
    0U,	// UADDLv8i16_v4i32
    0U,	// UADDLv8i8_v8i16
    0U,	// UADDWv16i8_v8i16
    0U,	// UADDWv2i32_v2i64
    0U,	// UADDWv4i16_v4i32
    0U,	// UADDWv4i32_v2i64
    0U,	// UADDWv8i16_v4i32
    0U,	// UADDWv8i8_v8i16
    0U,	// UBFMWri
    0U,	// UBFMXri
    0U,	// UCVTFSWDri
    0U,	// UCVTFSWHri
    0U,	// UCVTFSWSri
    0U,	// UCVTFSXDri
    0U,	// UCVTFSXHri
    0U,	// UCVTFSXSri
    0U,	// UCVTFUWDri
    0U,	// UCVTFUWHri
    0U,	// UCVTFUWSri
    0U,	// UCVTFUXDri
    0U,	// UCVTFUXHri
    0U,	// UCVTFUXSri
    0U,	// UCVTFd
    0U,	// UCVTFh
    0U,	// UCVTFs
    0U,	// UCVTFv1i16
    0U,	// UCVTFv1i32
    0U,	// UCVTFv1i64
    0U,	// UCVTFv2f32
    0U,	// UCVTFv2f64
    0U,	// UCVTFv2i32_shift
    0U,	// UCVTFv2i64_shift
    0U,	// UCVTFv4f16
    0U,	// UCVTFv4f32
    0U,	// UCVTFv4i16_shift
    0U,	// UCVTFv4i32_shift
    0U,	// UCVTFv8f16
    0U,	// UCVTFv8i16_shift
    0U,	// UDIVWr
    0U,	// UDIVXr
    0U,	// UDOT2S
    0U,	// UDOT4S
    0U,	// UDOTIDX2S
    0U,	// UDOTIDX4S
    0U,	// UHADDv16i8
    0U,	// UHADDv2i32
    0U,	// UHADDv4i16
    0U,	// UHADDv4i32
    0U,	// UHADDv8i16
    0U,	// UHADDv8i8
    0U,	// UHSUBv16i8
    0U,	// UHSUBv2i32
    0U,	// UHSUBv4i16
    0U,	// UHSUBv4i32
    0U,	// UHSUBv8i16
    0U,	// UHSUBv8i8
    0U,	// UMADDLrrr
    0U,	// UMAXPv16i8
    0U,	// UMAXPv2i32
    0U,	// UMAXPv4i16
    0U,	// UMAXPv4i32
    0U,	// UMAXPv8i16
    0U,	// UMAXPv8i8
    0U,	// UMAXVv16i8v
    0U,	// UMAXVv4i16v
    0U,	// UMAXVv4i32v
    0U,	// UMAXVv8i16v
    0U,	// UMAXVv8i8v
    0U,	// UMAXv16i8
    0U,	// UMAXv2i32
    0U,	// UMAXv4i16
    0U,	// UMAXv4i32
    0U,	// UMAXv8i16
    0U,	// UMAXv8i8
    0U,	// UMINPv16i8
    0U,	// UMINPv2i32
    0U,	// UMINPv4i16
    0U,	// UMINPv4i32
    0U,	// UMINPv8i16
    0U,	// UMINPv8i8
    0U,	// UMINVv16i8v
    0U,	// UMINVv4i16v
    0U,	// UMINVv4i32v
    0U,	// UMINVv8i16v
    0U,	// UMINVv8i8v
    0U,	// UMINv16i8
    0U,	// UMINv2i32
    0U,	// UMINv4i16
    0U,	// UMINv4i32
    0U,	// UMINv8i16
    0U,	// UMINv8i8
    0U,	// UMLALv16i8_v8i16
    0U,	// UMLALv2i32_indexed
    0U,	// UMLALv2i32_v2i64
    0U,	// UMLALv4i16_indexed
    0U,	// UMLALv4i16_v4i32
    0U,	// UMLALv4i32_indexed
    0U,	// UMLALv4i32_v2i64
    0U,	// UMLALv8i16_indexed
    0U,	// UMLALv8i16_v4i32
    0U,	// UMLALv8i8_v8i16
    0U,	// UMLSLv16i8_v8i16
    0U,	// UMLSLv2i32_indexed
    0U,	// UMLSLv2i32_v2i64
    0U,	// UMLSLv4i16_indexed
    0U,	// UMLSLv4i16_v4i32
    0U,	// UMLSLv4i32_indexed
    0U,	// UMLSLv4i32_v2i64
    0U,	// UMLSLv8i16_indexed
    0U,	// UMLSLv8i16_v4i32
    0U,	// UMLSLv8i8_v8i16
    0U,	// UMOVvi16
    0U,	// UMOVvi32
    0U,	// UMOVvi64
    0U,	// UMOVvi8
    0U,	// UMSUBLrrr
    0U,	// UMULHrr
    0U,	// UMULLv16i8_v8i16
    0U,	// UMULLv2i32_indexed
    0U,	// UMULLv2i32_v2i64
    0U,	// UMULLv4i16_indexed
    0U,	// UMULLv4i16_v4i32
    0U,	// UMULLv4i32_indexed
    0U,	// UMULLv4i32_v2i64
    0U,	// UMULLv8i16_indexed
    0U,	// UMULLv8i16_v4i32
    0U,	// UMULLv8i8_v8i16
    0U,	// UQADDv16i8
    0U,	// UQADDv1i16
    0U,	// UQADDv1i32
    0U,	// UQADDv1i64
    0U,	// UQADDv1i8
    0U,	// UQADDv2i32
    0U,	// UQADDv2i64
    0U,	// UQADDv4i16
    0U,	// UQADDv4i32
    0U,	// UQADDv8i16
    0U,	// UQADDv8i8
    0U,	// UQRSHLv16i8
    0U,	// UQRSHLv1i16
    0U,	// UQRSHLv1i32
    0U,	// UQRSHLv1i64
    0U,	// UQRSHLv1i8
    0U,	// UQRSHLv2i32
    0U,	// UQRSHLv2i64
    0U,	// UQRSHLv4i16
    0U,	// UQRSHLv4i32
    0U,	// UQRSHLv8i16
    0U,	// UQRSHLv8i8
    0U,	// UQRSHRNb
    0U,	// UQRSHRNh
    0U,	// UQRSHRNs
    0U,	// UQRSHRNv16i8_shift
    0U,	// UQRSHRNv2i32_shift
    0U,	// UQRSHRNv4i16_shift
    0U,	// UQRSHRNv4i32_shift
    0U,	// UQRSHRNv8i16_shift
    0U,	// UQRSHRNv8i8_shift
    0U,	// UQSHLb
    0U,	// UQSHLd
    0U,	// UQSHLh
    0U,	// UQSHLs
    0U,	// UQSHLv16i8
    0U,	// UQSHLv16i8_shift
    0U,	// UQSHLv1i16
    0U,	// UQSHLv1i32
    0U,	// UQSHLv1i64
    0U,	// UQSHLv1i8
    0U,	// UQSHLv2i32
    0U,	// UQSHLv2i32_shift
    0U,	// UQSHLv2i64
    0U,	// UQSHLv2i64_shift
    0U,	// UQSHLv4i16
    0U,	// UQSHLv4i16_shift
    0U,	// UQSHLv4i32
    0U,	// UQSHLv4i32_shift
    0U,	// UQSHLv8i16
    0U,	// UQSHLv8i16_shift
    0U,	// UQSHLv8i8
    0U,	// UQSHLv8i8_shift
    0U,	// UQSHRNb
    0U,	// UQSHRNh
    0U,	// UQSHRNs
    0U,	// UQSHRNv16i8_shift
    0U,	// UQSHRNv2i32_shift
    0U,	// UQSHRNv4i16_shift
    0U,	// UQSHRNv4i32_shift
    0U,	// UQSHRNv8i16_shift
    0U,	// UQSHRNv8i8_shift
    0U,	// UQSUBv16i8
    0U,	// UQSUBv1i16
    0U,	// UQSUBv1i32
    0U,	// UQSUBv1i64
    0U,	// UQSUBv1i8
    0U,	// UQSUBv2i32
    0U,	// UQSUBv2i64
    0U,	// UQSUBv4i16
    0U,	// UQSUBv4i32
    0U,	// UQSUBv8i16
    0U,	// UQSUBv8i8
    0U,	// UQXTNv16i8
    0U,	// UQXTNv1i16
    0U,	// UQXTNv1i32
    0U,	// UQXTNv1i8
    0U,	// UQXTNv2i32
    0U,	// UQXTNv4i16
    0U,	// UQXTNv4i32
    0U,	// UQXTNv8i16
    0U,	// UQXTNv8i8
    0U,	// URECPEv2i32
    0U,	// URECPEv4i32
    0U,	// URHADDv16i8
    0U,	// URHADDv2i32
    0U,	// URHADDv4i16
    0U,	// URHADDv4i32
    0U,	// URHADDv8i16
    0U,	// URHADDv8i8
    0U,	// URSHLv16i8
    0U,	// URSHLv1i64
    0U,	// URSHLv2i32
    0U,	// URSHLv2i64
    0U,	// URSHLv4i16
    0U,	// URSHLv4i32
    0U,	// URSHLv8i16
    0U,	// URSHLv8i8
    0U,	// URSHRd
    0U,	// URSHRv16i8_shift
    0U,	// URSHRv2i32_shift
    0U,	// URSHRv2i64_shift
    0U,	// URSHRv4i16_shift
    0U,	// URSHRv4i32_shift
    0U,	// URSHRv8i16_shift
    0U,	// URSHRv8i8_shift
    0U,	// URSQRTEv2i32
    0U,	// URSQRTEv4i32
    0U,	// URSRAd
    0U,	// URSRAv16i8_shift
    0U,	// URSRAv2i32_shift
    0U,	// URSRAv2i64_shift
    0U,	// URSRAv4i16_shift
    0U,	// URSRAv4i32_shift
    0U,	// URSRAv8i16_shift
    0U,	// URSRAv8i8_shift
    0U,	// USHLLv16i8_shift
    0U,	// USHLLv2i32_shift
    0U,	// USHLLv4i16_shift
    0U,	// USHLLv4i32_shift
    0U,	// USHLLv8i16_shift
    0U,	// USHLLv8i8_shift
    0U,	// USHLv16i8
    0U,	// USHLv1i64
    0U,	// USHLv2i32
    0U,	// USHLv2i64
    0U,	// USHLv4i16
    0U,	// USHLv4i32
    0U,	// USHLv8i16
    0U,	// USHLv8i8
    0U,	// USHRd
    0U,	// USHRv16i8_shift
    0U,	// USHRv2i32_shift
    0U,	// USHRv2i64_shift
    0U,	// USHRv4i16_shift
    0U,	// USHRv4i32_shift
    0U,	// USHRv8i16_shift
    0U,	// USHRv8i8_shift
    0U,	// USQADDv16i8
    0U,	// USQADDv1i16
    0U,	// USQADDv1i32
    0U,	// USQADDv1i64
    0U,	// USQADDv1i8
    0U,	// USQADDv2i32
    0U,	// USQADDv2i64
    0U,	// USQADDv4i16
    0U,	// USQADDv4i32
    0U,	// USQADDv8i16
    0U,	// USQADDv8i8
    0U,	// USRAd
    0U,	// USRAv16i8_shift
    0U,	// USRAv2i32_shift
    0U,	// USRAv2i64_shift
    0U,	// USRAv4i16_shift
    0U,	// USRAv4i32_shift
    0U,	// USRAv8i16_shift
    0U,	// USRAv8i8_shift
    0U,	// USUBLv16i8_v8i16
    0U,	// USUBLv2i32_v2i64
    0U,	// USUBLv4i16_v4i32
    0U,	// USUBLv4i32_v2i64
    0U,	// USUBLv8i16_v4i32
    0U,	// USUBLv8i8_v8i16
    0U,	// USUBWv16i8_v8i16
    0U,	// USUBWv2i32_v2i64
    0U,	// USUBWv4i16_v4i32
    0U,	// USUBWv4i32_v2i64
    0U,	// USUBWv8i16_v4i32
    0U,	// USUBWv8i8_v8i16
    0U,	// UZP1v16i8
    0U,	// UZP1v2i32
    0U,	// UZP1v2i64
    0U,	// UZP1v4i16
    0U,	// UZP1v4i32
    0U,	// UZP1v8i16
    0U,	// UZP1v8i8
    0U,	// UZP2v16i8
    0U,	// UZP2v2i32
    0U,	// UZP2v2i64
    0U,	// UZP2v4i16
    0U,	// UZP2v4i32
    0U,	// UZP2v8i16
    0U,	// UZP2v8i8
    0U,	// XPACD
    0U,	// XPACI
    0U,	// XPACLRI
    0U,	// XTNv16i8
    0U,	// XTNv2i32
    0U,	// XTNv4i16
    0U,	// XTNv4i32
    0U,	// XTNv8i16
    0U,	// XTNv8i8
    0U,	// ZIP1v16i8
    0U,	// ZIP1v2i32
    0U,	// ZIP1v2i64
    0U,	// ZIP1v4i16
    0U,	// ZIP1v4i32
    0U,	// ZIP1v8i16
    0U,	// ZIP1v8i8
    0U,	// ZIP2v16i8
    0U,	// ZIP2v2i32
    0U,	// ZIP2v2i64
    0U,	// ZIP2v4i16
    0U,	// ZIP2v4i32
    0U,	// ZIP2v8i16
    0U,	// ZIP2v8i8
  };

  O << "\t";

  // Emit the opcode for the instruction.
  uint64_t Bits = 0;
  Bits |= (uint64_t)OpInfo0[MI->getOpcode()] << 0;
  Bits |= (uint64_t)OpInfo1[MI->getOpcode()] << 32;
  Bits |= (uint64_t)OpInfo2[MI->getOpcode()] << 48;
  assert(Bits != 0 && "Cannot print this instruction.");
  O << AsmStrs+(Bits & 16383)-1;


  // Fragment 0 encoded into 6 bits for 43 unique commands.
  switch ((Bits >> 14) & 63) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // DBG_VALUE, BUNDLE, LIFETIME_START, LIFETIME_END, FENTRY_CALL, PATCHABL...
    return;
    break;
  case 1:
    // ABSv16i8, ABSv2i32, ABSv2i64, ABSv4i16, ABSv4i32, ABSv8i16, ABSv8i8, A...
    printVRegOperand(MI, 0, STI, O);
    break;
  case 2:
    // ABSv1i64, ADCSWr, ADCSXr, ADCWr, ADCXr, ADDPv2i64p, ADDSWri, ADDSWrs, ...
    printOperand(MI, 0, STI, O);
    break;
  case 3:
    // ADDHNv2i64_v4i32, ADDHNv4i32_v8i16, ADDHNv8i16_v16i8, AESDrr, AESErr, ...
    printVRegOperand(MI, 1, STI, O);
    break;
  case 4:
    // B, BL
    printAlignedLabel(MI, 0, STI, O);
    return;
    break;
  case 5:
    // BRK, DCPS1, DCPS2, DCPS3, HLT, HVC, SMC, SVC
    printImmHex(MI, 0, STI, O);
    return;
    break;
  case 6:
    // Bcc
    printCondCode(MI, 0, STI, O);
    O << "\t";
    printAlignedLabel(MI, 1, STI, O);
    return;
    break;
  case 7:
    // CASAB, CASAH, CASALB, CASALH, CASALW, CASALX, CASAW, CASAX, CASB, CASH...
    printOperand(MI, 1, STI, O);
    break;
  case 8:
    // CASPALW, CASPAW, CASPLW, CASPW
    printGPRSeqPairsClassOperand<32>(MI, 1, STI, O);
    O << ", ";
    printGPRSeqPairsClassOperand<32>(MI, 2, STI, O);
    O << ", [";
    printOperand(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 9:
    // CASPALX, CASPAX, CASPLX, CASPX
    printGPRSeqPairsClassOperand<64>(MI, 1, STI, O);
    O << ", ";
    printGPRSeqPairsClassOperand<64>(MI, 2, STI, O);
    O << ", [";
    printOperand(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 10:
    // DMB, DSB, ISB
    printBarrierOption(MI, 0, STI, O);
    return;
    break;
  case 11:
    // HINT
    printImm(MI, 0, STI, O);
    return;
    break;
  case 12:
    // LD1Fourv16b, LD1Onev16b, LD1Rv16b, LD1Threev16b, LD1Twov16b, LD2Rv16b,...
    printTypedVectorList<16, 'b'>(MI, 0, STI, O);
    O << ", [";
    printOperand(MI, 1, STI, O);
    O << ']';
    return;
    break;
  case 13:
    // LD1Fourv16b_POST, LD1Onev16b_POST, LD1Rv16b_POST, LD1Threev16b_POST, L...
    printTypedVectorList<16, 'b'>(MI, 1, STI, O);
    O << ", [";
    printOperand(MI, 2, STI, O);
    O << "], ";
    break;
  case 14:
    // LD1Fourv1d, LD1Onev1d, LD1Rv1d, LD1Threev1d, LD1Twov1d, LD2Rv1d, LD3Rv...
    printTypedVectorList<1, 'd'>(MI, 0, STI, O);
    O << ", [";
    printOperand(MI, 1, STI, O);
    O << ']';
    return;
    break;
  case 15:
    // LD1Fourv1d_POST, LD1Onev1d_POST, LD1Rv1d_POST, LD1Threev1d_POST, LD1Tw...
    printTypedVectorList<1, 'd'>(MI, 1, STI, O);
    O << ", [";
    printOperand(MI, 2, STI, O);
    O << "], ";
    break;
  case 16:
    // LD1Fourv2d, LD1Onev2d, LD1Rv2d, LD1Threev2d, LD1Twov2d, LD2Rv2d, LD2Tw...
    printTypedVectorList<2, 'd'>(MI, 0, STI, O);
    O << ", [";
    printOperand(MI, 1, STI, O);
    O << ']';
    return;
    break;
  case 17:
    // LD1Fourv2d_POST, LD1Onev2d_POST, LD1Rv2d_POST, LD1Threev2d_POST, LD1Tw...
    printTypedVectorList<2, 'd'>(MI, 1, STI, O);
    O << ", [";
    printOperand(MI, 2, STI, O);
    O << "], ";
    break;
  case 18:
    // LD1Fourv2s, LD1Onev2s, LD1Rv2s, LD1Threev2s, LD1Twov2s, LD2Rv2s, LD2Tw...
    printTypedVectorList<2, 's'>(MI, 0, STI, O);
    O << ", [";
    printOperand(MI, 1, STI, O);
    O << ']';
    return;
    break;
  case 19:
    // LD1Fourv2s_POST, LD1Onev2s_POST, LD1Rv2s_POST, LD1Threev2s_POST, LD1Tw...
    printTypedVectorList<2, 's'>(MI, 1, STI, O);
    O << ", [";
    printOperand(MI, 2, STI, O);
    O << "], ";
    break;
  case 20:
    // LD1Fourv4h, LD1Onev4h, LD1Rv4h, LD1Threev4h, LD1Twov4h, LD2Rv4h, LD2Tw...
    printTypedVectorList<4, 'h'>(MI, 0, STI, O);
    O << ", [";
    printOperand(MI, 1, STI, O);
    O << ']';
    return;
    break;
  case 21:
    // LD1Fourv4h_POST, LD1Onev4h_POST, LD1Rv4h_POST, LD1Threev4h_POST, LD1Tw...
    printTypedVectorList<4, 'h'>(MI, 1, STI, O);
    O << ", [";
    printOperand(MI, 2, STI, O);
    O << "], ";
    break;
  case 22:
    // LD1Fourv4s, LD1Onev4s, LD1Rv4s, LD1Threev4s, LD1Twov4s, LD2Rv4s, LD2Tw...
    printTypedVectorList<4, 's'>(MI, 0, STI, O);
    O << ", [";
    printOperand(MI, 1, STI, O);
    O << ']';
    return;
    break;
  case 23:
    // LD1Fourv4s_POST, LD1Onev4s_POST, LD1Rv4s_POST, LD1Threev4s_POST, LD1Tw...
    printTypedVectorList<4, 's'>(MI, 1, STI, O);
    O << ", [";
    printOperand(MI, 2, STI, O);
    O << "], ";
    break;
  case 24:
    // LD1Fourv8b, LD1Onev8b, LD1Rv8b, LD1Threev8b, LD1Twov8b, LD2Rv8b, LD2Tw...
    printTypedVectorList<8, 'b'>(MI, 0, STI, O);
    O << ", [";
    printOperand(MI, 1, STI, O);
    O << ']';
    return;
    break;
  case 25:
    // LD1Fourv8b_POST, LD1Onev8b_POST, LD1Rv8b_POST, LD1Threev8b_POST, LD1Tw...
    printTypedVectorList<8, 'b'>(MI, 1, STI, O);
    O << ", [";
    printOperand(MI, 2, STI, O);
    O << "], ";
    break;
  case 26:
    // LD1Fourv8h, LD1Onev8h, LD1Rv8h, LD1Threev8h, LD1Twov8h, LD2Rv8h, LD2Tw...
    printTypedVectorList<8, 'h'>(MI, 0, STI, O);
    O << ", [";
    printOperand(MI, 1, STI, O);
    O << ']';
    return;
    break;
  case 27:
    // LD1Fourv8h_POST, LD1Onev8h_POST, LD1Rv8h_POST, LD1Threev8h_POST, LD1Tw...
    printTypedVectorList<8, 'h'>(MI, 1, STI, O);
    O << ", [";
    printOperand(MI, 2, STI, O);
    O << "], ";
    break;
  case 28:
    // LD1i16, LD2i16, LD3i16, LD4i16, ST1i16_POST, ST2i16_POST, ST3i16_POST,...
    printTypedVectorList<0, 'h'>(MI, 1, STI, O);
    printVectorIndex(MI, 2, STI, O);
    O << ", [";
    printOperand(MI, 3, STI, O);
    break;
  case 29:
    // LD1i16_POST, LD2i16_POST, LD3i16_POST, LD4i16_POST
    printTypedVectorList<0, 'h'>(MI, 2, STI, O);
    printVectorIndex(MI, 3, STI, O);
    O << ", [";
    printOperand(MI, 4, STI, O);
    O << "], ";
    break;
  case 30:
    // LD1i32, LD2i32, LD3i32, LD4i32, ST1i32_POST, ST2i32_POST, ST3i32_POST,...
    printTypedVectorList<0, 's'>(MI, 1, STI, O);
    printVectorIndex(MI, 2, STI, O);
    O << ", [";
    printOperand(MI, 3, STI, O);
    break;
  case 31:
    // LD1i32_POST, LD2i32_POST, LD3i32_POST, LD4i32_POST
    printTypedVectorList<0, 's'>(MI, 2, STI, O);
    printVectorIndex(MI, 3, STI, O);
    O << ", [";
    printOperand(MI, 4, STI, O);
    O << "], ";
    break;
  case 32:
    // LD1i64, LD2i64, LD3i64, LD4i64, ST1i64_POST, ST2i64_POST, ST3i64_POST,...
    printTypedVectorList<0, 'd'>(MI, 1, STI, O);
    printVectorIndex(MI, 2, STI, O);
    O << ", [";
    printOperand(MI, 3, STI, O);
    break;
  case 33:
    // LD1i64_POST, LD2i64_POST, LD3i64_POST, LD4i64_POST
    printTypedVectorList<0, 'd'>(MI, 2, STI, O);
    printVectorIndex(MI, 3, STI, O);
    O << ", [";
    printOperand(MI, 4, STI, O);
    O << "], ";
    break;
  case 34:
    // LD1i8, LD2i8, LD3i8, LD4i8, ST1i8_POST, ST2i8_POST, ST3i8_POST, ST4i8_...
    printTypedVectorList<0, 'b'>(MI, 1, STI, O);
    printVectorIndex(MI, 2, STI, O);
    O << ", [";
    printOperand(MI, 3, STI, O);
    break;
  case 35:
    // LD1i8_POST, LD2i8_POST, LD3i8_POST, LD4i8_POST
    printTypedVectorList<0, 'b'>(MI, 2, STI, O);
    printVectorIndex(MI, 3, STI, O);
    O << ", [";
    printOperand(MI, 4, STI, O);
    O << "], ";
    break;
  case 36:
    // MSR
    printMSRSystemRegister(MI, 0, STI, O);
    O << ", ";
    printOperand(MI, 1, STI, O);
    return;
    break;
  case 37:
    // MSRpstateImm1, MSRpstateImm4
    printSystemPStateField(MI, 0, STI, O);
    O << ", ";
    printOperand(MI, 1, STI, O);
    return;
    break;
  case 38:
    // PRFMl, PRFMroW, PRFMroX, PRFMui, PRFUMi
    printPrefetchOp(MI, 0, STI, O);
    break;
  case 39:
    // ST1i16, ST2i16, ST3i16, ST4i16
    printTypedVectorList<0, 'h'>(MI, 0, STI, O);
    printVectorIndex(MI, 1, STI, O);
    O << ", [";
    printOperand(MI, 2, STI, O);
    O << ']';
    return;
    break;
  case 40:
    // ST1i32, ST2i32, ST3i32, ST4i32
    printTypedVectorList<0, 's'>(MI, 0, STI, O);
    printVectorIndex(MI, 1, STI, O);
    O << ", [";
    printOperand(MI, 2, STI, O);
    O << ']';
    return;
    break;
  case 41:
    // ST1i64, ST2i64, ST3i64, ST4i64
    printTypedVectorList<0, 'd'>(MI, 0, STI, O);
    printVectorIndex(MI, 1, STI, O);
    O << ", [";
    printOperand(MI, 2, STI, O);
    O << ']';
    return;
    break;
  case 42:
    // ST1i8, ST2i8, ST3i8, ST4i8
    printTypedVectorList<0, 'b'>(MI, 0, STI, O);
    printVectorIndex(MI, 1, STI, O);
    O << ", [";
    printOperand(MI, 2, STI, O);
    O << ']';
    return;
    break;
  }


  // Fragment 1 encoded into 6 bits for 36 unique commands.
  switch ((Bits >> 20) & 63) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // ABSv16i8, ABSv1i64, ABSv2i32, ABSv2i64, ABSv4i16, ABSv4i32, ABSv8i16, ...
    O << ", ";
    break;
  case 1:
    // AUTDZA, AUTDZB, AUTIZA, AUTIZB, BLR, BLRAAZ, BLRABZ, BR, BRAAZ, BRABZ,...
    return;
    break;
  case 2:
    // FCMPDri, FCMPEDri, FCMPEHri, FCMPESri, FCMPHri, FCMPSri
    O << ", #0.0";
    return;
    break;
  case 3:
    // FCVTLv2i32, FCVTLv4i32
    O << ".2d, ";
    printVRegOperand(MI, 1, STI, O);
    break;
  case 4:
    // FCVTLv4i16, FCVTLv8i16, FCVTNv4i32, FCVTXNv4f32
    O << ".4s, ";
    break;
  case 5:
    // FCVTNv2i32, FCVTXNv2f32
    O << ".2s, ";
    printVRegOperand(MI, 1, STI, O);
    O << ".2d";
    return;
    break;
  case 6:
    // FCVTNv4i16
    O << ".4h, ";
    printVRegOperand(MI, 1, STI, O);
    O << ".4s";
    return;
    break;
  case 7:
    // FCVTNv8i16
    O << ".8h, ";
    printVRegOperand(MI, 2, STI, O);
    O << ".4s";
    return;
    break;
  case 8:
    // FMOVXDHighr, INSvi16gpr, INSvi16lane, INSvi32gpr, INSvi32lane, INSvi64...
    printVectorIndex(MI, 2, STI, O);
    O << ", ";
    break;
  case 9:
    // LD1Fourv16b_POST, LD1Fourv2d_POST, LD1Fourv4s_POST, LD1Fourv8h_POST, L...
    printPostIncOperand<64>(MI, 3, STI, O);
    return;
    break;
  case 10:
    // LD1Fourv1d_POST, LD1Fourv2s_POST, LD1Fourv4h_POST, LD1Fourv8b_POST, LD...
    printPostIncOperand<32>(MI, 3, STI, O);
    return;
    break;
  case 11:
    // LD1Onev16b_POST, LD1Onev2d_POST, LD1Onev4s_POST, LD1Onev8h_POST, LD1Tw...
    printPostIncOperand<16>(MI, 3, STI, O);
    return;
    break;
  case 12:
    // LD1Onev1d_POST, LD1Onev2s_POST, LD1Onev4h_POST, LD1Onev8b_POST, LD1Rv1...
    printPostIncOperand<8>(MI, 3, STI, O);
    return;
    break;
  case 13:
    // LD1Rv16b_POST, LD1Rv8b_POST
    printPostIncOperand<1>(MI, 3, STI, O);
    return;
    break;
  case 14:
    // LD1Rv2s_POST, LD1Rv4s_POST, LD2Rv4h_POST, LD2Rv8h_POST, LD4Rv16b_POST,...
    printPostIncOperand<4>(MI, 3, STI, O);
    return;
    break;
  case 15:
    // LD1Rv4h_POST, LD1Rv8h_POST, LD2Rv16b_POST, LD2Rv8b_POST
    printPostIncOperand<2>(MI, 3, STI, O);
    return;
    break;
  case 16:
    // LD1Threev16b_POST, LD1Threev2d_POST, LD1Threev4s_POST, LD1Threev8h_POS...
    printPostIncOperand<48>(MI, 3, STI, O);
    return;
    break;
  case 17:
    // LD1Threev1d_POST, LD1Threev2s_POST, LD1Threev4h_POST, LD1Threev8b_POST...
    printPostIncOperand<24>(MI, 3, STI, O);
    return;
    break;
  case 18:
    // LD1i16, LD1i32, LD1i64, LD1i8, LD2i16, LD2i32, LD2i64, LD2i8, LD3i16, ...
    O << ']';
    return;
    break;
  case 19:
    // LD1i16_POST, LD2i8_POST
    printPostIncOperand<2>(MI, 5, STI, O);
    return;
    break;
  case 20:
    // LD1i32_POST, LD2i16_POST, LD4i8_POST
    printPostIncOperand<4>(MI, 5, STI, O);
    return;
    break;
  case 21:
    // LD1i64_POST, LD2i32_POST, LD4i16_POST
    printPostIncOperand<8>(MI, 5, STI, O);
    return;
    break;
  case 22:
    // LD1i8_POST
    printPostIncOperand<1>(MI, 5, STI, O);
    return;
    break;
  case 23:
    // LD2i64_POST, LD4i32_POST
    printPostIncOperand<16>(MI, 5, STI, O);
    return;
    break;
  case 24:
    // LD3Rv16b_POST, LD3Rv8b_POST
    printPostIncOperand<3>(MI, 3, STI, O);
    return;
    break;
  case 25:
    // LD3Rv2s_POST, LD3Rv4s_POST
    printPostIncOperand<12>(MI, 3, STI, O);
    return;
    break;
  case 26:
    // LD3Rv4h_POST, LD3Rv8h_POST
    printPostIncOperand<6>(MI, 3, STI, O);
    return;
    break;
  case 27:
    // LD3i16_POST
    printPostIncOperand<6>(MI, 5, STI, O);
    return;
    break;
  case 28:
    // LD3i32_POST
    printPostIncOperand<12>(MI, 5, STI, O);
    return;
    break;
  case 29:
    // LD3i64_POST
    printPostIncOperand<24>(MI, 5, STI, O);
    return;
    break;
  case 30:
    // LD3i8_POST
    printPostIncOperand<3>(MI, 5, STI, O);
    return;
    break;
  case 31:
    // LD4i64_POST
    printPostIncOperand<32>(MI, 5, STI, O);
    return;
    break;
  case 32:
    // LDAPRB, LDAPRH, LDAPRW, LDAPRX, LDARB, LDARH, LDARW, LDARX, LDAXRB, LD...
    O << ", [";
    break;
  case 33:
    // ST1i16_POST, ST1i32_POST, ST1i64_POST, ST1i8_POST, ST2i16_POST, ST2i32...
    O << "], ";
    break;
  case 34:
    // TBLv16i8Four, TBLv16i8One, TBLv16i8Three, TBLv16i8Two, TBXv16i8Four, T...
    O << ".16b, ";
    break;
  case 35:
    // TBLv8i8Four, TBLv8i8One, TBLv8i8Three, TBLv8i8Two, TBXv8i8Four, TBXv8i...
    O << ".8b, ";
    break;
  }


  // Fragment 2 encoded into 5 bits for 29 unique commands.
  switch ((Bits >> 26) & 31) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // ABSv16i8, ABSv2i32, ABSv2i64, ABSv4i16, ABSv4i32, ABSv8i16, ABSv8i8, A...
    printVRegOperand(MI, 1, STI, O);
    break;
  case 1:
    // ABSv1i64, ADCSWr, ADCSXr, ADCWr, ADCXr, ADDSWri, ADDSWrs, ADDSWrx, ADD...
    printOperand(MI, 1, STI, O);
    break;
  case 2:
    // ADDHNv2i64_v4i32, ADDHNv4i32_v8i16, ADDHNv8i16_v16i8, AESDrr, AESErr, ...
    printVRegOperand(MI, 2, STI, O);
    break;
  case 3:
    // ADRP
    printAdrpLabel(MI, 1, STI, O);
    return;
    break;
  case 4:
    // BFMWri, BFMXri, CASAB, CASAH, CASALB, CASALH, CASALW, CASALX, CASAW, C...
    printOperand(MI, 2, STI, O);
    break;
  case 5:
    // BICv2i32, BICv4i16, BICv4i32, BICv8i16, MOVKWi, MOVKXi, ORRv2i32, ORRv...
    printImm(MI, 2, STI, O);
    printShifter(MI, 3, STI, O);
    return;
    break;
  case 6:
    // CBNZW, CBNZX, CBZW, CBZX, LDRDl, LDRQl, LDRSWl, LDRSl, LDRWl, LDRXl, P...
    printAlignedLabel(MI, 1, STI, O);
    return;
    break;
  case 7:
    // FCVTLv2i32
    O << ".2s";
    return;
    break;
  case 8:
    // FCVTLv4i32
    O << ".4s";
    return;
    break;
  case 9:
    // FMOVDi, FMOVHi, FMOVSi, FMOVv2f32_ns, FMOVv2f64_ns, FMOVv4f16_ns, FMOV...
    printFPImmOperand(MI, 1, STI, O);
    return;
    break;
  case 10:
    // INSvi16gpr, INSvi32gpr, INSvi64gpr, INSvi8gpr
    printOperand(MI, 3, STI, O);
    return;
    break;
  case 11:
    // INSvi16lane, INSvi32lane, INSvi64lane, INSvi8lane
    printVRegOperand(MI, 3, STI, O);
    printVectorIndex(MI, 4, STI, O);
    return;
    break;
  case 12:
    // LDADDAB, LDADDAH, LDADDALB, LDADDALH, LDADDALW, LDADDALX, LDADDAW, LDA...
    printOperand(MI, 0, STI, O);
    O << ", [";
    printOperand(MI, 2, STI, O);
    O << ']';
    return;
    break;
  case 13:
    // MOVID, MOVIv2d_ns
    printSIMDType10Operand(MI, 1, STI, O);
    return;
    break;
  case 14:
    // MOVIv16b_ns, MOVIv2i32, MOVIv2s_msl, MOVIv4i16, MOVIv4i32, MOVIv4s_msl...
    printImm(MI, 1, STI, O);
    break;
  case 15:
    // MRS
    printMRSSystemRegister(MI, 1, STI, O);
    return;
    break;
  case 16:
    // ST1i16_POST, ST2i8_POST
    printPostIncOperand<2>(MI, 4, STI, O);
    return;
    break;
  case 17:
    // ST1i32_POST, ST2i16_POST, ST4i8_POST
    printPostIncOperand<4>(MI, 4, STI, O);
    return;
    break;
  case 18:
    // ST1i64_POST, ST2i32_POST, ST4i16_POST
    printPostIncOperand<8>(MI, 4, STI, O);
    return;
    break;
  case 19:
    // ST1i8_POST
    printPostIncOperand<1>(MI, 4, STI, O);
    return;
    break;
  case 20:
    // ST2i64_POST, ST4i32_POST
    printPostIncOperand<16>(MI, 4, STI, O);
    return;
    break;
  case 21:
    // ST3i16_POST
    printPostIncOperand<6>(MI, 4, STI, O);
    return;
    break;
  case 22:
    // ST3i32_POST
    printPostIncOperand<12>(MI, 4, STI, O);
    return;
    break;
  case 23:
    // ST3i64_POST
    printPostIncOperand<24>(MI, 4, STI, O);
    return;
    break;
  case 24:
    // ST3i8_POST
    printPostIncOperand<3>(MI, 4, STI, O);
    return;
    break;
  case 25:
    // ST4i64_POST
    printPostIncOperand<32>(MI, 4, STI, O);
    return;
    break;
  case 26:
    // SYSxt
    printSysCROperand(MI, 1, STI, O);
    O << ", ";
    printSysCROperand(MI, 2, STI, O);
    O << ", ";
    printOperand(MI, 3, STI, O);
    O << ", ";
    printOperand(MI, 4, STI, O);
    return;
    break;
  case 27:
    // TBLv16i8Four, TBLv16i8One, TBLv16i8Three, TBLv16i8Two, TBLv8i8Four, TB...
    printTypedVectorList<16, 'b'>(MI, 1, STI, O);
    O << ", ";
    printVRegOperand(MI, 2, STI, O);
    break;
  case 28:
    // TBXv16i8Four, TBXv16i8One, TBXv16i8Three, TBXv16i8Two, TBXv8i8Four, TB...
    printTypedVectorList<16, 'b'>(MI, 2, STI, O);
    O << ", ";
    printVRegOperand(MI, 3, STI, O);
    break;
  }


  // Fragment 3 encoded into 5 bits for 17 unique commands.
  switch ((Bits >> 31) & 31) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // ABSv16i8, ABSv1i64, ABSv2i32, ABSv2i64, ABSv4i16, ABSv4i32, ABSv8i16, ...
    return;
    break;
  case 1:
    // ADCSWr, ADCSXr, ADCWr, ADCXr, ADDHNv2i64_v2i32, ADDHNv2i64_v4i32, ADDH...
    O << ", ";
    break;
  case 2:
    // CASAB, CASAH, CASALB, CASALH, CASALW, CASALX, CASAW, CASAX, CASB, CASH...
    O << ", [";
    break;
  case 3:
    // CMEQv16i8rz, CMEQv1i64rz, CMEQv2i32rz, CMEQv2i64rz, CMEQv4i16rz, CMEQv...
    O << ", #0";
    return;
    break;
  case 4:
    // CPYi16, CPYi32, CPYi64, CPYi8, DUPv16i8lane, DUPv2i32lane, DUPv2i64lan...
    printVectorIndex(MI, 2, STI, O);
    return;
    break;
  case 5:
    // FCMEQv1i16rz, FCMEQv1i32rz, FCMEQv1i64rz, FCMEQv2i32rz, FCMEQv2i64rz, ...
    O << ", #0.0";
    return;
    break;
  case 6:
    // FCVTLv4i16
    O << ".4h";
    return;
    break;
  case 7:
    // FCVTLv8i16
    O << ".8h";
    return;
    break;
  case 8:
    // FCVTNv4i32, FCVTXNv4f32
    O << ".2d";
    return;
    break;
  case 9:
    // LDAPRB, LDAPRH, LDAPRW, LDAPRX, LDARB, LDARH, LDARW, LDARX, LDAXRB, LD...
    O << ']';
    return;
    break;
  case 10:
    // LDRBBpost, LDRBpost, LDRDpost, LDRHHpost, LDRHpost, LDRQpost, LDRSBWpo...
    O << "], ";
    printOperand(MI, 3, STI, O);
    return;
    break;
  case 11:
    // MOVIv2i32, MOVIv2s_msl, MOVIv4i16, MOVIv4i32, MOVIv4s_msl, MOVIv8i16, ...
    printShifter(MI, 2, STI, O);
    return;
    break;
  case 12:
    // SHLLv16i8, SHLLv8i8
    O << ", #8";
    return;
    break;
  case 13:
    // SHLLv2i32, SHLLv4i32
    O << ", #32";
    return;
    break;
  case 14:
    // SHLLv4i16, SHLLv8i16
    O << ", #16";
    return;
    break;
  case 15:
    // TBLv16i8Four, TBLv16i8One, TBLv16i8Three, TBLv16i8Two, TBXv16i8Four, T...
    O << ".16b";
    return;
    break;
  case 16:
    // TBLv8i8Four, TBLv8i8One, TBLv8i8Three, TBLv8i8Two, TBXv8i8Four, TBXv8i...
    O << ".8b";
    return;
    break;
  }


  // Fragment 4 encoded into 5 bits for 18 unique commands.
  switch ((Bits >> 36) & 31) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // ADCSWr, ADCSXr, ADCWr, ADCXr, ADDSXrx64, ADDXrx64, ADDv1i64, ASRVWr, A...
    printOperand(MI, 2, STI, O);
    break;
  case 1:
    // ADDHNv2i64_v2i32, ADDHNv4i32_v4i16, ADDHNv8i16_v8i8, ADDPv16i8, ADDPv2...
    printVRegOperand(MI, 2, STI, O);
    break;
  case 2:
    // ADDHNv2i64_v4i32, ADDHNv4i32_v8i16, ADDHNv8i16_v16i8, BITv16i8, BITv8i...
    printVRegOperand(MI, 3, STI, O);
    break;
  case 3:
    // ADDSWri, ADDSXri, ADDWri, ADDXri, SUBSWri, SUBSXri, SUBWri, SUBXri
    printAddSubImm(MI, 2, STI, O);
    return;
    break;
  case 4:
    // ADDSWrs, ADDSXrs, ADDWrs, ADDXrs, ANDSWrs, ANDSXrs, ANDWrs, ANDXrs, BI...
    printShiftedRegister(MI, 2, STI, O);
    return;
    break;
  case 5:
    // ADDSWrx, ADDSXrx, ADDWrx, ADDXrx, SUBSWrx, SUBSXrx, SUBWrx, SUBXrx
    printExtendedRegister(MI, 2, STI, O);
    return;
    break;
  case 6:
    // ANDSWri, ANDWri, EORWri, ORRWri
    printLogicalImm32(MI, 2, STI, O);
    return;
    break;
  case 7:
    // ANDSXri, ANDXri, EORXri, ORRXri
    printLogicalImm64(MI, 2, STI, O);
    return;
    break;
  case 8:
    // BFMWri, BFMXri, CASAB, CASAH, CASALB, CASALH, CASALW, CASALX, CASAW, C...
    printOperand(MI, 3, STI, O);
    break;
  case 9:
    // LDRAAindexed, LDRABindexed
    printImmScale<8>(MI, 2, STI, O);
    O << ']';
    return;
    break;
  case 10:
    // LDRAAwriteback, LDRABwriteback
    printImmScale<8>(MI, 3, STI, O);
    O << "]!";
    return;
    break;
  case 11:
    // LDRBBui, LDRBui, LDRSBWui, LDRSBXui, STRBBui, STRBui
    printUImm12Offset<1>(MI, 2, STI, O);
    O << ']';
    return;
    break;
  case 12:
    // LDRDui, LDRXui, PRFMui, STRDui, STRXui
    printUImm12Offset<8>(MI, 2, STI, O);
    O << ']';
    return;
    break;
  case 13:
    // LDRHHui, LDRHui, LDRSHWui, LDRSHXui, STRHHui, STRHui
    printUImm12Offset<2>(MI, 2, STI, O);
    O << ']';
    return;
    break;
  case 14:
    // LDRQui, STRQui
    printUImm12Offset<16>(MI, 2, STI, O);
    O << ']';
    return;
    break;
  case 15:
    // LDRSWui, LDRSui, LDRWui, STRSui, STRWui
    printUImm12Offset<4>(MI, 2, STI, O);
    O << ']';
    return;
    break;
  case 16:
    // SYSLxt
    printSysCROperand(MI, 2, STI, O);
    O << ", ";
    printSysCROperand(MI, 3, STI, O);
    O << ", ";
    printOperand(MI, 4, STI, O);
    return;
    break;
  case 17:
    // TBNZW, TBNZX, TBZW, TBZX
    printAlignedLabel(MI, 2, STI, O);
    return;
    break;
  }


  // Fragment 5 encoded into 4 bits for 9 unique commands.
  switch ((Bits >> 41) & 15) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // ADCSWr, ADCSXr, ADCWr, ADCXr, ADDHNv2i64_v2i32, ADDHNv2i64_v4i32, ADDH...
    return;
    break;
  case 1:
    // ADDSXrx64, ADDXrx64, SUBSXrx64, SUBXrx64
    printArithExtend(MI, 3, STI, O);
    return;
    break;
  case 2:
    // BFMWri, BFMXri, CCMNWi, CCMNWr, CCMNXi, CCMNXr, CCMPWi, CCMPWr, CCMPXi...
    O << ", ";
    break;
  case 3:
    // CASAB, CASAH, CASALB, CASALH, CASALW, CASALX, CASAW, CASAX, CASB, CASH...
    O << ']';
    return;
    break;
  case 4:
    // FMLAv1i16_indexed, FMLAv1i32_indexed, FMLAv1i64_indexed, FMLAv2i32_ind...
    printVectorIndex(MI, 4, STI, O);
    return;
    break;
  case 5:
    // FMULXv1i16_indexed, FMULXv1i32_indexed, FMULXv1i64_indexed, FMULXv2i32...
    printVectorIndex(MI, 3, STI, O);
    return;
    break;
  case 6:
    // LDPDpost, LDPQpost, LDPSWpost, LDPSpost, LDPWpost, LDPXpost, STPDpost,...
    O << "], ";
    break;
  case 7:
    // LDRBBpre, LDRBpre, LDRDpre, LDRHHpre, LDRHpre, LDRQpre, LDRSBWpre, LDR...
    O << "]!";
    return;
    break;
  case 8:
    // STLXPW, STLXPX, STXPW, STXPX
    O << ", [";
    printOperand(MI, 3, STI, O);
    O << ']';
    return;
    break;
  }


  // Fragment 6 encoded into 5 bits for 19 unique commands.
  switch ((Bits >> 45) & 31) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // BFMWri, BFMXri
    printOperand(MI, 4, STI, O);
    return;
    break;
  case 1:
    // CCMNWi, CCMNWr, CCMNXi, CCMNXr, CCMPWi, CCMPWr, CCMPXi, CCMPXr, CSELWr...
    printCondCode(MI, 3, STI, O);
    return;
    break;
  case 2:
    // EXTRWrri, EXTRXrri, EXTv16i8, EXTv8i8, FMADDDrrr, FMADDHrrr, FMADDSrrr...
    printOperand(MI, 3, STI, O);
    return;
    break;
  case 3:
    // LDNPDi, LDNPXi, LDPDi, LDPXi, STNPDi, STNPXi, STPDi, STPXi
    printImmScale<8>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 4:
    // LDNPQi, LDPQi, STNPQi, STPQi
    printImmScale<16>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 5:
    // LDNPSi, LDNPWi, LDPSWi, LDPSi, LDPWi, STNPSi, STNPWi, STPSi, STPWi
    printImmScale<4>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 6:
    // LDPDpost, LDPDpre, LDPXpost, LDPXpre, STPDpost, STPDpre, STPXpost, STP...
    printImmScale<8>(MI, 4, STI, O);
    break;
  case 7:
    // LDPQpost, LDPQpre, STPQpost, STPQpre
    printImmScale<16>(MI, 4, STI, O);
    break;
  case 8:
    // LDPSWpost, LDPSWpre, LDPSpost, LDPSpre, LDPWpost, LDPWpre, STPSpost, S...
    printImmScale<4>(MI, 4, STI, O);
    break;
  case 9:
    // LDRBBroW, LDRBroW, LDRSBWroW, LDRSBXroW, STRBBroW, STRBroW
    printMemExtend<'w', 8>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 10:
    // LDRBBroX, LDRBroX, LDRSBWroX, LDRSBXroX, STRBBroX, STRBroX
    printMemExtend<'x', 8>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 11:
    // LDRDroW, LDRXroW, PRFMroW, STRDroW, STRXroW
    printMemExtend<'w', 64>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 12:
    // LDRDroX, LDRXroX, PRFMroX, STRDroX, STRXroX
    printMemExtend<'x', 64>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 13:
    // LDRHHroW, LDRHroW, LDRSHWroW, LDRSHXroW, STRHHroW, STRHroW
    printMemExtend<'w', 16>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 14:
    // LDRHHroX, LDRHroX, LDRSHWroX, LDRSHXroX, STRHHroX, STRHroX
    printMemExtend<'x', 16>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 15:
    // LDRQroW, STRQroW
    printMemExtend<'w', 128>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 16:
    // LDRQroX, STRQroX
    printMemExtend<'x', 128>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 17:
    // LDRSWroW, LDRSroW, LDRWroW, STRSroW, STRWroW
    printMemExtend<'w', 32>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 18:
    // LDRSWroX, LDRSroX, LDRWroX, STRSroX, STRWroX
    printMemExtend<'x', 32>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  }


  // Fragment 7 encoded into 1 bits for 2 unique commands.
  if ((Bits >> 50) & 1) {
    // LDPDpre, LDPQpre, LDPSWpre, LDPSpre, LDPWpre, LDPXpre, STPDpre, STPQpr...
    O << "]!";
    return;
  } else {
    // LDPDpost, LDPQpost, LDPSWpost, LDPSpost, LDPWpost, LDPXpost, STPDpost,...
    return;
  }

}


/// getRegisterName - This method is automatically generated by tblgen
/// from the register set description.  This returns the assembler name
/// for the specified register.
const char *AArch64AppleInstPrinter::
getRegisterName(unsigned RegNo, unsigned AltIdx) {
  assert(RegNo && RegNo < 484 && "Invalid register number!");

  static const char AsmStrsNoRegAltName[] = {
  /* 0 */ 'D', '7', '_', 'D', '8', '_', 'D', '9', '_', 'D', '1', '0', 0,
  /* 13 */ 'Q', '7', '_', 'Q', '8', '_', 'Q', '9', '_', 'Q', '1', '0', 0,
  /* 26 */ 'W', '9', '_', 'W', '1', '0', 0,
  /* 33 */ 'X', '9', '_', 'X', '1', '0', 0,
  /* 40 */ 'b', '1', '0', 0,
  /* 44 */ 'd', '1', '0', 0,
  /* 48 */ 'h', '1', '0', 0,
  /* 52 */ 'q', '1', '0', 0,
  /* 56 */ 's', '1', '0', 0,
  /* 60 */ 'w', '1', '0', 0,
  /* 64 */ 'x', '1', '0', 0,
  /* 68 */ 'D', '1', '7', '_', 'D', '1', '8', '_', 'D', '1', '9', '_', 'D', '2', '0', 0,
  /* 84 */ 'Q', '1', '7', '_', 'Q', '1', '8', '_', 'Q', '1', '9', '_', 'Q', '2', '0', 0,
  /* 100 */ 'W', '1', '9', '_', 'W', '2', '0', 0,
  /* 108 */ 'X', '1', '9', '_', 'X', '2', '0', 0,
  /* 116 */ 'b', '2', '0', 0,
  /* 120 */ 'd', '2', '0', 0,
  /* 124 */ 'h', '2', '0', 0,
  /* 128 */ 'q', '2', '0', 0,
  /* 132 */ 's', '2', '0', 0,
  /* 136 */ 'w', '2', '0', 0,
  /* 140 */ 'x', '2', '0', 0,
  /* 144 */ 'D', '2', '7', '_', 'D', '2', '8', '_', 'D', '2', '9', '_', 'D', '3', '0', 0,
  /* 160 */ 'Q', '2', '7', '_', 'Q', '2', '8', '_', 'Q', '2', '9', '_', 'Q', '3', '0', 0,
  /* 176 */ 'W', '2', '9', '_', 'W', '3', '0', 0,
  /* 184 */ 'b', '3', '0', 0,
  /* 188 */ 'd', '3', '0', 0,
  /* 192 */ 'h', '3', '0', 0,
  /* 196 */ 'q', '3', '0', 0,
  /* 200 */ 's', '3', '0', 0,
  /* 204 */ 'w', '3', '0', 0,
  /* 208 */ 'x', '3', '0', 0,
  /* 212 */ 'D', '2', '9', '_', 'D', '3', '0', '_', 'D', '3', '1', '_', 'D', '0', 0,
  /* 227 */ 'Q', '2', '9', '_', 'Q', '3', '0', '_', 'Q', '3', '1', '_', 'Q', '0', 0,
  /* 242 */ 'W', 'Z', 'R', '_', 'W', '0', 0,
  /* 249 */ 'X', 'Z', 'R', '_', 'X', '0', 0,
  /* 256 */ 'b', '0', 0,
  /* 259 */ 'd', '0', 0,
  /* 262 */ 'h', '0', 0,
  /* 265 */ 'q', '0', 0,
  /* 268 */ 's', '0', 0,
  /* 271 */ 'w', '0', 0,
  /* 274 */ 'x', '0', 0,
  /* 277 */ 'D', '8', '_', 'D', '9', '_', 'D', '1', '0', '_', 'D', '1', '1', 0,
  /* 291 */ 'Q', '8', '_', 'Q', '9', '_', 'Q', '1', '0', '_', 'Q', '1', '1', 0,
  /* 305 */ 'W', '1', '0', '_', 'W', '1', '1', 0,
  /* 313 */ 'X', '1', '0', '_', 'X', '1', '1', 0,
  /* 321 */ 'b', '1', '1', 0,
  /* 325 */ 'd', '1', '1', 0,
  /* 329 */ 'h', '1', '1', 0,
  /* 333 */ 'q', '1', '1', 0,
  /* 337 */ 's', '1', '1', 0,
  /* 341 */ 'w', '1', '1', 0,
  /* 345 */ 'x', '1', '1', 0,
  /* 349 */ 'D', '1', '8', '_', 'D', '1', '9', '_', 'D', '2', '0', '_', 'D', '2', '1', 0,
  /* 365 */ 'Q', '1', '8', '_', 'Q', '1', '9', '_', 'Q', '2', '0', '_', 'Q', '2', '1', 0,
  /* 381 */ 'W', '2', '0', '_', 'W', '2', '1', 0,
  /* 389 */ 'X', '2', '0', '_', 'X', '2', '1', 0,
  /* 397 */ 'b', '2', '1', 0,
  /* 401 */ 'd', '2', '1', 0,
  /* 405 */ 'h', '2', '1', 0,
  /* 409 */ 'q', '2', '1', 0,
  /* 413 */ 's', '2', '1', 0,
  /* 417 */ 'w', '2', '1', 0,
  /* 421 */ 'x', '2', '1', 0,
  /* 425 */ 'D', '2', '8', '_', 'D', '2', '9', '_', 'D', '3', '0', '_', 'D', '3', '1', 0,
  /* 441 */ 'Q', '2', '8', '_', 'Q', '2', '9', '_', 'Q', '3', '0', '_', 'Q', '3', '1', 0,
  /* 457 */ 'b', '3', '1', 0,
  /* 461 */ 'd', '3', '1', 0,
  /* 465 */ 'h', '3', '1', 0,
  /* 469 */ 'q', '3', '1', 0,
  /* 473 */ 's', '3', '1', 0,
  /* 477 */ 'D', '3', '0', '_', 'D', '3', '1', '_', 'D', '0', '_', 'D', '1', 0,
  /* 491 */ 'Q', '3', '0', '_', 'Q', '3', '1', '_', 'Q', '0', '_', 'Q', '1', 0,
  /* 505 */ 'W', '0', '_', 'W', '1', 0,
  /* 511 */ 'X', '0', '_', 'X', '1', 0,
  /* 517 */ 'b', '1', 0,
  /* 520 */ 'd', '1', 0,
  /* 523 */ 'h', '1', 0,
  /* 526 */ 'q', '1', 0,
  /* 529 */ 's', '1', 0,
  /* 532 */ 'w', '1', 0,
  /* 535 */ 'x', '1', 0,
  /* 538 */ 'D', '9', '_', 'D', '1', '0', '_', 'D', '1', '1', '_', 'D', '1', '2', 0,
  /* 553 */ 'Q', '9', '_', 'Q', '1', '0', '_', 'Q', '1', '1', '_', 'Q', '1', '2', 0,
  /* 568 */ 'W', '1', '1', '_', 'W', '1', '2', 0,
  /* 576 */ 'X', '1', '1', '_', 'X', '1', '2', 0,
  /* 584 */ 'b', '1', '2', 0,
  /* 588 */ 'd', '1', '2', 0,
  /* 592 */ 'h', '1', '2', 0,
  /* 596 */ 'q', '1', '2', 0,
  /* 600 */ 's', '1', '2', 0,
  /* 604 */ 'w', '1', '2', 0,
  /* 608 */ 'x', '1', '2', 0,
  /* 612 */ 'D', '1', '9', '_', 'D', '2', '0', '_', 'D', '2', '1', '_', 'D', '2', '2', 0,
  /* 628 */ 'Q', '1', '9', '_', 'Q', '2', '0', '_', 'Q', '2', '1', '_', 'Q', '2', '2', 0,
  /* 644 */ 'W', '2', '1', '_', 'W', '2', '2', 0,
  /* 652 */ 'X', '2', '1', '_', 'X', '2', '2', 0,
  /* 660 */ 'b', '2', '2', 0,
  /* 664 */ 'd', '2', '2', 0,
  /* 668 */ 'h', '2', '2', 0,
  /* 672 */ 'q', '2', '2', 0,
  /* 676 */ 's', '2', '2', 0,
  /* 680 */ 'w', '2', '2', 0,
  /* 684 */ 'x', '2', '2', 0,
  /* 688 */ 'D', '3', '1', '_', 'D', '0', '_', 'D', '1', '_', 'D', '2', 0,
  /* 701 */ 'Q', '3', '1', '_', 'Q', '0', '_', 'Q', '1', '_', 'Q', '2', 0,
  /* 714 */ 'W', '1', '_', 'W', '2', 0,
  /* 720 */ 'X', '1', '_', 'X', '2', 0,
  /* 726 */ 'b', '2', 0,
  /* 729 */ 'd', '2', 0,
  /* 732 */ 'h', '2', 0,
  /* 735 */ 'q', '2', 0,
  /* 738 */ 's', '2', 0,
  /* 741 */ 'w', '2', 0,
  /* 744 */ 'x', '2', 0,
  /* 747 */ 'D', '1', '0', '_', 'D', '1', '1', '_', 'D', '1', '2', '_', 'D', '1', '3', 0,
  /* 763 */ 'Q', '1', '0', '_', 'Q', '1', '1', '_', 'Q', '1', '2', '_', 'Q', '1', '3', 0,
  /* 779 */ 'W', '1', '2', '_', 'W', '1', '3', 0,
  /* 787 */ 'X', '1', '2', '_', 'X', '1', '3', 0,
  /* 795 */ 'b', '1', '3', 0,
  /* 799 */ 'd', '1', '3', 0,
  /* 803 */ 'h', '1', '3', 0,
  /* 807 */ 'q', '1', '3', 0,
  /* 811 */ 's', '1', '3', 0,
  /* 815 */ 'w', '1', '3', 0,
  /* 819 */ 'x', '1', '3', 0,
  /* 823 */ 'D', '2', '0', '_', 'D', '2', '1', '_', 'D', '2', '2', '_', 'D', '2', '3', 0,
  /* 839 */ 'Q', '2', '0', '_', 'Q', '2', '1', '_', 'Q', '2', '2', '_', 'Q', '2', '3', 0,
  /* 855 */ 'W', '2', '2', '_', 'W', '2', '3', 0,
  /* 863 */ 'X', '2', '2', '_', 'X', '2', '3', 0,
  /* 871 */ 'b', '2', '3', 0,
  /* 875 */ 'd', '2', '3', 0,
  /* 879 */ 'h', '2', '3', 0,
  /* 883 */ 'q', '2', '3', 0,
  /* 887 */ 's', '2', '3', 0,
  /* 891 */ 'w', '2', '3', 0,
  /* 895 */ 'x', '2', '3', 0,
  /* 899 */ 'D', '0', '_', 'D', '1', '_', 'D', '2', '_', 'D', '3', 0,
  /* 911 */ 'Q', '0', '_', 'Q', '1', '_', 'Q', '2', '_', 'Q', '3', 0,
  /* 923 */ 'W', '2', '_', 'W', '3', 0,
  /* 929 */ 'X', '2', '_', 'X', '3', 0,
  /* 935 */ 'b', '3', 0,
  /* 938 */ 'd', '3', 0,
  /* 941 */ 'h', '3', 0,
  /* 944 */ 'q', '3', 0,
  /* 947 */ 's', '3', 0,
  /* 950 */ 'w', '3', 0,
  /* 953 */ 'x', '3', 0,
  /* 956 */ 'D', '1', '1', '_', 'D', '1', '2', '_', 'D', '1', '3', '_', 'D', '1', '4', 0,
  /* 972 */ 'Q', '1', '1', '_', 'Q', '1', '2', '_', 'Q', '1', '3', '_', 'Q', '1', '4', 0,
  /* 988 */ 'W', '1', '3', '_', 'W', '1', '4', 0,
  /* 996 */ 'X', '1', '3', '_', 'X', '1', '4', 0,
  /* 1004 */ 'b', '1', '4', 0,
  /* 1008 */ 'd', '1', '4', 0,
  /* 1012 */ 'h', '1', '4', 0,
  /* 1016 */ 'q', '1', '4', 0,
  /* 1020 */ 's', '1', '4', 0,
  /* 1024 */ 'w', '1', '4', 0,
  /* 1028 */ 'x', '1', '4', 0,
  /* 1032 */ 'D', '2', '1', '_', 'D', '2', '2', '_', 'D', '2', '3', '_', 'D', '2', '4', 0,
  /* 1048 */ 'Q', '2', '1', '_', 'Q', '2', '2', '_', 'Q', '2', '3', '_', 'Q', '2', '4', 0,
  /* 1064 */ 'W', '2', '3', '_', 'W', '2', '4', 0,
  /* 1072 */ 'X', '2', '3', '_', 'X', '2', '4', 0,
  /* 1080 */ 'b', '2', '4', 0,
  /* 1084 */ 'd', '2', '4', 0,
  /* 1088 */ 'h', '2', '4', 0,
  /* 1092 */ 'q', '2', '4', 0,
  /* 1096 */ 's', '2', '4', 0,
  /* 1100 */ 'w', '2', '4', 0,
  /* 1104 */ 'x', '2', '4', 0,
  /* 1108 */ 'D', '1', '_', 'D', '2', '_', 'D', '3', '_', 'D', '4', 0,
  /* 1120 */ 'Q', '1', '_', 'Q', '2', '_', 'Q', '3', '_', 'Q', '4', 0,
  /* 1132 */ 'W', '3', '_', 'W', '4', 0,
  /* 1138 */ 'X', '3', '_', 'X', '4', 0,
  /* 1144 */ 'b', '4', 0,
  /* 1147 */ 'd', '4', 0,
  /* 1150 */ 'h', '4', 0,
  /* 1153 */ 'q', '4', 0,
  /* 1156 */ 's', '4', 0,
  /* 1159 */ 'w', '4', 0,
  /* 1162 */ 'x', '4', 0,
  /* 1165 */ 'D', '1', '2', '_', 'D', '1', '3', '_', 'D', '1', '4', '_', 'D', '1', '5', 0,
  /* 1181 */ 'Q', '1', '2', '_', 'Q', '1', '3', '_', 'Q', '1', '4', '_', 'Q', '1', '5', 0,
  /* 1197 */ 'W', '1', '4', '_', 'W', '1', '5', 0,
  /* 1205 */ 'X', '1', '4', '_', 'X', '1', '5', 0,
  /* 1213 */ 'b', '1', '5', 0,
  /* 1217 */ 'd', '1', '5', 0,
  /* 1221 */ 'h', '1', '5', 0,
  /* 1225 */ 'q', '1', '5', 0,
  /* 1229 */ 's', '1', '5', 0,
  /* 1233 */ 'w', '1', '5', 0,
  /* 1237 */ 'x', '1', '5', 0,
  /* 1241 */ 'D', '2', '2', '_', 'D', '2', '3', '_', 'D', '2', '4', '_', 'D', '2', '5', 0,
  /* 1257 */ 'Q', '2', '2', '_', 'Q', '2', '3', '_', 'Q', '2', '4', '_', 'Q', '2', '5', 0,
  /* 1273 */ 'W', '2', '4', '_', 'W', '2', '5', 0,
  /* 1281 */ 'X', '2', '4', '_', 'X', '2', '5', 0,
  /* 1289 */ 'b', '2', '5', 0,
  /* 1293 */ 'd', '2', '5', 0,
  /* 1297 */ 'h', '2', '5', 0,
  /* 1301 */ 'q', '2', '5', 0,
  /* 1305 */ 's', '2', '5', 0,
  /* 1309 */ 'w', '2', '5', 0,
  /* 1313 */ 'x', '2', '5', 0,
  /* 1317 */ 'D', '2', '_', 'D', '3', '_', 'D', '4', '_', 'D', '5', 0,
  /* 1329 */ 'Q', '2', '_', 'Q', '3', '_', 'Q', '4', '_', 'Q', '5', 0,
  /* 1341 */ 'W', '4', '_', 'W', '5', 0,
  /* 1347 */ 'X', '4', '_', 'X', '5', 0,
  /* 1353 */ 'b', '5', 0,
  /* 1356 */ 'd', '5', 0,
  /* 1359 */ 'h', '5', 0,
  /* 1362 */ 'q', '5', 0,
  /* 1365 */ 's', '5', 0,
  /* 1368 */ 'w', '5', 0,
  /* 1371 */ 'x', '5', 0,
  /* 1374 */ 'D', '1', '3', '_', 'D', '1', '4', '_', 'D', '1', '5', '_', 'D', '1', '6', 0,
  /* 1390 */ 'Q', '1', '3', '_', 'Q', '1', '4', '_', 'Q', '1', '5', '_', 'Q', '1', '6', 0,
  /* 1406 */ 'W', '1', '5', '_', 'W', '1', '6', 0,
  /* 1414 */ 'X', '1', '5', '_', 'X', '1', '6', 0,
  /* 1422 */ 'b', '1', '6', 0,
  /* 1426 */ 'd', '1', '6', 0,
  /* 1430 */ 'h', '1', '6', 0,
  /* 1434 */ 'q', '1', '6', 0,
  /* 1438 */ 's', '1', '6', 0,
  /* 1442 */ 'w', '1', '6', 0,
  /* 1446 */ 'x', '1', '6', 0,
  /* 1450 */ 'D', '2', '3', '_', 'D', '2', '4', '_', 'D', '2', '5', '_', 'D', '2', '6', 0,
  /* 1466 */ 'Q', '2', '3', '_', 'Q', '2', '4', '_', 'Q', '2', '5', '_', 'Q', '2', '6', 0,
  /* 1482 */ 'W', '2', '5', '_', 'W', '2', '6', 0,
  /* 1490 */ 'X', '2', '5', '_', 'X', '2', '6', 0,
  /* 1498 */ 'b', '2', '6', 0,
  /* 1502 */ 'd', '2', '6', 0,
  /* 1506 */ 'h', '2', '6', 0,
  /* 1510 */ 'q', '2', '6', 0,
  /* 1514 */ 's', '2', '6', 0,
  /* 1518 */ 'w', '2', '6', 0,
  /* 1522 */ 'x', '2', '6', 0,
  /* 1526 */ 'D', '3', '_', 'D', '4', '_', 'D', '5', '_', 'D', '6', 0,
  /* 1538 */ 'Q', '3', '_', 'Q', '4', '_', 'Q', '5', '_', 'Q', '6', 0,
  /* 1550 */ 'W', '5', '_', 'W', '6', 0,
  /* 1556 */ 'X', '5', '_', 'X', '6', 0,
  /* 1562 */ 'b', '6', 0,
  /* 1565 */ 'd', '6', 0,
  /* 1568 */ 'h', '6', 0,
  /* 1571 */ 'q', '6', 0,
  /* 1574 */ 's', '6', 0,
  /* 1577 */ 'w', '6', 0,
  /* 1580 */ 'x', '6', 0,
  /* 1583 */ 'D', '1', '4', '_', 'D', '1', '5', '_', 'D', '1', '6', '_', 'D', '1', '7', 0,
  /* 1599 */ 'Q', '1', '4', '_', 'Q', '1', '5', '_', 'Q', '1', '6', '_', 'Q', '1', '7', 0,
  /* 1615 */ 'W', '1', '6', '_', 'W', '1', '7', 0,
  /* 1623 */ 'X', '1', '6', '_', 'X', '1', '7', 0,
  /* 1631 */ 'b', '1', '7', 0,
  /* 1635 */ 'd', '1', '7', 0,
  /* 1639 */ 'h', '1', '7', 0,
  /* 1643 */ 'q', '1', '7', 0,
  /* 1647 */ 's', '1', '7', 0,
  /* 1651 */ 'w', '1', '7', 0,
  /* 1655 */ 'x', '1', '7', 0,
  /* 1659 */ 'D', '2', '4', '_', 'D', '2', '5', '_', 'D', '2', '6', '_', 'D', '2', '7', 0,
  /* 1675 */ 'Q', '2', '4', '_', 'Q', '2', '5', '_', 'Q', '2', '6', '_', 'Q', '2', '7', 0,
  /* 1691 */ 'W', '2', '6', '_', 'W', '2', '7', 0,
  /* 1699 */ 'X', '2', '6', '_', 'X', '2', '7', 0,
  /* 1707 */ 'b', '2', '7', 0,
  /* 1711 */ 'd', '2', '7', 0,
  /* 1715 */ 'h', '2', '7', 0,
  /* 1719 */ 'q', '2', '7', 0,
  /* 1723 */ 's', '2', '7', 0,
  /* 1727 */ 'w', '2', '7', 0,
  /* 1731 */ 'x', '2', '7', 0,
  /* 1735 */ 'D', '4', '_', 'D', '5', '_', 'D', '6', '_', 'D', '7', 0,
  /* 1747 */ 'Q', '4', '_', 'Q', '5', '_', 'Q', '6', '_', 'Q', '7', 0,
  /* 1759 */ 'W', '6', '_', 'W', '7', 0,
  /* 1765 */ 'X', '6', '_', 'X', '7', 0,
  /* 1771 */ 'b', '7', 0,
  /* 1774 */ 'd', '7', 0,
  /* 1777 */ 'h', '7', 0,
  /* 1780 */ 'q', '7', 0,
  /* 1783 */ 's', '7', 0,
  /* 1786 */ 'w', '7', 0,
  /* 1789 */ 'x', '7', 0,
  /* 1792 */ 'D', '1', '5', '_', 'D', '1', '6', '_', 'D', '1', '7', '_', 'D', '1', '8', 0,
  /* 1808 */ 'Q', '1', '5', '_', 'Q', '1', '6', '_', 'Q', '1', '7', '_', 'Q', '1', '8', 0,
  /* 1824 */ 'W', '1', '7', '_', 'W', '1', '8', 0,
  /* 1832 */ 'X', '1', '7', '_', 'X', '1', '8', 0,
  /* 1840 */ 'b', '1', '8', 0,
  /* 1844 */ 'd', '1', '8', 0,
  /* 1848 */ 'h', '1', '8', 0,
  /* 1852 */ 'q', '1', '8', 0,
  /* 1856 */ 's', '1', '8', 0,
  /* 1860 */ 'w', '1', '8', 0,
  /* 1864 */ 'x', '1', '8', 0,
  /* 1868 */ 'D', '2', '5', '_', 'D', '2', '6', '_', 'D', '2', '7', '_', 'D', '2', '8', 0,
  /* 1884 */ 'Q', '2', '5', '_', 'Q', '2', '6', '_', 'Q', '2', '7', '_', 'Q', '2', '8', 0,
  /* 1900 */ 'W', '2', '7', '_', 'W', '2', '8', 0,
  /* 1908 */ 'X', '2', '7', '_', 'X', '2', '8', 0,
  /* 1916 */ 'b', '2', '8', 0,
  /* 1920 */ 'd', '2', '8', 0,
  /* 1924 */ 'h', '2', '8', 0,
  /* 1928 */ 'q', '2', '8', 0,
  /* 1932 */ 's', '2', '8', 0,
  /* 1936 */ 'w', '2', '8', 0,
  /* 1940 */ 'x', '2', '8', 0,
  /* 1944 */ 'D', '5', '_', 'D', '6', '_', 'D', '7', '_', 'D', '8', 0,
  /* 1956 */ 'Q', '5', '_', 'Q', '6', '_', 'Q', '7', '_', 'Q', '8', 0,
  /* 1968 */ 'W', '7', '_', 'W', '8', 0,
  /* 1974 */ 'X', '7', '_', 'X', '8', 0,
  /* 1980 */ 'b', '8', 0,
  /* 1983 */ 'd', '8', 0,
  /* 1986 */ 'h', '8', 0,
  /* 1989 */ 'q', '8', 0,
  /* 1992 */ 's', '8', 0,
  /* 1995 */ 'w', '8', 0,
  /* 1998 */ 'x', '8', 0,
  /* 2001 */ 'D', '1', '6', '_', 'D', '1', '7', '_', 'D', '1', '8', '_', 'D', '1', '9', 0,
  /* 2017 */ 'Q', '1', '6', '_', 'Q', '1', '7', '_', 'Q', '1', '8', '_', 'Q', '1', '9', 0,
  /* 2033 */ 'W', '1', '8', '_', 'W', '1', '9', 0,
  /* 2041 */ 'X', '1', '8', '_', 'X', '1', '9', 0,
  /* 2049 */ 'b', '1', '9', 0,
  /* 2053 */ 'd', '1', '9', 0,
  /* 2057 */ 'h', '1', '9', 0,
  /* 2061 */ 'q', '1', '9', 0,
  /* 2065 */ 's', '1', '9', 0,
  /* 2069 */ 'w', '1', '9', 0,
  /* 2073 */ 'x', '1', '9', 0,
  /* 2077 */ 'D', '2', '6', '_', 'D', '2', '7', '_', 'D', '2', '8', '_', 'D', '2', '9', 0,
  /* 2093 */ 'Q', '2', '6', '_', 'Q', '2', '7', '_', 'Q', '2', '8', '_', 'Q', '2', '9', 0,
  /* 2109 */ 'W', '2', '8', '_', 'W', '2', '9', 0,
  /* 2117 */ 'b', '2', '9', 0,
  /* 2121 */ 'd', '2', '9', 0,
  /* 2125 */ 'h', '2', '9', 0,
  /* 2129 */ 'q', '2', '9', 0,
  /* 2133 */ 's', '2', '9', 0,
  /* 2137 */ 'w', '2', '9', 0,
  /* 2141 */ 'x', '2', '9', 0,
  /* 2145 */ 'D', '6', '_', 'D', '7', '_', 'D', '8', '_', 'D', '9', 0,
  /* 2157 */ 'Q', '6', '_', 'Q', '7', '_', 'Q', '8', '_', 'Q', '9', 0,
  /* 2169 */ 'W', '8', '_', 'W', '9', 0,
  /* 2175 */ 'X', '8', '_', 'X', '9', 0,
  /* 2181 */ 'b', '9', 0,
  /* 2184 */ 'd', '9', 0,
  /* 2187 */ 'h', '9', 0,
  /* 2190 */ 'q', '9', 0,
  /* 2193 */ 's', '9', 0,
  /* 2196 */ 'w', '9', 0,
  /* 2199 */ 'x', '9', 0,
  /* 2202 */ 'X', '2', '8', '_', 'F', 'P', 0,
  /* 2209 */ 'F', 'P', '_', 'L', 'R', 0,
  /* 2215 */ 'W', '3', '0', '_', 'W', 'Z', 'R', 0,
  /* 2223 */ 'L', 'R', '_', 'X', 'Z', 'R', 0,
  /* 2230 */ 'w', 's', 'p', 0,
  /* 2234 */ 'w', 'z', 'r', 0,
  /* 2238 */ 'x', 'z', 'r', 0,
  /* 2242 */ 'n', 'z', 'c', 'v', 0,
  };

  static const uint16_t RegAsmOffsetNoRegAltName[] = {
    2141, 208, 2242, 2231, 2230, 2234, 2238, 256, 517, 726, 935, 1144, 1353, 1562, 
    1771, 1980, 2181, 40, 321, 584, 795, 1004, 1213, 1422, 1631, 1840, 2049, 116, 
    397, 660, 871, 1080, 1289, 1498, 1707, 1916, 2117, 184, 457, 259, 520, 729, 
    938, 1147, 1356, 1565, 1774, 1983, 2184, 44, 325, 588, 799, 1008, 1217, 1426, 
    1635, 1844, 2053, 120, 401, 664, 875, 1084, 1293, 1502, 1711, 1920, 2121, 188, 
    461, 262, 523, 732, 941, 1150, 1359, 1568, 1777, 1986, 2187, 48, 329, 592, 
    803, 1012, 1221, 1430, 1639, 1848, 2057, 124, 405, 668, 879, 1088, 1297, 1506, 
    1715, 1924, 2125, 192, 465, 265, 526, 735, 944, 1153, 1362, 1571, 1780, 1989, 
    2190, 52, 333, 596, 807, 1016, 1225, 1434, 1643, 1852, 2061, 128, 409, 672, 
    883, 1092, 1301, 1510, 1719, 1928, 2129, 196, 469, 268, 529, 738, 947, 1156, 
    1365, 1574, 1783, 1992, 2193, 56, 337, 600, 811, 1020, 1229, 1438, 1647, 1856, 
    2065, 132, 413, 676, 887, 1096, 1305, 1514, 1723, 1932, 2133, 200, 473, 271, 
    532, 741, 950, 1159, 1368, 1577, 1786, 1995, 2196, 60, 341, 604, 815, 1024, 
    1233, 1442, 1651, 1860, 2069, 136, 417, 680, 891, 1100, 1309, 1518, 1727, 1936, 
    2137, 204, 274, 535, 744, 953, 1162, 1371, 1580, 1789, 1998, 2199, 64, 345, 
    608, 819, 1028, 1237, 1446, 1655, 1864, 2073, 140, 421, 684, 895, 1104, 1313, 
    1522, 1731, 1940, 485, 695, 905, 1114, 1323, 1532, 1741, 1950, 2151, 6, 283, 
    545, 755, 964, 1173, 1382, 1591, 1800, 2009, 76, 357, 620, 831, 1040, 1249, 
    1458, 1667, 1876, 2085, 152, 433, 220, 899, 1108, 1317, 1526, 1735, 1944, 2145, 
    0, 277, 538, 747, 956, 1165, 1374, 1583, 1792, 2001, 68, 349, 612, 823, 
    1032, 1241, 1450, 1659, 1868, 2077, 144, 425, 212, 477, 688, 692, 902, 1111, 
    1320, 1529, 1738, 1947, 2148, 3, 280, 541, 751, 960, 1169, 1378, 1587, 1796, 
    2005, 72, 353, 616, 827, 1036, 1245, 1454, 1663, 1872, 2081, 148, 429, 216, 
    481, 499, 708, 917, 1126, 1335, 1544, 1753, 1962, 2163, 19, 297, 560, 771, 
    980, 1189, 1398, 1607, 1816, 2025, 92, 373, 636, 847, 1056, 1265, 1474, 1683, 
    1892, 2101, 168, 449, 235, 911, 1120, 1329, 1538, 1747, 1956, 2157, 13, 291, 
    553, 763, 972, 1181, 1390, 1599, 1808, 2017, 84, 365, 628, 839, 1048, 1257, 
    1466, 1675, 1884, 2093, 160, 441, 227, 491, 701, 705, 914, 1123, 1332, 1541, 
    1750, 1959, 2160, 16, 294, 556, 767, 976, 1185, 1394, 1603, 1812, 2021, 88, 
    369, 632, 843, 1052, 1261, 1470, 1679, 1888, 2097, 164, 445, 231, 495, 242, 
    2215, 505, 714, 923, 1132, 1341, 1550, 1759, 1968, 2169, 26, 305, 568, 779, 
    988, 1197, 1406, 1615, 1824, 2033, 100, 381, 644, 855, 1064, 1273, 1482, 1691, 
    1900, 2109, 176, 2209, 2223, 249, 2202, 511, 720, 929, 1138, 1347, 1556, 1765, 
    1974, 2175, 33, 313, 576, 787, 996, 1205, 1414, 1623, 1832, 2041, 108, 389, 
    652, 863, 1072, 1281, 1490, 1699, 1908, 
  };

  static const char AsmStrsvlist1[] = {
  /* 0 */ 0,
  };

  static const uint8_t RegAsmOffsetvlist1[] = {
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 
  };

  static const char AsmStrsvreg[] = {
  /* 0 */ 'v', '1', '0', 0,
  /* 4 */ 'v', '2', '0', 0,
  /* 8 */ 'v', '3', '0', 0,
  /* 12 */ 'v', '0', 0,
  /* 15 */ 'v', '1', '1', 0,
  /* 19 */ 'v', '2', '1', 0,
  /* 23 */ 'v', '3', '1', 0,
  /* 27 */ 'v', '1', 0,
  /* 30 */ 'v', '1', '2', 0,
  /* 34 */ 'v', '2', '2', 0,
  /* 38 */ 'v', '2', 0,
  /* 41 */ 'v', '1', '3', 0,
  /* 45 */ 'v', '2', '3', 0,
  /* 49 */ 'v', '3', 0,
  /* 52 */ 'v', '1', '4', 0,
  /* 56 */ 'v', '2', '4', 0,
  /* 60 */ 'v', '4', 0,
  /* 63 */ 'v', '1', '5', 0,
  /* 67 */ 'v', '2', '5', 0,
  /* 71 */ 'v', '5', 0,
  /* 74 */ 'v', '1', '6', 0,
  /* 78 */ 'v', '2', '6', 0,
  /* 82 */ 'v', '6', 0,
  /* 85 */ 'v', '1', '7', 0,
  /* 89 */ 'v', '2', '7', 0,
  /* 93 */ 'v', '7', 0,
  /* 96 */ 'v', '1', '8', 0,
  /* 100 */ 'v', '2', '8', 0,
  /* 104 */ 'v', '8', 0,
  /* 107 */ 'v', '1', '9', 0,
  /* 111 */ 'v', '2', '9', 0,
  /* 115 */ 'v', '9', 0,
  };

  static const uint8_t RegAsmOffsetvreg[] = {
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 12, 27, 38, 
    49, 60, 71, 82, 93, 104, 115, 0, 15, 30, 41, 52, 63, 74, 
    85, 96, 107, 4, 19, 34, 45, 56, 67, 78, 89, 100, 111, 8, 
    23, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 12, 27, 38, 49, 60, 71, 82, 93, 104, 
    115, 0, 15, 30, 41, 52, 63, 74, 85, 96, 107, 4, 19, 34, 
    45, 56, 67, 78, 89, 100, 111, 8, 23, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 12, 27, 38, 49, 60, 71, 82, 93, 104, 115, 0, 
    15, 30, 41, 52, 63, 74, 85, 96, 107, 4, 19, 34, 45, 56, 
    67, 78, 89, 100, 111, 8, 23, 12, 27, 38, 49, 60, 71, 82, 
    93, 104, 115, 0, 15, 30, 41, 52, 63, 74, 85, 96, 107, 4, 
    19, 34, 45, 56, 67, 78, 89, 100, 111, 8, 23, 12, 27, 38, 
    49, 60, 71, 82, 93, 104, 115, 0, 15, 30, 41, 52, 63, 74, 
    85, 96, 107, 4, 19, 34, 45, 56, 67, 78, 89, 100, 111, 8, 
    23, 12, 27, 38, 49, 60, 71, 82, 93, 104, 115, 0, 15, 30, 
    41, 52, 63, 74, 85, 96, 107, 4, 19, 34, 45, 56, 67, 78, 
    89, 100, 111, 8, 23, 12, 27, 38, 49, 60, 71, 82, 93, 104, 
    115, 0, 15, 30, 41, 52, 63, 74, 85, 96, 107, 4, 19, 34, 
    45, 56, 67, 78, 89, 100, 111, 8, 23, 12, 27, 38, 49, 60, 
    71, 82, 93, 104, 115, 0, 15, 30, 41, 52, 63, 74, 85, 96, 
    107, 4, 19, 34, 45, 56, 67, 78, 89, 100, 111, 8, 23, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 
  };

  switch(AltIdx) {
  default: llvm_unreachable("Invalid register alt name index!");
  case AArch64::NoRegAltName:
    assert(*(AsmStrsNoRegAltName+RegAsmOffsetNoRegAltName[RegNo-1]) &&
           "Invalid alt name index for register!");
    return AsmStrsNoRegAltName+RegAsmOffsetNoRegAltName[RegNo-1];
  case AArch64::vlist1:
    assert(*(AsmStrsvlist1+RegAsmOffsetvlist1[RegNo-1]) &&
           "Invalid alt name index for register!");
    return AsmStrsvlist1+RegAsmOffsetvlist1[RegNo-1];
  case AArch64::vreg:
    assert(*(AsmStrsvreg+RegAsmOffsetvreg[RegNo-1]) &&
           "Invalid alt name index for register!");
    return AsmStrsvreg+RegAsmOffsetvreg[RegNo-1];
  }
}

#ifdef PRINT_ALIAS_INSTR
#undef PRINT_ALIAS_INSTR

static bool AArch64AppleInstPrinterValidateMCOperand(const MCOperand &MCOp,
                  const MCSubtargetInfo &STI,
                  unsigned PredicateIndex);
bool AArch64AppleInstPrinter::printAliasInstr(const MCInst *MI, const MCSubtargetInfo &STI, raw_ostream &OS) {
  const char *AsmString;
  switch (MI->getOpcode()) {
  default: return false;
  case AArch64::ADDSWri:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32spRegClassID).contains(MI->getOperand(1).getReg())) {
      // (ADDSWri WZR, GPR32sp:$src, addsub_shifted_imm32:$imm)
      AsmString = "cmn	$\x02, $\xFF\x03\x01";
      break;
    }
    return false;
  case AArch64::ADDSWrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ADDSWrs WZR, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "cmn	$\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (ADDSWrs WZR, GPR32:$src1, GPR32:$src2, arith_shift32:$sh)
      AsmString = "cmn	$\x02, $\x03$\xFF\x04\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ADDSWrs GPR32:$dst, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "adds	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ADDSWrx:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32sponlyRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 16) {
      // (ADDSWrx WZR, GPR32sponly:$src1, GPR32:$src2, 16)
      AsmString = "cmn	$\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (ADDSWrx WZR, GPR32sp:$src1, GPR32:$src2, arith_extend:$sh)
      AsmString = "cmn	$\x02, $\x03$\xFF\x04\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32sponlyRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 16) {
      // (ADDSWrx GPR32:$dst, GPR32sponly:$src1, GPR32:$src2, 16)
      AsmString = "adds	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ADDSXri:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg())) {
      // (ADDSXri XZR, GPR64sp:$src, addsub_shifted_imm64:$imm)
      AsmString = "cmn	$\x02, $\xFF\x03\x01";
      break;
    }
    return false;
  case AArch64::ADDSXrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ADDSXrs XZR, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "cmn	$\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (ADDSXrs XZR, GPR64:$src1, GPR64:$src2, arith_shift64:$sh)
      AsmString = "cmn	$\x02, $\x03$\xFF\x04\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ADDSXrs GPR64:$dst, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "adds	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ADDSXrx:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (ADDSXrx XZR, GPR64sp:$src1, GPR32:$src2, arith_extend:$sh)
      AsmString = "cmn	$\x02, $\x03$\xFF\x04\x03";
      break;
    }
    return false;
  case AArch64::ADDSXrx64:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64sponlyRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 24) {
      // (ADDSXrx64 XZR, GPR64sponly:$src1, GPR64:$src2, 24)
      AsmString = "cmn	$\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (ADDSXrx64 XZR, GPR64sp:$src1, GPR64:$src2, arith_extendlsl64:$sh)
      AsmString = "cmn	$\x02, $\x03$\xFF\x04\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64sponlyRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 24) {
      // (ADDSXrx64 GPR64:$dst, GPR64sponly:$src1, GPR64:$src2, 24)
      AsmString = "adds	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ADDWri:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32sponlyRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ADDWri GPR32sponly:$dst, GPR32sp:$src, 0, 0)
      AsmString = "mov $\x01, $\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32sponlyRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ADDWri GPR32sp:$dst, GPR32sponly:$src, 0, 0)
      AsmString = "mov $\x01, $\x02";
      break;
    }
    return false;
  case AArch64::ADDWrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ADDWrs GPR32:$dst, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "add	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ADDWrx:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32sponlyRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 16) {
      // (ADDWrx GPR32sponly:$dst, GPR32sp:$src1, GPR32:$src2, 16)
      AsmString = "add	$\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32sponlyRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 16) {
      // (ADDWrx GPR32sp:$dst, GPR32sponly:$src1, GPR32:$src2, 16)
      AsmString = "add	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ADDXri:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64sponlyRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ADDXri GPR64sponly:$dst, GPR64sp:$src, 0, 0)
      AsmString = "mov $\x01, $\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64sponlyRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ADDXri GPR64sp:$dst, GPR64sponly:$src, 0, 0)
      AsmString = "mov $\x01, $\x02";
      break;
    }
    return false;
  case AArch64::ADDXrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ADDXrs GPR64:$dst, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "add	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ADDXrx64:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64sponlyRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 24) {
      // (ADDXrx64 GPR64sponly:$dst, GPR64sp:$src1, GPR64:$src2, 24)
      AsmString = "add	$\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64sponlyRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 24) {
      // (ADDXrx64 GPR64sp:$dst, GPR64sponly:$src1, GPR64:$src2, 24)
      AsmString = "add	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ANDSWri:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg())) {
      // (ANDSWri WZR, GPR32:$src1, logical_imm32:$src2)
      AsmString = "tst $\x02, $\xFF\x03\x04";
      break;
    }
    return false;
  case AArch64::ANDSWrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ANDSWrs WZR, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "tst $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (ANDSWrs WZR, GPR32:$src1, GPR32:$src2, logical_shift32:$sh)
      AsmString = "tst $\x02, $\x03$\xFF\x04\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ANDSWrs GPR32:$dst, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "ands	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ANDSXri:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg())) {
      // (ANDSXri XZR, GPR64:$src1, logical_imm64:$src2)
      AsmString = "tst $\x02, $\xFF\x03\x05";
      break;
    }
    return false;
  case AArch64::ANDSXrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ANDSXrs XZR, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "tst $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (ANDSXrs XZR, GPR64:$src1, GPR64:$src2, logical_shift64:$sh)
      AsmString = "tst $\x02, $\x03$\xFF\x04\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ANDSXrs GPR64:$dst, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "ands	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ANDWrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ANDWrs GPR32:$dst, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "and	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ANDXrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ANDXrs GPR64:$dst, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "and	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::BICSWrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (BICSWrs GPR32:$dst, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "bics	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::BICSXrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (BICSXrs GPR64:$dst, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "bics	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::BICWrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (BICWrs GPR32:$dst, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "bic	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::BICXrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (BICXrs GPR64:$dst, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "bic	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::BICv2i32:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (BICv2i32 V64:$Vd, imm0_255:$imm, 0)
      AsmString = "bic $\xFF\x01\x06.2s, $\xFF\x02\x07";
      break;
    }
    return false;
  case AArch64::BICv4i16:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (BICv4i16 V64:$Vd, imm0_255:$imm, 0)
      AsmString = "bic $\xFF\x01\x06.4h, $\xFF\x02\x07";
      break;
    }
    return false;
  case AArch64::BICv4i32:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (BICv4i32 V128:$Vd, imm0_255:$imm, 0)
      AsmString = "bic $\xFF\x01\x06.4s, $\xFF\x02\x07";
      break;
    }
    return false;
  case AArch64::BICv8i16:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (BICv8i16 V128:$Vd, imm0_255:$imm, 0)
      AsmString = "bic $\xFF\x01\x06.8h, $\xFF\x02\x07";
      break;
    }
    return false;
  case AArch64::CLREX:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15) {
      // (CLREX 15)
      AsmString = "clrex";
      break;
    }
    return false;
  case AArch64::CSINCWr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::WZR &&
        MI->getOperand(2).getReg() == AArch64::WZR &&
        AArch64AppleInstPrinterValidateMCOperand(MI->getOperand(3), STI, 1)) {
      // (CSINCWr GPR32:$dst, WZR, WZR, inv_ccode:$cc)
      AsmString = "cset $\x01, $\xFF\x04\x08";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg() &&
        AArch64AppleInstPrinterValidateMCOperand(MI->getOperand(3), STI, 1)) {
      // (CSINCWr GPR32:$dst, GPR32:$src, GPR32:$src, inv_ccode:$cc)
      AsmString = "cinc $\x01, $\x02, $\xFF\x04\x08";
      break;
    }
    return false;
  case AArch64::CSINCXr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::XZR &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        AArch64AppleInstPrinterValidateMCOperand(MI->getOperand(3), STI, 1)) {
      // (CSINCXr GPR64:$dst, XZR, XZR, inv_ccode:$cc)
      AsmString = "cset $\x01, $\xFF\x04\x08";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg() &&
        AArch64AppleInstPrinterValidateMCOperand(MI->getOperand(3), STI, 1)) {
      // (CSINCXr GPR64:$dst, GPR64:$src, GPR64:$src, inv_ccode:$cc)
      AsmString = "cinc $\x01, $\x02, $\xFF\x04\x08";
      break;
    }
    return false;
  case AArch64::CSINVWr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::WZR &&
        MI->getOperand(2).getReg() == AArch64::WZR &&
        AArch64AppleInstPrinterValidateMCOperand(MI->getOperand(3), STI, 1)) {
      // (CSINVWr GPR32:$dst, WZR, WZR, inv_ccode:$cc)
      AsmString = "csetm $\x01, $\xFF\x04\x08";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg() &&
        AArch64AppleInstPrinterValidateMCOperand(MI->getOperand(3), STI, 1)) {
      // (CSINVWr GPR32:$dst, GPR32:$src, GPR32:$src, inv_ccode:$cc)
      AsmString = "cinv $\x01, $\x02, $\xFF\x04\x08";
      break;
    }
    return false;
  case AArch64::CSINVXr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::XZR &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        AArch64AppleInstPrinterValidateMCOperand(MI->getOperand(3), STI, 1)) {
      // (CSINVXr GPR64:$dst, XZR, XZR, inv_ccode:$cc)
      AsmString = "csetm $\x01, $\xFF\x04\x08";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg() &&
        AArch64AppleInstPrinterValidateMCOperand(MI->getOperand(3), STI, 1)) {
      // (CSINVXr GPR64:$dst, GPR64:$src, GPR64:$src, inv_ccode:$cc)
      AsmString = "cinv $\x01, $\x02, $\xFF\x04\x08";
      break;
    }
    return false;
  case AArch64::CSNEGWr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg() &&
        AArch64AppleInstPrinterValidateMCOperand(MI->getOperand(3), STI, 1)) {
      // (CSNEGWr GPR32:$dst, GPR32:$src, GPR32:$src, inv_ccode:$cc)
      AsmString = "cneg $\x01, $\x02, $\xFF\x04\x08";
      break;
    }
    return false;
  case AArch64::CSNEGXr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg() &&
        AArch64AppleInstPrinterValidateMCOperand(MI->getOperand(3), STI, 1)) {
      // (CSNEGXr GPR64:$dst, GPR64:$src, GPR64:$src, inv_ccode:$cc)
      AsmString = "cneg $\x01, $\x02, $\xFF\x04\x08";
      break;
    }
    return false;
  case AArch64::DCPS1:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (DCPS1 0)
      AsmString = "dcps1";
      break;
    }
    return false;
  case AArch64::DCPS2:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (DCPS2 0)
      AsmString = "dcps2";
      break;
    }
    return false;
  case AArch64::DCPS3:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (DCPS3 0)
      AsmString = "dcps3";
      break;
    }
    return false;
  case AArch64::EONWrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (EONWrs GPR32:$dst, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "eon	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::EONXrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (EONXrs GPR64:$dst, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "eon	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::EORWrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (EORWrs GPR32:$dst, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "eor	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::EORXrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (EORXrs GPR64:$dst, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "eor	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::EXTRWrri:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg()) {
      // (EXTRWrri GPR32:$dst, GPR32:$src, GPR32:$src, imm0_31:$shift)
      AsmString = "ror $\x01, $\x02, $\x04";
      break;
    }
    return false;
  case AArch64::EXTRXrri:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg()) {
      // (EXTRXrri GPR64:$dst, GPR64:$src, GPR64:$src, imm0_63:$shift)
      AsmString = "ror $\x01, $\x02, $\x04";
      break;
    }
    return false;
  case AArch64::HINT:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (HINT { 0, 0, 0 })
      AsmString = "nop";
      break;
    }
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 1) {
      // (HINT { 0, 0, 1 })
      AsmString = "yield";
      break;
    }
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 2) {
      // (HINT { 0, 1, 0 })
      AsmString = "wfe";
      break;
    }
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 3) {
      // (HINT { 0, 1, 1 })
      AsmString = "wfi";
      break;
    }
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 4) {
      // (HINT { 1, 0, 0 })
      AsmString = "sev";
      break;
    }
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 5) {
      // (HINT { 1, 0, 1 })
      AsmString = "sevl";
      break;
    }
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 16 &&
        STI.getFeatureBits()[AArch64::FeatureRAS]) {
      // (HINT { 1, 0, 0, 0, 0 })
      AsmString = "esb";
      break;
    }
    if (MI->getNumOperands() == 1 &&
        AArch64AppleInstPrinterValidateMCOperand(MI->getOperand(0), STI, 2) &&
        STI.getFeatureBits()[AArch64::FeatureSPE]) {
      // (HINT psbhint_op:$op)
      AsmString = "psb $\xFF\x01\x09";
      break;
    }
    return false;
  case AArch64::INSvi16gpr:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (INSvi16gpr V128:$dst, VectorIndexH:$idx, GPR32:$src)
      AsmString = "mov.h	$\xFF\x01\x06$\xFF\x02\x0A, $\x03";
      break;
    }
    return false;
  case AArch64::INSvi16lane:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (INSvi16lane V128:$dst, VectorIndexH:$idx, V128:$src, VectorIndexH:$idx2)
      AsmString = "mov.h	$\xFF\x01\x06$\xFF\x02\x0A, $\xFF\x03\x06$\xFF\x04\x0A";
      break;
    }
    return false;
  case AArch64::INSvi32gpr:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (INSvi32gpr V128:$dst, VectorIndexS:$idx, GPR32:$src)
      AsmString = "mov.s	$\xFF\x01\x06$\xFF\x02\x0A, $\x03";
      break;
    }
    return false;
  case AArch64::INSvi32lane:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (INSvi32lane V128:$dst, VectorIndexS:$idx, V128:$src, VectorIndexS:$idx2)
      AsmString = "mov.s	$\xFF\x01\x06$\xFF\x02\x0A, $\xFF\x03\x06$\xFF\x04\x0A";
      break;
    }
    return false;
  case AArch64::INSvi64gpr:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (INSvi64gpr V128:$dst, VectorIndexD:$idx, GPR64:$src)
      AsmString = "mov.d	$\xFF\x01\x06$\xFF\x02\x0A, $\x03";
      break;
    }
    return false;
  case AArch64::INSvi64lane:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (INSvi64lane V128:$dst, VectorIndexD:$idx, V128:$src, VectorIndexD:$idx2)
      AsmString = "mov.d	$\xFF\x01\x06$\xFF\x02\x0A, $\xFF\x03\x06$\xFF\x04\x0A";
      break;
    }
    return false;
  case AArch64::INSvi8gpr:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (INSvi8gpr V128:$dst, VectorIndexB:$idx, GPR32:$src)
      AsmString = "mov.b	$\xFF\x01\x06$\xFF\x02\x0A, $\x03";
      break;
    }
    return false;
  case AArch64::INSvi8lane:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (INSvi8lane V128:$dst, VectorIndexB:$idx, V128:$src, VectorIndexB:$idx2)
      AsmString = "mov.b	$\xFF\x01\x06$\xFF\x02\x0A, $\xFF\x03\x06$\xFF\x04\x0A";
      break;
    }
    return false;
  case AArch64::ISB:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15) {
      // (ISB 15)
      AsmString = "isb";
      break;
    }
    return false;
  case AArch64::LD1Fourv16b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Fourv16b_POST GPR64sp:$Rn, VecListFour16b:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0B, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::LD1Fourv1d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Fourv1d_POST GPR64sp:$Rn, VecListFour1d:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0C, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD1Fourv2d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Fourv2d_POST GPR64sp:$Rn, VecListFour2d:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0D, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::LD1Fourv2s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Fourv2s_POST GPR64sp:$Rn, VecListFour2s:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0E, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD1Fourv4h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Fourv4h_POST GPR64sp:$Rn, VecListFour4h:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0F, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD1Fourv4s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Fourv4s_POST GPR64sp:$Rn, VecListFour4s:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x10, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::LD1Fourv8b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Fourv8b_POST GPR64sp:$Rn, VecListFour8b:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x11, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD1Fourv8h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Fourv8h_POST GPR64sp:$Rn, VecListFour8h:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x12, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::LD1Onev16b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Onev16b_POST GPR64sp:$Rn, VecListOne16b:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0B, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD1Onev1d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Onev1d_POST GPR64sp:$Rn, VecListOne1d:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0C, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::LD1Onev2d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Onev2d_POST GPR64sp:$Rn, VecListOne2d:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0D, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD1Onev2s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Onev2s_POST GPR64sp:$Rn, VecListOne2s:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0E, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::LD1Onev4h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Onev4h_POST GPR64sp:$Rn, VecListOne4h:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0F, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::LD1Onev4s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Onev4s_POST GPR64sp:$Rn, VecListOne4s:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x10, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD1Onev8b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Onev8b_POST GPR64sp:$Rn, VecListOne8b:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x11, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::LD1Onev8h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Onev8h_POST GPR64sp:$Rn, VecListOne8h:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x12, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD1Rv16b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Rv16b_POST GPR64sp:$Rn, VecListOne16b:$Vt, XZR)
      AsmString = "ld1r	$\xFF\x02\x0B, [$\x01], #1";
      break;
    }
    return false;
  case AArch64::LD1Rv1d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Rv1d_POST GPR64sp:$Rn, VecListOne1d:$Vt, XZR)
      AsmString = "ld1r	$\xFF\x02\x0C, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::LD1Rv2d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Rv2d_POST GPR64sp:$Rn, VecListOne2d:$Vt, XZR)
      AsmString = "ld1r	$\xFF\x02\x0D, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::LD1Rv2s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Rv2s_POST GPR64sp:$Rn, VecListOne2s:$Vt, XZR)
      AsmString = "ld1r	$\xFF\x02\x0E, [$\x01], #4";
      break;
    }
    return false;
  case AArch64::LD1Rv4h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Rv4h_POST GPR64sp:$Rn, VecListOne4h:$Vt, XZR)
      AsmString = "ld1r	$\xFF\x02\x0F, [$\x01], #2";
      break;
    }
    return false;
  case AArch64::LD1Rv4s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Rv4s_POST GPR64sp:$Rn, VecListOne4s:$Vt, XZR)
      AsmString = "ld1r	$\xFF\x02\x10, [$\x01], #4";
      break;
    }
    return false;
  case AArch64::LD1Rv8b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Rv8b_POST GPR64sp:$Rn, VecListOne8b:$Vt, XZR)
      AsmString = "ld1r	$\xFF\x02\x11, [$\x01], #1";
      break;
    }
    return false;
  case AArch64::LD1Rv8h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Rv8h_POST GPR64sp:$Rn, VecListOne8h:$Vt, XZR)
      AsmString = "ld1r	$\xFF\x02\x12, [$\x01], #2";
      break;
    }
    return false;
  case AArch64::LD1Threev16b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Threev16b_POST GPR64sp:$Rn, VecListThree16b:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0B, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::LD1Threev1d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Threev1d_POST GPR64sp:$Rn, VecListThree1d:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0C, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::LD1Threev2d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Threev2d_POST GPR64sp:$Rn, VecListThree2d:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0D, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::LD1Threev2s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Threev2s_POST GPR64sp:$Rn, VecListThree2s:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0E, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::LD1Threev4h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Threev4h_POST GPR64sp:$Rn, VecListThree4h:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0F, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::LD1Threev4s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Threev4s_POST GPR64sp:$Rn, VecListThree4s:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x10, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::LD1Threev8b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Threev8b_POST GPR64sp:$Rn, VecListThree8b:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x11, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::LD1Threev8h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Threev8h_POST GPR64sp:$Rn, VecListThree8h:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x12, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::LD1Twov16b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Twov16b_POST GPR64sp:$Rn, VecListTwo16b:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0B, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD1Twov1d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Twov1d_POST GPR64sp:$Rn, VecListTwo1d:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0C, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD1Twov2d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Twov2d_POST GPR64sp:$Rn, VecListTwo2d:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0D, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD1Twov2s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Twov2s_POST GPR64sp:$Rn, VecListTwo2s:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0E, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD1Twov4h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Twov4h_POST GPR64sp:$Rn, VecListTwo4h:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x0F, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD1Twov4s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Twov4s_POST GPR64sp:$Rn, VecListTwo4s:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x10, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD1Twov8b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Twov8b_POST GPR64sp:$Rn, VecListTwo8b:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x11, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD1Twov8h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Twov8h_POST GPR64sp:$Rn, VecListTwo8h:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x12, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD1i16_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1i16_POST GPR64sp:$Rn, VecListOneh:$Vt, VectorIndexH:$idx, XZR)
      AsmString = "ld1	$\xFF\x02\x13$\xFF\x03\x0A, [$\x01], #2";
      break;
    }
    return false;
  case AArch64::LD1i32_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1i32_POST GPR64sp:$Rn, VecListOnes:$Vt, VectorIndexS:$idx, XZR)
      AsmString = "ld1	$\xFF\x02\x14$\xFF\x03\x0A, [$\x01], #4";
      break;
    }
    return false;
  case AArch64::LD1i64_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1i64_POST GPR64sp:$Rn, VecListOned:$Vt, VectorIndexD:$idx, XZR)
      AsmString = "ld1	$\xFF\x02\x15$\xFF\x03\x0A, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::LD1i8_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1i8_POST GPR64sp:$Rn, VecListOneb:$Vt, VectorIndexB:$idx, XZR)
      AsmString = "ld1	$\xFF\x02\x16$\xFF\x03\x0A, [$\x01], #1";
      break;
    }
    return false;
  case AArch64::LD2Rv16b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD2Rv16b_POST GPR64sp:$Rn, VecListTwo16b:$Vt, XZR)
      AsmString = "ld2r	$\xFF\x02\x0B, [$\x01], #2";
      break;
    }
    return false;
  case AArch64::LD2Rv1d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD2Rv1d_POST GPR64sp:$Rn, VecListTwo1d:$Vt, XZR)
      AsmString = "ld2r	$\xFF\x02\x0C, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD2Rv2d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD2Rv2d_POST GPR64sp:$Rn, VecListTwo2d:$Vt, XZR)
      AsmString = "ld2r	$\xFF\x02\x0D, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD2Rv2s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD2Rv2s_POST GPR64sp:$Rn, VecListTwo2s:$Vt, XZR)
      AsmString = "ld2r	$\xFF\x02\x0E, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::LD2Rv4h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD2Rv4h_POST GPR64sp:$Rn, VecListTwo4h:$Vt, XZR)
      AsmString = "ld2r	$\xFF\x02\x0F, [$\x01], #4";
      break;
    }
    return false;
  case AArch64::LD2Rv4s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD2Rv4s_POST GPR64sp:$Rn, VecListTwo4s:$Vt, XZR)
      AsmString = "ld2r	$\xFF\x02\x10, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::LD2Rv8b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD2Rv8b_POST GPR64sp:$Rn, VecListTwo8b:$Vt, XZR)
      AsmString = "ld2r	$\xFF\x02\x11, [$\x01], #2";
      break;
    }
    return false;
  case AArch64::LD2Rv8h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD2Rv8h_POST GPR64sp:$Rn, VecListTwo8h:$Vt, XZR)
      AsmString = "ld2r	$\xFF\x02\x12, [$\x01], #4";
      break;
    }
    return false;
  case AArch64::LD2Twov16b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD2Twov16b_POST GPR64sp:$Rn, VecListTwo16b:$Vt, XZR)
      AsmString = "ld2	$\xFF\x02\x0B, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD2Twov2d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD2Twov2d_POST GPR64sp:$Rn, VecListTwo2d:$Vt, XZR)
      AsmString = "ld2	$\xFF\x02\x0D, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD2Twov2s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD2Twov2s_POST GPR64sp:$Rn, VecListTwo2s:$Vt, XZR)
      AsmString = "ld2	$\xFF\x02\x0E, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD2Twov4h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD2Twov4h_POST GPR64sp:$Rn, VecListTwo4h:$Vt, XZR)
      AsmString = "ld2	$\xFF\x02\x0F, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD2Twov4s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD2Twov4s_POST GPR64sp:$Rn, VecListTwo4s:$Vt, XZR)
      AsmString = "ld2	$\xFF\x02\x10, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD2Twov8b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD2Twov8b_POST GPR64sp:$Rn, VecListTwo8b:$Vt, XZR)
      AsmString = "ld2	$\xFF\x02\x11, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD2Twov8h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD2Twov8h_POST GPR64sp:$Rn, VecListTwo8h:$Vt, XZR)
      AsmString = "ld2	$\xFF\x02\x12, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD2i16_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD2i16_POST GPR64sp:$Rn, VecListTwoh:$Vt, VectorIndexH:$idx, XZR)
      AsmString = "ld2	$\xFF\x02\x13$\xFF\x03\x0A, [$\x01], #4";
      break;
    }
    return false;
  case AArch64::LD2i32_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD2i32_POST GPR64sp:$Rn, VecListTwos:$Vt, VectorIndexS:$idx, XZR)
      AsmString = "ld2	$\xFF\x02\x14$\xFF\x03\x0A, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::LD2i64_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD2i64_POST GPR64sp:$Rn, VecListTwod:$Vt, VectorIndexD:$idx, XZR)
      AsmString = "ld2	$\xFF\x02\x15$\xFF\x03\x0A, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD2i8_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD2i8_POST GPR64sp:$Rn, VecListTwob:$Vt, VectorIndexB:$idx, XZR)
      AsmString = "ld2	$\xFF\x02\x16$\xFF\x03\x0A, [$\x01], #2";
      break;
    }
    return false;
  case AArch64::LD3Rv16b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD3Rv16b_POST GPR64sp:$Rn, VecListThree16b:$Vt, XZR)
      AsmString = "ld3r	$\xFF\x02\x0B, [$\x01], #3";
      break;
    }
    return false;
  case AArch64::LD3Rv1d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD3Rv1d_POST GPR64sp:$Rn, VecListThree1d:$Vt, XZR)
      AsmString = "ld3r	$\xFF\x02\x0C, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::LD3Rv2d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD3Rv2d_POST GPR64sp:$Rn, VecListThree2d:$Vt, XZR)
      AsmString = "ld3r	$\xFF\x02\x0D, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::LD3Rv2s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD3Rv2s_POST GPR64sp:$Rn, VecListThree2s:$Vt, XZR)
      AsmString = "ld3r	$\xFF\x02\x0E, [$\x01], #12";
      break;
    }
    return false;
  case AArch64::LD3Rv4h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD3Rv4h_POST GPR64sp:$Rn, VecListThree4h:$Vt, XZR)
      AsmString = "ld3r	$\xFF\x02\x0F, [$\x01], #6";
      break;
    }
    return false;
  case AArch64::LD3Rv4s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD3Rv4s_POST GPR64sp:$Rn, VecListThree4s:$Vt, XZR)
      AsmString = "ld3r	$\xFF\x02\x10, [$\x01], #12";
      break;
    }
    return false;
  case AArch64::LD3Rv8b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD3Rv8b_POST GPR64sp:$Rn, VecListThree8b:$Vt, XZR)
      AsmString = "ld3r	$\xFF\x02\x11, [$\x01], #3";
      break;
    }
    return false;
  case AArch64::LD3Rv8h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD3Rv8h_POST GPR64sp:$Rn, VecListThree8h:$Vt, XZR)
      AsmString = "ld3r	$\xFF\x02\x12, [$\x01], #6";
      break;
    }
    return false;
  case AArch64::LD3Threev16b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD3Threev16b_POST GPR64sp:$Rn, VecListThree16b:$Vt, XZR)
      AsmString = "ld3	$\xFF\x02\x0B, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::LD3Threev2d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD3Threev2d_POST GPR64sp:$Rn, VecListThree2d:$Vt, XZR)
      AsmString = "ld3	$\xFF\x02\x0D, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::LD3Threev2s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD3Threev2s_POST GPR64sp:$Rn, VecListThree2s:$Vt, XZR)
      AsmString = "ld3	$\xFF\x02\x0E, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::LD3Threev4h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD3Threev4h_POST GPR64sp:$Rn, VecListThree4h:$Vt, XZR)
      AsmString = "ld3	$\xFF\x02\x0F, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::LD3Threev4s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD3Threev4s_POST GPR64sp:$Rn, VecListThree4s:$Vt, XZR)
      AsmString = "ld3	$\xFF\x02\x10, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::LD3Threev8b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD3Threev8b_POST GPR64sp:$Rn, VecListThree8b:$Vt, XZR)
      AsmString = "ld3	$\xFF\x02\x11, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::LD3Threev8h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD3Threev8h_POST GPR64sp:$Rn, VecListThree8h:$Vt, XZR)
      AsmString = "ld3	$\xFF\x02\x12, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::LD3i16_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD3i16_POST GPR64sp:$Rn, VecListThreeh:$Vt, VectorIndexH:$idx, XZR)
      AsmString = "ld3	$\xFF\x02\x13$\xFF\x03\x0A, [$\x01], #6";
      break;
    }
    return false;
  case AArch64::LD3i32_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD3i32_POST GPR64sp:$Rn, VecListThrees:$Vt, VectorIndexS:$idx, XZR)
      AsmString = "ld3	$\xFF\x02\x14$\xFF\x03\x0A, [$\x01], #12";
      break;
    }
    return false;
  case AArch64::LD3i64_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD3i64_POST GPR64sp:$Rn, VecListThreed:$Vt, VectorIndexD:$idx, XZR)
      AsmString = "ld3	$\xFF\x02\x15$\xFF\x03\x0A, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::LD3i8_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD3i8_POST GPR64sp:$Rn, VecListThreeb:$Vt, VectorIndexB:$idx, XZR)
      AsmString = "ld3	$\xFF\x02\x16$\xFF\x03\x0A, [$\x01], #3";
      break;
    }
    return false;
  case AArch64::LD4Fourv16b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD4Fourv16b_POST GPR64sp:$Rn, VecListFour16b:$Vt, XZR)
      AsmString = "ld4	$\xFF\x02\x0B, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::LD4Fourv2d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD4Fourv2d_POST GPR64sp:$Rn, VecListFour2d:$Vt, XZR)
      AsmString = "ld4	$\xFF\x02\x0D, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::LD4Fourv2s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD4Fourv2s_POST GPR64sp:$Rn, VecListFour2s:$Vt, XZR)
      AsmString = "ld4	$\xFF\x02\x0E, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD4Fourv4h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD4Fourv4h_POST GPR64sp:$Rn, VecListFour4h:$Vt, XZR)
      AsmString = "ld4	$\xFF\x02\x0F, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD4Fourv4s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD4Fourv4s_POST GPR64sp:$Rn, VecListFour4s:$Vt, XZR)
      AsmString = "ld4	$\xFF\x02\x10, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::LD4Fourv8b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD4Fourv8b_POST GPR64sp:$Rn, VecListFour8b:$Vt, XZR)
      AsmString = "ld4	$\xFF\x02\x11, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD4Fourv8h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD4Fourv8h_POST GPR64sp:$Rn, VecListFour8h:$Vt, XZR)
      AsmString = "ld4	$\xFF\x02\x12, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::LD4Rv16b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD4Rv16b_POST GPR64sp:$Rn, VecListFour16b:$Vt, XZR)
      AsmString = "ld4r	$\xFF\x02\x0B, [$\x01], #4";
      break;
    }
    return false;
  case AArch64::LD4Rv1d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD4Rv1d_POST GPR64sp:$Rn, VecListFour1d:$Vt, XZR)
      AsmString = "ld4r	$\xFF\x02\x0C, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD4Rv2d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD4Rv2d_POST GPR64sp:$Rn, VecListFour2d:$Vt, XZR)
      AsmString = "ld4r	$\xFF\x02\x0D, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD4Rv2s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD4Rv2s_POST GPR64sp:$Rn, VecListFour2s:$Vt, XZR)
      AsmString = "ld4r	$\xFF\x02\x0E, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD4Rv4h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD4Rv4h_POST GPR64sp:$Rn, VecListFour4h:$Vt, XZR)
      AsmString = "ld4r	$\xFF\x02\x0F, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::LD4Rv4s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD4Rv4s_POST GPR64sp:$Rn, VecListFour4s:$Vt, XZR)
      AsmString = "ld4r	$\xFF\x02\x10, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD4Rv8b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD4Rv8b_POST GPR64sp:$Rn, VecListFour8b:$Vt, XZR)
      AsmString = "ld4r	$\xFF\x02\x11, [$\x01], #4";
      break;
    }
    return false;
  case AArch64::LD4Rv8h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD4Rv8h_POST GPR64sp:$Rn, VecListFour8h:$Vt, XZR)
      AsmString = "ld4r	$\xFF\x02\x12, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::LD4i16_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD4i16_POST GPR64sp:$Rn, VecListFourh:$Vt, VectorIndexH:$idx, XZR)
      AsmString = "ld4	$\xFF\x02\x13$\xFF\x03\x0A, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::LD4i32_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD4i32_POST GPR64sp:$Rn, VecListFours:$Vt, VectorIndexS:$idx, XZR)
      AsmString = "ld4	$\xFF\x02\x14$\xFF\x03\x0A, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD4i64_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD4i64_POST GPR64sp:$Rn, VecListFourd:$Vt, VectorIndexD:$idx, XZR)
      AsmString = "ld4	$\xFF\x02\x15$\xFF\x03\x0A, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD4i8_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD4i8_POST GPR64sp:$Rn, VecListFourb:$Vt, VectorIndexB:$idx, XZR)
      AsmString = "ld4	$\xFF\x02\x16$\xFF\x03\x0A, [$\x01], #4";
      break;
    }
    return false;
  case AArch64::LDADDB:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDADDB WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "staddb	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDADDH:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDADDH WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "staddh	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDADDLB:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDADDLB WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "staddlb	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDADDLH:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDADDLH WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "staddlh	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDADDLW:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDADDLW WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "staddl	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDADDLX:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDADDLX XZR, GPR64:$Rs, GPR64sp:$Rn)
      AsmString = "staddl	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDADDW:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDADDW WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stadd	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDADDX:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDADDX XZR, GPR64:$Rs, GPR64sp:$Rn)
      AsmString = "stadd	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDCLRB:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDCLRB WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stclrb	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDCLRH:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDCLRH WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stclrh	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDCLRLB:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDCLRLB WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stclrlb	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDCLRLH:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDCLRLH WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stclrlh	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDCLRLW:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDCLRLW WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stclrl	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDCLRLX:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDCLRLX XZR, GPR64:$Rs, GPR64sp:$Rn)
      AsmString = "stclrl	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDCLRW:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDCLRW WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stclr	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDCLRX:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDCLRX XZR, GPR64:$Rs, GPR64sp:$Rn)
      AsmString = "stclr	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDEORB:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDEORB WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "steorb	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDEORH:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDEORH WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "steorh	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDEORLB:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDEORLB WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "steorlb	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDEORLH:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDEORLH WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "steorlh	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDEORLW:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDEORLW WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "steorl	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDEORLX:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDEORLX XZR, GPR64:$Rs, GPR64sp:$Rn)
      AsmString = "steorl	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDEORW:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDEORW WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "steor	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDEORX:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDEORX XZR, GPR64:$Rs, GPR64sp:$Rn)
      AsmString = "steor	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDNPDi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LDNPDi FPR64:$Rt, FPR64:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "ldnp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDNPQi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LDNPQi FPR128:$Rt, FPR128:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "ldnp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDNPSi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LDNPSi FPR32:$Rt, FPR32:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "ldnp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDNPWi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LDNPWi GPR32:$Rt, GPR32:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "ldnp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDNPXi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LDNPXi GPR64:$Rt, GPR64:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "ldnp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDPDi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LDPDi FPR64:$Rt, FPR64:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "ldp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDPQi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LDPQi FPR128:$Rt, FPR128:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "ldp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDPSWi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LDPSWi GPR64:$Rt, GPR64:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "ldpsw	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDPSi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LDPSi FPR32:$Rt, FPR32:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "ldp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDPWi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LDPWi GPR32:$Rt, GPR32:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "ldp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDPXi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LDPXi GPR64:$Rt, GPR64:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "ldp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDRAAindexed:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::HasV8_3aOps]) {
      // (LDRAAindexed GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldraa	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDRABindexed:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::HasV8_3aOps]) {
      // (LDRABindexed GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldrab	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDRBBroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (LDRBBroX GPR32:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "ldrb	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::LDRBBui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRBBui GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldrb	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDRBroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR8RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (LDRBroX FPR8:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "ldr	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::LDRBui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR8RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRBui FPR8:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldr	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDRDroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (LDRDroX FPR64:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "ldr	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::LDRDui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRDui FPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldr	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDRHHroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (LDRHHroX GPR32:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "ldrh	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::LDRHHui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRHHui GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldrh	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDRHroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR16RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (LDRHroX FPR16:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "ldr	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::LDRHui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR16RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRHui FPR16:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldr	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDRQroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (LDRQroX FPR128:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "ldr	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::LDRQui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRQui FPR128:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldr	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDRSBWroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (LDRSBWroX GPR32:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "ldrsb	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::LDRSBWui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRSBWui GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldrsb	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDRSBXroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (LDRSBXroX GPR64:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "ldrsb	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::LDRSBXui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRSBXui GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldrsb	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDRSHWroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (LDRSHWroX GPR32:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "ldrsh	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::LDRSHWui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRSHWui GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldrsh	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDRSHXroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (LDRSHXroX GPR64:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "ldrsh	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::LDRSHXui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRSHXui GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldrsh	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDRSWroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (LDRSWroX GPR64:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "ldrsw	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::LDRSWui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRSWui GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldrsw	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDRSroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (LDRSroX FPR32:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "ldr	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::LDRSui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRSui FPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldr	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDRWroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (LDRWroX GPR32:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "ldr	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::LDRWui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRWui GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldr	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDRXroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (LDRXroX GPR64:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "ldr	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::LDRXui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRXui GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldr	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDSETB:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDSETB WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stsetb	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSETH:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDSETH WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stseth	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSETLB:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDSETLB WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stsetlb	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSETLH:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDSETLH WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stsetlh	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSETLW:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDSETLW WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stsetl	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSETLX:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDSETLX XZR, GPR64:$Rs, GPR64sp:$Rn)
      AsmString = "stsetl	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSETW:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDSETW WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stset	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSETX:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDSETX XZR, GPR64:$Rs, GPR64sp:$Rn)
      AsmString = "stset	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSMAXB:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDSMAXB WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stsmaxb	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSMAXH:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDSMAXH WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stsmaxh	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSMAXLB:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDSMAXLB WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stsmaxlb	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSMAXLH:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDSMAXLH WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stsmaxlh	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSMAXLW:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDSMAXLW WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stsmaxl	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSMAXLX:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDSMAXLX XZR, GPR64:$Rs, GPR64sp:$Rn)
      AsmString = "stsmaxl	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSMAXW:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDSMAXW WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stsmax	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSMAXX:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDSMAXX XZR, GPR64:$Rs, GPR64sp:$Rn)
      AsmString = "stsmax	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSMINB:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDSMINB WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stsminb	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSMINH:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDSMINH WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stsminh	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSMINLB:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDSMINLB WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stsminlb	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSMINLH:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDSMINLH WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stsminlh	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSMINLW:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDSMINLW WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stsminl	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSMINLX:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDSMINLX XZR, GPR64:$Rs, GPR64sp:$Rn)
      AsmString = "stsminl	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSMINW:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDSMINW WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stsmin	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSMINX:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDSMINX XZR, GPR64:$Rs, GPR64sp:$Rn)
      AsmString = "stsmin	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDTRBi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDTRBi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldtrb	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDTRHi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDTRHi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldtrh	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDTRSBWi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDTRSBWi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldtrsb	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDTRSBXi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDTRSBXi GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldtrsb	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDTRSHWi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDTRSHWi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldtrsh	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDTRSHXi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDTRSHXi GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldtrsh	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDTRSWi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDTRSWi GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldtrsw	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDTRWi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDTRWi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldtr	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDTRXi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDTRXi GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldtr	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDUMAXB:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDUMAXB WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stumaxb	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDUMAXH:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDUMAXH WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stumaxh	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDUMAXLB:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDUMAXLB WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stumaxlb	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDUMAXLH:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDUMAXLH WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stumaxlh	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDUMAXLW:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDUMAXLW WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stumaxl	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDUMAXLX:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDUMAXLX XZR, GPR64:$Rs, GPR64sp:$Rn)
      AsmString = "stumaxl	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDUMAXW:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDUMAXW WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stumax	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDUMAXX:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDUMAXX XZR, GPR64:$Rs, GPR64sp:$Rn)
      AsmString = "stumax	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDUMINB:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDUMINB WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stuminb	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDUMINH:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDUMINH WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stuminh	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDUMINLB:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDUMINLB WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stuminlb	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDUMINLH:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDUMINLH WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stuminlh	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDUMINLW:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDUMINLW WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stuminl	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDUMINLX:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDUMINLX XZR, GPR64:$Rs, GPR64sp:$Rn)
      AsmString = "stuminl	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDUMINW:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDUMINW WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stumin	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDUMINX:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDUMINX XZR, GPR64:$Rs, GPR64sp:$Rn)
      AsmString = "stumin	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDURBBi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDURBBi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldurb	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDURBi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR8RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDURBi FPR8:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldur	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDURDi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDURDi FPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldur	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDURHHi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDURHHi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldurh	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDURHi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR16RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDURHi FPR16:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldur	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDURQi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDURQi FPR128:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldur	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDURSBWi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDURSBWi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldursb	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDURSBXi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDURSBXi GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldursb	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDURSHWi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDURSHWi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldursh	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDURSHXi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDURSHXi GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldursh	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDURSWi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDURSWi GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldursw	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDURSi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDURSi FPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldur	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDURWi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDURWi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldur	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDURXi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDURXi GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldur	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::MADDWrrr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::WZR) {
      // (MADDWrrr GPR32:$dst, GPR32:$src1, GPR32:$src2, WZR)
      AsmString = "mul	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::MADDXrrr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (MADDXrrr GPR64:$dst, GPR64:$src1, GPR64:$src2, XZR)
      AsmString = "mul	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::MOVKWi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 16) {
      // (MOVKWi GPR32:$Rd, movk_symbol_g1:$sym, 16)
      AsmString = "movk $\x01, $\x02";
      break;
    }
    return false;
  case AArch64::MOVKXi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 48) {
      // (MOVKXi GPR64:$Rd, movk_symbol_g3:$sym, 48)
      AsmString = "movk $\x01, $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 32) {
      // (MOVKXi GPR64:$Rd, movk_symbol_g2:$sym, 32)
      AsmString = "movk $\x01, $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 16) {
      // (MOVKXi GPR64:$Rd, movk_symbol_g1:$sym, 16)
      AsmString = "movk $\x01, $\x02";
      break;
    }
    return false;
  case AArch64::MSUBWrrr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::WZR) {
      // (MSUBWrrr GPR32:$dst, GPR32:$src1, GPR32:$src2, WZR)
      AsmString = "mneg	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::MSUBXrrr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (MSUBXrrr GPR64:$dst, GPR64:$src1, GPR64:$src2, XZR)
      AsmString = "mneg	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::NOTv16i8:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg())) {
      // (NOTv16i8 V128:$Vd, V128:$Vn)
      AsmString = "mvn.16b $\xFF\x01\x06, $\xFF\x02\x06";
      break;
    }
    return false;
  case AArch64::NOTv8i8:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg())) {
      // (NOTv8i8 V64:$Vd, V64:$Vn)
      AsmString = "mvn.8b $\xFF\x01\x06, $\xFF\x02\x06";
      break;
    }
    return false;
  case AArch64::ORNWrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::WZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ORNWrs GPR32:$Wd, WZR, GPR32:$Wm, 0)
      AsmString = "mvn $\x01, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::WZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (ORNWrs GPR32:$Wd, WZR, GPR32:$Wm, logical_shift32:$sh)
      AsmString = "mvn $\x01, $\x03$\xFF\x04\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ORNWrs GPR32:$dst, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "orn	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ORNXrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::XZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ORNXrs GPR64:$Xd, XZR, GPR64:$Xm, 0)
      AsmString = "mvn $\x01, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::XZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (ORNXrs GPR64:$Xd, XZR, GPR64:$Xm, logical_shift64:$sh)
      AsmString = "mvn $\x01, $\x03$\xFF\x04\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ORNXrs GPR64:$dst, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "orn	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ORRWrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::WZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ORRWrs GPR32:$dst, WZR, GPR32:$src, 0)
      AsmString = "mov $\x01, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ORRWrs GPR32:$dst, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "orr	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ORRXrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::XZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ORRXrs GPR64:$dst, XZR, GPR64:$src, 0)
      AsmString = "mov $\x01, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ORRXrs GPR64:$dst, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "orr	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ORRv16i8:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg()) {
      // (ORRv16i8 V128:$dst, V128:$src, V128:$src)
      AsmString = "mov.16b	$\xFF\x01\x06, $\xFF\x02\x06";
      break;
    }
    return false;
  case AArch64::ORRv2i32:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (ORRv2i32 V64:$Vd, imm0_255:$imm, 0)
      AsmString = "orr $\xFF\x01\x06.2s, $\xFF\x02\x07";
      break;
    }
    return false;
  case AArch64::ORRv4i16:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (ORRv4i16 V64:$Vd, imm0_255:$imm, 0)
      AsmString = "orr $\xFF\x01\x06.4h, $\xFF\x02\x07";
      break;
    }
    return false;
  case AArch64::ORRv4i32:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (ORRv4i32 V128:$Vd, imm0_255:$imm, 0)
      AsmString = "orr $\xFF\x01\x06.4s, $\xFF\x02\x07";
      break;
    }
    return false;
  case AArch64::ORRv8i16:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (ORRv8i16 V128:$Vd, imm0_255:$imm, 0)
      AsmString = "orr $\xFF\x01\x06.8h, $\xFF\x02\x07";
      break;
    }
    return false;
  case AArch64::ORRv8i8:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg()) {
      // (ORRv8i8 V64:$dst, V64:$src, V64:$src)
      AsmString = "mov.8b	$\xFF\x01\x06, $\xFF\x02\x06";
      break;
    }
    return false;
  case AArch64::PRFMroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (PRFMroX prfop:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "prfm $\xFF\x01\x18, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::PRFMui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (PRFMui prfop:$Rt, GPR64sp:$Rn, 0)
      AsmString = "prfm $\xFF\x01\x18, [$\x02]";
      break;
    }
    return false;
  case AArch64::PRFUMi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (PRFUMi prfop:$Rt, GPR64sp:$Rn, 0)
      AsmString = "prfum	$\xFF\x01\x18, [$\x02]";
      break;
    }
    return false;
  case AArch64::RET:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).getReg() == AArch64::LR) {
      // (RET LR)
      AsmString = "ret";
      break;
    }
    return false;
  case AArch64::SBCSWr:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::WZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SBCSWr GPR32:$dst, WZR, GPR32:$src)
      AsmString = "ngcs $\x01, $\x03";
      break;
    }
    return false;
  case AArch64::SBCSXr:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::XZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SBCSXr GPR64:$dst, XZR, GPR64:$src)
      AsmString = "ngcs $\x01, $\x03";
      break;
    }
    return false;
  case AArch64::SBCWr:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::WZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SBCWr GPR32:$dst, WZR, GPR32:$src)
      AsmString = "ngc $\x01, $\x03";
      break;
    }
    return false;
  case AArch64::SBCXr:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::XZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SBCXr GPR64:$dst, XZR, GPR64:$src)
      AsmString = "ngc $\x01, $\x03";
      break;
    }
    return false;
  case AArch64::SBFMWri:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 31) {
      // (SBFMWri GPR32:$dst, GPR32:$src, imm0_31:$shift, 31)
      AsmString = "asr $\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 7) {
      // (SBFMWri GPR32:$dst, GPR32:$src, 0, 7)
      AsmString = "sxtb $\x01, $\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 15) {
      // (SBFMWri GPR32:$dst, GPR32:$src, 0, 15)
      AsmString = "sxth $\x01, $\x02";
      break;
    }
    return false;
  case AArch64::SBFMXri:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 63) {
      // (SBFMXri GPR64:$dst, GPR64:$src, imm0_63:$shift, 63)
      AsmString = "asr $\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 7) {
      // (SBFMXri GPR64:$dst, GPR64:$src, 0, 7)
      AsmString = "sxtb $\x01, $\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 15) {
      // (SBFMXri GPR64:$dst, GPR64:$src, 0, 15)
      AsmString = "sxth $\x01, $\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 31) {
      // (SBFMXri GPR64:$dst, GPR64:$src, 0, 31)
      AsmString = "sxtw $\x01, $\x02";
      break;
    }
    return false;
  case AArch64::SMADDLrrr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (SMADDLrrr GPR64:$dst, GPR32:$src1, GPR32:$src2, XZR)
      AsmString = "smull	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::SMSUBLrrr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (SMSUBLrrr GPR64:$dst, GPR32:$src1, GPR32:$src2, XZR)
      AsmString = "smnegl	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ST1Fourv16b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Fourv16b_POST GPR64sp:$Rn, VecListFour16b:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0B, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::ST1Fourv1d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Fourv1d_POST GPR64sp:$Rn, VecListFour1d:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0C, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST1Fourv2d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Fourv2d_POST GPR64sp:$Rn, VecListFour2d:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0D, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::ST1Fourv2s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Fourv2s_POST GPR64sp:$Rn, VecListFour2s:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0E, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST1Fourv4h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Fourv4h_POST GPR64sp:$Rn, VecListFour4h:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0F, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST1Fourv4s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Fourv4s_POST GPR64sp:$Rn, VecListFour4s:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x10, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::ST1Fourv8b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Fourv8b_POST GPR64sp:$Rn, VecListFour8b:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x11, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST1Fourv8h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Fourv8h_POST GPR64sp:$Rn, VecListFour8h:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x12, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::ST1Onev16b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Onev16b_POST GPR64sp:$Rn, VecListOne16b:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0B, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::ST1Onev1d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Onev1d_POST GPR64sp:$Rn, VecListOne1d:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0C, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::ST1Onev2d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Onev2d_POST GPR64sp:$Rn, VecListOne2d:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0D, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::ST1Onev2s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Onev2s_POST GPR64sp:$Rn, VecListOne2s:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0E, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::ST1Onev4h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Onev4h_POST GPR64sp:$Rn, VecListOne4h:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0F, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::ST1Onev4s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Onev4s_POST GPR64sp:$Rn, VecListOne4s:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x10, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::ST1Onev8b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Onev8b_POST GPR64sp:$Rn, VecListOne8b:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x11, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::ST1Onev8h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Onev8h_POST GPR64sp:$Rn, VecListOne8h:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x12, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::ST1Threev16b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Threev16b_POST GPR64sp:$Rn, VecListThree16b:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0B, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::ST1Threev1d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Threev1d_POST GPR64sp:$Rn, VecListThree1d:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0C, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::ST1Threev2d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Threev2d_POST GPR64sp:$Rn, VecListThree2d:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0D, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::ST1Threev2s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Threev2s_POST GPR64sp:$Rn, VecListThree2s:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0E, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::ST1Threev4h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Threev4h_POST GPR64sp:$Rn, VecListThree4h:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0F, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::ST1Threev4s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Threev4s_POST GPR64sp:$Rn, VecListThree4s:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x10, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::ST1Threev8b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Threev8b_POST GPR64sp:$Rn, VecListThree8b:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x11, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::ST1Threev8h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Threev8h_POST GPR64sp:$Rn, VecListThree8h:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x12, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::ST1Twov16b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Twov16b_POST GPR64sp:$Rn, VecListTwo16b:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0B, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST1Twov1d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Twov1d_POST GPR64sp:$Rn, VecListTwo1d:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0C, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::ST1Twov2d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Twov2d_POST GPR64sp:$Rn, VecListTwo2d:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0D, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST1Twov2s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Twov2s_POST GPR64sp:$Rn, VecListTwo2s:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0E, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::ST1Twov4h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Twov4h_POST GPR64sp:$Rn, VecListTwo4h:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x0F, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::ST1Twov4s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Twov4s_POST GPR64sp:$Rn, VecListTwo4s:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x10, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST1Twov8b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Twov8b_POST GPR64sp:$Rn, VecListTwo8b:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x11, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::ST1Twov8h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Twov8h_POST GPR64sp:$Rn, VecListTwo8h:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x12, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST1i16_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1i16_POST GPR64sp:$Rn, VecListOneh:$Vt, VectorIndexH:$idx, XZR)
      AsmString = "st1	$\xFF\x02\x13$\xFF\x03\x0A, [$\x01], #2";
      break;
    }
    return false;
  case AArch64::ST1i32_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1i32_POST GPR64sp:$Rn, VecListOnes:$Vt, VectorIndexS:$idx, XZR)
      AsmString = "st1	$\xFF\x02\x14$\xFF\x03\x0A, [$\x01], #4";
      break;
    }
    return false;
  case AArch64::ST1i64_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1i64_POST GPR64sp:$Rn, VecListOned:$Vt, VectorIndexD:$idx, XZR)
      AsmString = "st1	$\xFF\x02\x15$\xFF\x03\x0A, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::ST1i8_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1i8_POST GPR64sp:$Rn, VecListOneb:$Vt, VectorIndexB:$idx, XZR)
      AsmString = "st1	$\xFF\x02\x16$\xFF\x03\x0A, [$\x01], #1";
      break;
    }
    return false;
  case AArch64::ST2Twov16b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST2Twov16b_POST GPR64sp:$Rn, VecListTwo16b:$Vt, XZR)
      AsmString = "st2	$\xFF\x02\x0B, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST2Twov2d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST2Twov2d_POST GPR64sp:$Rn, VecListTwo2d:$Vt, XZR)
      AsmString = "st2	$\xFF\x02\x0D, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST2Twov2s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST2Twov2s_POST GPR64sp:$Rn, VecListTwo2s:$Vt, XZR)
      AsmString = "st2	$\xFF\x02\x0E, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::ST2Twov4h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST2Twov4h_POST GPR64sp:$Rn, VecListTwo4h:$Vt, XZR)
      AsmString = "st2	$\xFF\x02\x0F, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::ST2Twov4s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST2Twov4s_POST GPR64sp:$Rn, VecListTwo4s:$Vt, XZR)
      AsmString = "st2	$\xFF\x02\x10, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST2Twov8b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST2Twov8b_POST GPR64sp:$Rn, VecListTwo8b:$Vt, XZR)
      AsmString = "st2	$\xFF\x02\x11, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::ST2Twov8h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST2Twov8h_POST GPR64sp:$Rn, VecListTwo8h:$Vt, XZR)
      AsmString = "st2	$\xFF\x02\x12, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST2i16_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST2i16_POST GPR64sp:$Rn, VecListTwoh:$Vt, VectorIndexH:$idx, XZR)
      AsmString = "st2	$\xFF\x02\x13$\xFF\x03\x0A, [$\x01], #4";
      break;
    }
    return false;
  case AArch64::ST2i32_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST2i32_POST GPR64sp:$Rn, VecListTwos:$Vt, VectorIndexS:$idx, XZR)
      AsmString = "st2	$\xFF\x02\x14$\xFF\x03\x0A, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::ST2i64_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST2i64_POST GPR64sp:$Rn, VecListTwod:$Vt, VectorIndexD:$idx, XZR)
      AsmString = "st2	$\xFF\x02\x15$\xFF\x03\x0A, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::ST2i8_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST2i8_POST GPR64sp:$Rn, VecListTwob:$Vt, VectorIndexB:$idx, XZR)
      AsmString = "st2	$\xFF\x02\x16$\xFF\x03\x0A, [$\x01], #2";
      break;
    }
    return false;
  case AArch64::ST3Threev16b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST3Threev16b_POST GPR64sp:$Rn, VecListThree16b:$Vt, XZR)
      AsmString = "st3	$\xFF\x02\x0B, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::ST3Threev2d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST3Threev2d_POST GPR64sp:$Rn, VecListThree2d:$Vt, XZR)
      AsmString = "st3	$\xFF\x02\x0D, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::ST3Threev2s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST3Threev2s_POST GPR64sp:$Rn, VecListThree2s:$Vt, XZR)
      AsmString = "st3	$\xFF\x02\x0E, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::ST3Threev4h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST3Threev4h_POST GPR64sp:$Rn, VecListThree4h:$Vt, XZR)
      AsmString = "st3	$\xFF\x02\x0F, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::ST3Threev4s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST3Threev4s_POST GPR64sp:$Rn, VecListThree4s:$Vt, XZR)
      AsmString = "st3	$\xFF\x02\x10, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::ST3Threev8b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST3Threev8b_POST GPR64sp:$Rn, VecListThree8b:$Vt, XZR)
      AsmString = "st3	$\xFF\x02\x11, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::ST3Threev8h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST3Threev8h_POST GPR64sp:$Rn, VecListThree8h:$Vt, XZR)
      AsmString = "st3	$\xFF\x02\x12, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::ST3i16_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST3i16_POST GPR64sp:$Rn, VecListThreeh:$Vt, VectorIndexH:$idx, XZR)
      AsmString = "st3	$\xFF\x02\x13$\xFF\x03\x0A, [$\x01], #6";
      break;
    }
    return false;
  case AArch64::ST3i32_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST3i32_POST GPR64sp:$Rn, VecListThrees:$Vt, VectorIndexS:$idx, XZR)
      AsmString = "st3	$\xFF\x02\x14$\xFF\x03\x0A, [$\x01], #12";
      break;
    }
    return false;
  case AArch64::ST3i64_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST3i64_POST GPR64sp:$Rn, VecListThreed:$Vt, VectorIndexD:$idx, XZR)
      AsmString = "st3	$\xFF\x02\x15$\xFF\x03\x0A, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::ST3i8_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST3i8_POST GPR64sp:$Rn, VecListThreeb:$Vt, VectorIndexB:$idx, XZR)
      AsmString = "st3	$\xFF\x02\x16$\xFF\x03\x0A, [$\x01], #3";
      break;
    }
    return false;
  case AArch64::ST4Fourv16b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST4Fourv16b_POST GPR64sp:$Rn, VecListFour16b:$Vt, XZR)
      AsmString = "st4	$\xFF\x02\x0B, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::ST4Fourv2d_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST4Fourv2d_POST GPR64sp:$Rn, VecListFour2d:$Vt, XZR)
      AsmString = "st4	$\xFF\x02\x0D, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::ST4Fourv2s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST4Fourv2s_POST GPR64sp:$Rn, VecListFour2s:$Vt, XZR)
      AsmString = "st4	$\xFF\x02\x0E, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST4Fourv4h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST4Fourv4h_POST GPR64sp:$Rn, VecListFour4h:$Vt, XZR)
      AsmString = "st4	$\xFF\x02\x0F, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST4Fourv4s_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST4Fourv4s_POST GPR64sp:$Rn, VecListFour4s:$Vt, XZR)
      AsmString = "st4	$\xFF\x02\x10, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::ST4Fourv8b_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST4Fourv8b_POST GPR64sp:$Rn, VecListFour8b:$Vt, XZR)
      AsmString = "st4	$\xFF\x02\x11, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST4Fourv8h_POST:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST4Fourv8h_POST GPR64sp:$Rn, VecListFour8h:$Vt, XZR)
      AsmString = "st4	$\xFF\x02\x12, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::ST4i16_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST4i16_POST GPR64sp:$Rn, VecListFourh:$Vt, VectorIndexH:$idx, XZR)
      AsmString = "st4	$\xFF\x02\x13$\xFF\x03\x0A, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::ST4i32_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST4i32_POST GPR64sp:$Rn, VecListFours:$Vt, VectorIndexS:$idx, XZR)
      AsmString = "st4	$\xFF\x02\x14$\xFF\x03\x0A, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::ST4i64_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST4i64_POST GPR64sp:$Rn, VecListFourd:$Vt, VectorIndexD:$idx, XZR)
      AsmString = "st4	$\xFF\x02\x15$\xFF\x03\x0A, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST4i8_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST4i8_POST GPR64sp:$Rn, VecListFourb:$Vt, VectorIndexB:$idx, XZR)
      AsmString = "st4	$\xFF\x02\x16$\xFF\x03\x0A, [$\x01], #4";
      break;
    }
    return false;
  case AArch64::STNPDi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (STNPDi FPR64:$Rt, FPR64:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "stnp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::STNPQi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (STNPQi FPR128:$Rt, FPR128:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "stnp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::STNPSi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (STNPSi FPR32:$Rt, FPR32:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "stnp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::STNPWi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (STNPWi GPR32:$Rt, GPR32:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "stnp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::STNPXi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (STNPXi GPR64:$Rt, GPR64:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "stnp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::STPDi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (STPDi FPR64:$Rt, FPR64:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "stp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::STPQi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (STPQi FPR128:$Rt, FPR128:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "stp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::STPSi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (STPSi FPR32:$Rt, FPR32:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "stp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::STPWi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (STPWi GPR32:$Rt, GPR32:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "stp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::STPXi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (STPXi GPR64:$Rt, GPR64:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "stp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::STRBBroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (STRBBroX GPR32:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "strb	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::STRBBui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STRBBui GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "strb	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STRBroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR8RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (STRBroX FPR8:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "str	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::STRBui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR8RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STRBui FPR8:$Rt, GPR64sp:$Rn, 0)
      AsmString = "str	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STRDroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (STRDroX FPR64:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "str	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::STRDui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STRDui FPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "str	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STRHHroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (STRHHroX GPR32:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "strh	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::STRHHui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STRHHui GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "strh	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STRHroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR16RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (STRHroX FPR16:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "str	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::STRHui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR16RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STRHui FPR16:$Rt, GPR64sp:$Rn, 0)
      AsmString = "str	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STRQroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (STRQroX FPR128:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "str	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::STRQui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STRQui FPR128:$Rt, GPR64sp:$Rn, 0)
      AsmString = "str	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STRSroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (STRSroX FPR32:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "str	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::STRSui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STRSui FPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "str	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STRWroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (STRWroX GPR32:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "str	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::STRWui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STRWui GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "str	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STRXroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (STRXroX GPR64:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "str	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::STRXui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STRXui GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "str	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STTRBi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STTRBi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "sttrb	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STTRHi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STTRHi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "sttrh	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STTRWi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STTRWi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "sttr	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STTRXi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STTRXi GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "sttr	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STURBBi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STURBBi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "sturb	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STURBi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR8RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STURBi FPR8:$Rt, GPR64sp:$Rn, 0)
      AsmString = "stur	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STURDi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STURDi FPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "stur	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STURHHi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STURHHi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "sturh	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STURHi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR16RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STURHi FPR16:$Rt, GPR64sp:$Rn, 0)
      AsmString = "stur	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STURQi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STURQi FPR128:$Rt, GPR64sp:$Rn, 0)
      AsmString = "stur	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STURSi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STURSi FPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "stur	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STURWi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STURWi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "stur	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STURXi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STURXi GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "stur	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::SUBSWri:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32spRegClassID).contains(MI->getOperand(1).getReg())) {
      // (SUBSWri WZR, GPR32sp:$src, addsub_shifted_imm32:$imm)
      AsmString = "cmp	$\x02, $\xFF\x03\x01";
      break;
    }
    return false;
  case AArch64::SUBSWrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (SUBSWrs WZR, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "cmp	$\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUBSWrs WZR, GPR32:$src1, GPR32:$src2, arith_shift32:$sh)
      AsmString = "cmp	$\x02, $\x03$\xFF\x04\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::WZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (SUBSWrs GPR32:$dst, WZR, GPR32:$src, 0)
      AsmString = "negs $\x01, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::WZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUBSWrs GPR32:$dst, WZR, GPR32:$src, arith_shift32:$shift)
      AsmString = "negs $\x01, $\x03$\xFF\x04\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (SUBSWrs GPR32:$dst, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "subs	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::SUBSWrx:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32sponlyRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 16) {
      // (SUBSWrx WZR, GPR32sponly:$src1, GPR32:$src2, 16)
      AsmString = "cmp	$\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUBSWrx WZR, GPR32sp:$src1, GPR32:$src2, arith_extend:$sh)
      AsmString = "cmp	$\x02, $\x03$\xFF\x04\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32sponlyRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 16) {
      // (SUBSWrx GPR32:$dst, GPR32sponly:$src1, GPR32:$src2, 16)
      AsmString = "subs	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::SUBSXri:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg())) {
      // (SUBSXri XZR, GPR64sp:$src, addsub_shifted_imm64:$imm)
      AsmString = "cmp	$\x02, $\xFF\x03\x01";
      break;
    }
    return false;
  case AArch64::SUBSXrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (SUBSXrs XZR, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "cmp	$\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUBSXrs XZR, GPR64:$src1, GPR64:$src2, arith_shift64:$sh)
      AsmString = "cmp	$\x02, $\x03$\xFF\x04\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::XZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (SUBSXrs GPR64:$dst, XZR, GPR64:$src, 0)
      AsmString = "negs $\x01, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::XZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUBSXrs GPR64:$dst, XZR, GPR64:$src, arith_shift64:$shift)
      AsmString = "negs $\x01, $\x03$\xFF\x04\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (SUBSXrs GPR64:$dst, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "subs	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::SUBSXrx:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUBSXrx XZR, GPR64sp:$src1, GPR32:$src2, arith_extend:$sh)
      AsmString = "cmp	$\x02, $\x03$\xFF\x04\x03";
      break;
    }
    return false;
  case AArch64::SUBSXrx64:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64sponlyRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 24) {
      // (SUBSXrx64 XZR, GPR64sponly:$src1, GPR64:$src2, 24)
      AsmString = "cmp	$\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUBSXrx64 XZR, GPR64sp:$src1, GPR64:$src2, arith_extendlsl64:$sh)
      AsmString = "cmp	$\x02, $\x03$\xFF\x04\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64sponlyRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 24) {
      // (SUBSXrx64 GPR64:$dst, GPR64sponly:$src1, GPR64:$src2, 24)
      AsmString = "subs	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::SUBWrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::WZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (SUBWrs GPR32:$dst, WZR, GPR32:$src, 0)
      AsmString = "neg $\x01, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::WZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUBWrs GPR32:$dst, WZR, GPR32:$src, arith_shift32:$shift)
      AsmString = "neg $\x01, $\x03$\xFF\x04\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (SUBWrs GPR32:$dst, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "sub	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::SUBWrx:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32sponlyRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 16) {
      // (SUBWrx GPR32sponly:$dst, GPR32sp:$src1, GPR32:$src2, 16)
      AsmString = "sub	$\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32sponlyRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 16) {
      // (SUBWrx GPR32sp:$dst, GPR32sponly:$src1, GPR32:$src2, 16)
      AsmString = "sub	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::SUBXrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::XZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (SUBXrs GPR64:$dst, XZR, GPR64:$src, 0)
      AsmString = "neg $\x01, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::XZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUBXrs GPR64:$dst, XZR, GPR64:$src, arith_shift64:$shift)
      AsmString = "neg $\x01, $\x03$\xFF\x04\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (SUBXrs GPR64:$dst, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "sub	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::SUBXrx64:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64sponlyRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 24) {
      // (SUBXrx64 GPR64sponly:$dst, GPR64sp:$src1, GPR64:$src2, 24)
      AsmString = "sub	$\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64sponlyRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 24) {
      // (SUBXrx64 GPR64sp:$dst, GPR64sponly:$src1, GPR64:$src2, 24)
      AsmString = "sub	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::SYSxt:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(4).getReg() == AArch64::XZR) {
      // (SYSxt imm0_7:$op1, sys_cr_op:$Cn, sys_cr_op:$Cm, imm0_7:$op2, XZR)
      AsmString = "sys $\x01, $\xFF\x02\x19, $\xFF\x03\x19, $\x04";
      break;
    }
    return false;
  case AArch64::UBFMWri:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 31) {
      // (UBFMWri GPR32:$dst, GPR32:$src, imm0_31:$shift, 31)
      AsmString = "lsr $\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 7) {
      // (UBFMWri GPR32:$dst, GPR32:$src, 0, 7)
      AsmString = "uxtb $\x01, $\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 15) {
      // (UBFMWri GPR32:$dst, GPR32:$src, 0, 15)
      AsmString = "uxth $\x01, $\x02";
      break;
    }
    return false;
  case AArch64::UBFMXri:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 63) {
      // (UBFMXri GPR64:$dst, GPR64:$src, imm0_63:$shift, 63)
      AsmString = "lsr $\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 7) {
      // (UBFMXri GPR64:$dst, GPR64:$src, 0, 7)
      AsmString = "uxtb $\x01, $\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 15) {
      // (UBFMXri GPR64:$dst, GPR64:$src, 0, 15)
      AsmString = "uxth $\x01, $\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 31) {
      // (UBFMXri GPR64:$dst, GPR64:$src, 0, 31)
      AsmString = "uxtw $\x01, $\x02";
      break;
    }
    return false;
  case AArch64::UMADDLrrr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (UMADDLrrr GPR64:$dst, GPR32:$src1, GPR32:$src2, XZR)
      AsmString = "umull	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::UMOVvi32:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (UMOVvi32 GPR32:$dst, V128:$src, VectorIndexS:$idx)
      AsmString = "mov.s	$\x01, $\xFF\x02\x06$\xFF\x03\x0A";
      break;
    }
    return false;
  case AArch64::UMOVvi64:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (UMOVvi64 GPR64:$dst, V128:$src, VectorIndexD:$idx)
      AsmString = "mov.d	$\x01, $\xFF\x02\x06$\xFF\x03\x0A";
      break;
    }
    return false;
  case AArch64::UMSUBLrrr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (UMSUBLrrr GPR64:$dst, GPR32:$src1, GPR32:$src2, XZR)
      AsmString = "umnegl	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  }

  unsigned I = 0;
  while (AsmString[I] != ' ' && AsmString[I] != '\t' &&
         AsmString[I] != '$' && AsmString[I] != '\0')
    ++I;
  OS << '\t' << StringRef(AsmString, I);
  if (AsmString[I] != '\0') {
    if (AsmString[I] == ' ' || AsmString[I] == '\t')      OS << '\t';
    do {
      if (AsmString[I] == '$') {
        ++I;
        if (AsmString[I] == (char)0xff) {
          ++I;
          int OpIdx = AsmString[I++] - 1;
          int PrintMethodIdx = AsmString[I++] - 1;
          printCustomAliasOperand(MI, OpIdx, PrintMethodIdx, STI, OS);
        } else
          printOperand(MI, unsigned(AsmString[I++]) - 1, STI, OS);
      } else {
        OS << AsmString[I++];
      }
    } while (AsmString[I] != '\0');
  }

  return true;
}

void AArch64AppleInstPrinter::printCustomAliasOperand(
         const MCInst *MI, unsigned OpIdx,
         unsigned PrintMethodIdx,
         const MCSubtargetInfo &STI,
         raw_ostream &OS) {
  switch (PrintMethodIdx) {
  default:
    llvm_unreachable("Unknown PrintMethod kind");
    break;
  case 0:
    printAddSubImm(MI, OpIdx, STI, OS);
    break;
  case 1:
    printShifter(MI, OpIdx, STI, OS);
    break;
  case 2:
    printArithExtend(MI, OpIdx, STI, OS);
    break;
  case 3:
    printLogicalImm32(MI, OpIdx, STI, OS);
    break;
  case 4:
    printLogicalImm64(MI, OpIdx, STI, OS);
    break;
  case 5:
    printVRegOperand(MI, OpIdx, STI, OS);
    break;
  case 6:
    printImm(MI, OpIdx, STI, OS);
    break;
  case 7:
    printInverseCondCode(MI, OpIdx, STI, OS);
    break;
  case 8:
    printPSBHintOp(MI, OpIdx, STI, OS);
    break;
  case 9:
    printVectorIndex(MI, OpIdx, STI, OS);
    break;
  case 10:
    printTypedVectorList<16, 'b'>(MI, OpIdx, STI, OS);
    break;
  case 11:
    printTypedVectorList<1, 'd'>(MI, OpIdx, STI, OS);
    break;
  case 12:
    printTypedVectorList<2, 'd'>(MI, OpIdx, STI, OS);
    break;
  case 13:
    printTypedVectorList<2, 's'>(MI, OpIdx, STI, OS);
    break;
  case 14:
    printTypedVectorList<4, 'h'>(MI, OpIdx, STI, OS);
    break;
  case 15:
    printTypedVectorList<4, 's'>(MI, OpIdx, STI, OS);
    break;
  case 16:
    printTypedVectorList<8, 'b'>(MI, OpIdx, STI, OS);
    break;
  case 17:
    printTypedVectorList<8, 'h'>(MI, OpIdx, STI, OS);
    break;
  case 18:
    printTypedVectorList<0, 'h'>(MI, OpIdx, STI, OS);
    break;
  case 19:
    printTypedVectorList<0, 's'>(MI, OpIdx, STI, OS);
    break;
  case 20:
    printTypedVectorList<0, 'd'>(MI, OpIdx, STI, OS);
    break;
  case 21:
    printTypedVectorList<0, 'b'>(MI, OpIdx, STI, OS);
    break;
  case 22:
    printImmHex(MI, OpIdx, STI, OS);
    break;
  case 23:
    printPrefetchOp(MI, OpIdx, STI, OS);
    break;
  case 24:
    printSysCROperand(MI, OpIdx, STI, OS);
    break;
  }
}

static bool AArch64AppleInstPrinterValidateMCOperand(const MCOperand &MCOp,
                  const MCSubtargetInfo &STI,
                  unsigned PredicateIndex) {
  switch (PredicateIndex) {
  default:
    llvm_unreachable("Unknown MCOperandPredicate kind");
    break;
  case 1: {

    return MCOp.isImm() &&
           MCOp.getImm() != AArch64CC::AL &&
           MCOp.getImm() != AArch64CC::NV;
  
    }
  case 2: {

    // Check, if operand is valid, to fix exhaustive aliasing in disassembly.
    // "psb" is an alias to "hint" only for certain values of CRm:Op2 fields.
    if (!MCOp.isImm())
      return false;
    return AArch64PSBHint::lookupPSBByEncoding(MCOp.getImm()) != nullptr;
  
    }
  }
}

#endif // PRINT_ALIAS_INSTR
